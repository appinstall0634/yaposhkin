// index.js ‚Äî –≤–µ—Ä—Å–∏—è —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –º–µ–Ω—é-—Å–∞–π—Ç–æ–º –∏ POST /menu-order
// –° –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

// ---------------------------- Imports ----------------------------
const { generateText } = require('ai');
const { openai } = require('@ai-sdk/openai');
const express = require("express");
const body_parser = require("body-parser");
const axios = require("axios");
require('dotenv').config();
const crypto = require('crypto');
const fs = require('fs');
const { MongoClient } = require('mongodb');
const path = require('path');

// ---------------------------- Config ----------------------------
const PORT = process.env.PORT || 3500;
const app = express().use(body_parser.json());

const token = process.env.TOKEN;
const mytoken = process.env.MYTOKEN;

const TEMIR_API_BASE = 'https://ya.temir.me';
const MENU_URL = process.env.MENU_URL;

// Flow IDs
const NEW_CUSTOMER_FLOW_ID = '822959930422520';
const ORDER_FLOW_ID = '1265635731924331';
const NEW_CUSTOMER_FLOW_ID_KY = '762432499878824';
const ORDER_FLOW_ID_KY = '769449935850843';

// MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const DB_NAME = process.env.DB_NAME || 'whatsapp_bot';
let db = null;
let userStatesCollection = null;
let userDataForOrderCollection = null;

// –§–ª–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let isInitialized = false;
let initPromise = null;

const IS_VERCEL = !!process.env.VERCEL;

const cors = require('cors');
app.use(cors({ origin: MENU_URL ? new URL(MENU_URL).origin : '*' }));


// ---------------------------- States ----------------------------
const WAITING_STATES = {
  NONE: 'none',
  LANG: 'lang',
  FLOW_RESPONSE: 'flow_response',
  LOCATION: 'location',
  CATALOG_ORDER: 'catalog_order',
  ORDER_STATUS: 'order-status',
  HELP_CONFIRM: 'help_confirm'
};

const contact_branch = {
  '1': '0709063676',
  '15': '0705063676',
  '32': '0704063676'
};

// ---------------------------- ERR map ----------------------------
const ERR = {
  LOCATION_CLOSED: 'LOCATION_CLOSED',
  SOLD_OUT: 'SOLD_OUT',
  DELIVERY_UNAVAILABLE: 'DELIVERY_UNAVAILABLE',
  VALIDATION: 'VALIDATION',
  UNKNOWN: 'UNKNOWN',
  MIN_AMOUNT: 'MIN_AMOUNT',
};

// ---------------------------- AI Intent ----------------------------
async function analyzeCustomerIntent(messageText) {
  console.log('ü§ñ [AI] –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', messageText);
  try {
    const { text } = await generateText({
      model: openai('gpt-4o'),
      messages: [
        {
          role: 'system',
          content: `–¢—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ "Yaposhkin Rolls".
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: "<INTENT>|<lang>" –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ.

–Ø–ó–´–ö:
- <lang> = "kg", –µ—Å–ª–∏ –µ—Å—Ç—å –∫—ã—Ä–≥—ã–∑—Å–∫–∏–µ —Å–ª–æ–≤–∞ (–±—É–π—Ä—É—Ç–º–∞, —Å–∞–ª–∞–º, –∫–∞–Ω–¥–∞–π—Å—ã–∑, –∫–∞—á–∞–Ω, –∫–∞–Ω—á–∞, –∞–ª—ã–ø –∫–µ—Ç“Ø“Ø, —Ç”©–ª”©”©, setter, –∫”©–∑”©–º”©–ª–¥”©”© –∏ —Ç.–ø.), –∏–Ω–∞—á–µ "ru".

–ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û:
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï —è–≤–ª—è–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º, —Ç–æ –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π: ORDER_INTENT|<lang>.

–°–æ–æ–±—â–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –í–û–ü–†–û–°–û–ú –µ—Å–ª–∏:
1) –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "?" –∏–ª–∏ "ÿü", –ò–õ–ò
2) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞:
   RU: –∫–∞–∫, –∫–æ–≥–¥–∞, –≥–¥–µ, —á—Ç–æ, —Å–∫–æ–ª—å–∫–æ, –∑–∞—á–µ–º, –º–æ–∂–Ω–æ, –∫–∞–∫–æ–π, –∫–∞–∫–∏–µ, –∫—É–¥–∞, –æ—Ç–∫—É–¥–∞
   KG: –∫–∞–Ω—Ç–∏–ø, –∫–∞—á–∞–Ω, –∫–∞–π–¥–∞, —ç–º–Ω–µ, –∫–∞–Ω—á–∞, –±–æ–ª–æ–±—É

–ï–°–õ–ò –≠–¢–û –í–û–ü–†–û–°, —Ç–æ–≥–¥–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π:
- ORDER_STATUS: —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –≥–æ—Ç–æ–≤/–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç, –≥–¥–µ –º–æ–π –∑–∞–∫–∞–∑, —Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å
- ORDER_TRACKING: –∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑, –±—É–¥–µ—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
- PICKUP_ADDRESS: –∞–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –∞–¥—Ä–µ—Å–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤
- MENU_QUESTION: –≤–æ–ø—Ä–æ—Å—ã –æ –º–µ–Ω—é/—Å–æ—Å—Ç–∞–≤–∞—Ö/–Ω–∞–ª–∏—á–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- ORDER_FOR_ANOTHER: –º–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
- PAYMENT_METHOD: –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π/–æ–Ω–ª–∞–π–Ω/—Ç–µ—Ä–º–∏–Ω–∞–ª
- OTHER_INTENT: –≤—Å—ë –ø—Ä–æ—á–µ–µ –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞

–í–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É "<INTENT>|<lang>".`
        },
        { role: 'user', content: messageText || '' }
      ],
      maxTokens: 20,
      temperature: 0.0
    });

    const parts = (text || '').trim().split('|');
    if (parts.length >= 2) {
      const intent = parts[0].trim();
      const language = parts[1].trim();
      console.log('‚úÖ [AI] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ:', intent, '—è–∑—ã–∫:', language);
      return { intent, isOrderIntent: intent === 'ORDER_INTENT', language, originalText: messageText };
    }
    console.log('‚ö†Ô∏è [AI] Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑');
    return analyzeIntentFallback(messageText);
  } catch (error) {
    console.error('‚ùå [AI] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    return analyzeIntentFallback(messageText);
  }
}

// Fallback
function analyzeIntentFallback(messageText) {
  console.log('üîÑ [AI Fallback] –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞');
  const text = (messageText || '').toLowerCase();

  const kgWords = ['–±—É–π—Ä—É—Ç–º–∞', '–∑–∞–∫–∞–∑ –∫—ã–ª–≥—ã–º', '—Å–∞–ª–∞–º', '–∫–∞–Ω–¥–∞–π—Å—ã–∑', '–∫–∞—á–∞–Ω', '–∫–∞–Ω—á–∞'];
  const language = kgWords.some(w => text.includes(w)) ? 'kg' : 'ru';

  const statusKeywords = ['–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤', '–≥–æ—Ç–æ–≤ –ª–∏ –∑–∞–∫–∞–∑', '—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', '–≥–¥–µ –º–æ–π –∑–∞–∫–∞–∑', '—Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å', '–∑–∞–∫–∞–∑ –∫–∞—á–∞–Ω', '–±—É–π—Ä—É—Ç–º–∞ –¥–∞—è—Ä–±—ã'];
  if (statusKeywords.some(w => text.includes(w))) {
    console.log('üìä [AI Fallback] ORDER_STATUS');
    return { intent: 'ORDER_STATUS', isOrderIntent: false, language, originalText: messageText };
  }

  const trackingKeywords = ['–∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å', '–∫–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å', '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–∫–∞–Ω—Ç–∏–ø –∫”©–∑”©–º”©–ª–¥”©”©'];
  if (trackingKeywords.some(w => text.includes(w))) {
    console.log('üîç [AI Fallback] ORDER_TRACKING');
    return { intent: 'ORDER_TRACKING', isOrderIntent: false, language, originalText: messageText };
  }

  const addressKeywords = ['–∞–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞', '–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å', '–∞–¥—Ä–µ—Å–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤', '–∫—É–¥–∞ –ø—Ä–∏–µ—Ö–∞—Ç—å', '–∞–ª—ã–ø –∫–µ—Ç“Ø“Ø –¥–∞—Ä–µ–≥–∏'];
  if (addressKeywords.some(w => text.includes(w))) {
    console.log('üìç [AI Fallback] PICKUP_ADDRESS');
    return { intent: 'PICKUP_ADDRESS', isOrderIntent: false, language, originalText: messageText };
  }

  const menuKeywords = ['–µ—Å—Ç—å –ª–∏ —Å–µ—Ç—ã', '–µ—Å—Ç—å –ª–∏ –ø–∏—Ü—Ü–∞', '–µ—Å—Ç—å –ª–∏ –±—É—Ä–≥–µ—Ä—ã', '–∫–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏', '–ø–æ–ª–Ω–æ–µ –º–µ–Ω—é', '—Å–µ—Ç—Ç–µ—Ä –±–∞—Ä–±—ã', '–º–µ–Ω—é'];
  if (menuKeywords.some(w => text.includes(w))) {
    console.log('üçΩÔ∏è [AI Fallback] MENU_QUESTION');
    return { intent: 'MENU_QUESTION', isOrderIntent: false, language, originalText: messageText };
  }

  const anotherPersonKeywords = ['–∑–∞–∫–∞–∑ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ', '–Ω–µ –Ω–∞ —Å–µ–±—è', '–¥–ª—è –∫–æ–≥–æ-—Ç–æ', '–±–∞—à–∫–∞ –∞–¥–∞–º–≥–∞'];
  if (anotherPersonKeywords.some(w => text.includes(w))) {
    console.log('üë• [AI Fallback] ORDER_FOR_ANOTHER');
    return { intent: 'ORDER_FOR_ANOTHER', isOrderIntent: false, language, originalText: messageText };
  }

  const paymentKeywords = ['–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π', '–º–æ–∂–Ω–æ –ª–∏ –∫–∞—Ä—Ç–æ–π', '–ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∫–∞—Ä—Ç—ã', '–æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞', '–∫–∞—Ä—Ç–∞ –º–µ–Ω–µ–Ω', '—Ç”©–ª”©”©'];
  if (paymentKeywords.some(w => text.includes(w))) {
    console.log('üí≥ [AI Fallback] PAYMENT_METHOD');
    return { intent: 'PAYMENT_METHOD', isOrderIntent: false, language, originalText: messageText };
  }

  const orderKeywords = ['–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ö–æ—á—É', '–±—É–¥—É', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Ä–æ–ª–ª—ã', '—Å—É—à–∏', '–∫–∞—Ç–∞–ª–æ–≥', '–±—É–π—Ä—É—Ç–º–∞'];
  if (orderKeywords.some(w => text.includes(w))) {
    console.log('üõí [AI Fallback] ORDER_INTENT');
    return { intent: 'ORDER_INTENT', isOrderIntent: true, language, originalText: messageText };
  }

  console.log('‚ùì [AI Fallback] OTHER_INTENT');
  return { intent: 'OTHER_INTENT', isOrderIntent: false, language, originalText: messageText };
}

// ---------------------------- MongoDB Init ----------------------------

async function initMongoDB() {
  console.log('üîÑ [MongoDB] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
  try {
    const uri = MONGODB_URI;
    if (IS_VERCEL && (!uri || uri.startsWith('mongodb://localhost'))) {
      throw new Error('Set remote MONGODB_URI (Atlas) for Vercel');
    }
    
    console.log('üì° [MongoDB] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:', uri.substring(0, 20) + '...');
    const client = new MongoClient(uri);
    await client.connect();
    console.log('‚úÖ [MongoDB] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    
    db = client.db(DB_NAME);
    userStatesCollection = db.collection('user_states');
    userDataForOrderCollection = db.collection('user_orders');
    
    console.log('üìä [MongoDB] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    await userStatesCollection.createIndex({ phone: 1 });
    await userStatesCollection.createIndex({ updatedAt: 1 }, { expireAfterSeconds: 86400 });
    await userDataForOrderCollection.createIndex({ phone: 1 });
    await userDataForOrderCollection.createIndex({ updatedAt: 1 }, { expireAfterSeconds: 86400 });
    
    console.log('‚úÖ [MongoDB] –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    console.log('‚úÖ [MongoDB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå [MongoDB] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function ensureInitialized() {
  if (isInitialized) {
    return;
  }
  
  if (!initPromise) {
    console.log('üöÄ [Init] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
    initPromise = (async () => {
      try {
        await initMongoDB();
        await getAllProductsForSections();
        isInitialized = true;
        console.log('‚úÖ [Init] –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (error) {
        console.error('‚ùå [Init] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        initPromise = null;
        throw error;
      }
    })();
  }
  
  await initPromise;
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
app.use(async (req, res, next) => {
  try {
    await ensureInitialized();
    next();
  } catch (error) {
    console.error('‚ùå [Middleware] –°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', error.message);
    res.status(503).json({ 
      error: 'Service initializing', 
      message: 'Please retry in a few seconds' 
    });
  }
});

// ---------------------------- DB Helpers ----------------------------
async function getUserState(phone) {
  console.log('üìñ [DB] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è:', phone);
  const doc = await userStatesCollection.findOne({ phone });
  console.log('‚úÖ [DB] –°–æ—Å—Ç–æ—è–Ω–∏–µ:', doc?.state ? '–Ω–∞–π–¥–µ–Ω–æ' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  return doc?.state || null;
}

async function setUserState(phone, state) {
  console.log('üíæ [DB] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è:', phone);
  const now = new Date();
  await userStatesCollection.updateOne(
    { phone },
    { $set: { phone, state, updatedAt: now }, $setOnInsert: { createdAt: now } },
    { upsert: true }
  );
  console.log('‚úÖ [DB] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
}

async function deleteUserState(phone) {
  console.log('üóëÔ∏è [DB] –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è:', phone);
  await userStatesCollection.deleteOne({ phone });
  console.log('‚úÖ [DB] –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
}

async function getUserLan(phone) {
  console.log('üåê [DB] –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è:', phone);
  const doc = await userStatesCollection.findOne({ phone });
  const lan = doc?.lan || 'ru';
  console.log('‚úÖ [DB] –Ø–∑—ã–∫:', lan);
  return lan;
}

async function getUserOrders(phone) {
  console.log('üì¶ [DB] –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è:', phone);
  const doc = await userDataForOrderCollection.findOne({ phone });
  return doc?.state || null;
}

async function setUserOrder(phone, state) {
  console.log('üíæ [DB] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è:', phone);
  const now = new Date();
  await userDataForOrderCollection.updateOne(
    { phone },
    { $set: { phone, state, updatedAt: now }, $setOnInsert: { createdAt: now } },
    { upsert: true }
  );
  console.log('‚úÖ [DB] –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
}

async function deleteUserOrders(phone) {
  console.log('üóëÔ∏è [DB] –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è:', phone);
  await userDataForOrderCollection.deleteOne({ phone });
  console.log('‚úÖ [DB] –ó–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã');
}

async function getUserWaitingState(phone) {
  console.log('‚è≥ [DB] –ü–æ–ª—É—á–µ–Ω–∏–µ waiting state –¥–ª—è:', phone);
  const doc = await userStatesCollection.findOne({ phone });
  const state = doc?.waitingState || WAITING_STATES.NONE;
  console.log('‚úÖ [DB] Waiting state:', state);
  return state;
}

async function setUserWaitingState(phone, waitingState, lan) {
  console.log('üíæ [DB] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ waiting state:', waitingState, '–¥–ª—è:', phone);
  const now = new Date();
  const $set = { phone, waitingState, updatedAt: now };
  if (waitingState === WAITING_STATES.FLOW_RESPONSE && lan) $set.lan = lan;
  await userStatesCollection.updateOne(
    { phone },
    { $set, $setOnInsert: { createdAt: now } },
    { upsert: true }
  );
  console.log('‚úÖ [DB] Waiting state —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

async function clearUserWaitingState(phone) {
  console.log('üßπ [DB] –û—á–∏—Å—Ç–∫–∞ waiting state –¥–ª—è:', phone);
  await userStatesCollection.updateOne(
    { phone },
    { $unset: { waitingState: "" }, $set: { updatedAt: new Date() } }
  );
  console.log('‚úÖ [DB] Waiting state –æ—á–∏—â–µ–Ω');
}

// ---------- Resume checkpoint ----------
async function setResumeCheckpoint(phone, resume) {
  console.log('üìç [DB] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ checkpoint:', resume.kind, '–¥–ª—è:', phone);
  const now = new Date();
  await userStatesCollection.updateOne(
    { phone },
    { $set: { resume, updatedAt: now }, $setOnInsert: { createdAt: now } },
    { upsert: true }
  );
  console.log('‚úÖ [DB] Checkpoint —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
}

async function getResumeCheckpoint(phone) {
  console.log('üìñ [DB] –ü–æ–ª—É—á–µ–Ω–∏–µ checkpoint –¥–ª—è:', phone);
  const doc = await userStatesCollection.findOne({ phone });
  console.log('‚úÖ [DB] Checkpoint:', doc?.resume ? doc.resume.kind : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  return doc?.resume || null;
}

async function clearResumeCheckpoint(phone) {
  console.log('üßπ [DB] –û—á–∏—Å—Ç–∫–∞ checkpoint –¥–ª—è:', phone);
  await userStatesCollection.updateOne(
    { phone },
    { $unset: { resume: "" }, $set: { updatedAt: new Date() } }
  );
  console.log('‚úÖ [DB] Checkpoint –æ—á–∏—â–µ–Ω');
}

// ---------- Utils ----------
function normalizePhone(p) {
  return String(p || '').replace(/[^\d]/g, '');
}

// ---------------------------- Server start ----------------------------
(async () => {
  console.log('üöÄ [Startup] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
  console.log('üîß [Startup] –†–µ–∂–∏–º:', IS_VERCEL ? 'Vercel' : 'Local');
  console.log('üîß [Startup] PORT:', PORT);
  
  if (!IS_VERCEL) {
    try {
      await ensureInitialized();
      app.listen(PORT, () => {
        console.log('‚úÖ [Server] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:' + PORT);
        console.log('‚úÖ [Server] –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤');
      });
    } catch (error) {
      console.error('‚ùå [Startup] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    }
  } else {
    console.log('‚úÖ [Vercel] –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è Vercel');
  }
})();

module.exports = app;

// ---------------------------- Verify webhook ----------------------------
app.get("/webhook", (req, res) => {
  console.log('üì• [Webhook] GET –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  const mode = req.query["hub.mode"];
  const challenge = req.query["hub.challenge"];
  const tokenQ = req.query["hub.verify_token"];
  
  console.log('üîê [Webhook] Mode:', mode, 'Token match:', tokenQ === mytoken);
  
  if (mode && tokenQ) {
    if (mode === "subscribe" && tokenQ === mytoken) {
      console.log('‚úÖ [Webhook] –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      res.status(200).send(challenge);
    } else {
      console.log('‚ùå [Webhook] –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
      res.status(403).send("Forbidden");
    }
  }
});

// ---------------------------- Webhook main ----------------------------
app.post("/webhook", async (req, res) => {
  console.log('üì® [Webhook] POST –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  const body_param = req.body;

  if (body_param.object &&
      body_param.entry &&
      body_param.entry[0].changes &&
      body_param.entry[0].changes[0].value.messages &&
      body_param.entry[0].changes[0].value.messages[0]) {

    const phone_no_id = body_param.entry[0].changes[0].value.metadata.phone_number_id;
    const from = body_param.entry[0].changes[0].value.messages[0].from;
    const message = body_param.entry[0].changes[0].value.messages[0];
    
    console.log('üë§ [Webhook] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', from);
    console.log('üìù [Webhook] –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
    
    const currentWaitingState = await getUserWaitingState(from);
    console.log('‚è≥ [Webhook] –¢–µ–∫—É—â–∏–π waiting state:', currentWaitingState);

    try {
      // 1) –õ–æ–∫–∞—Ü–∏—è
      if (message.type === "location" && currentWaitingState === WAITING_STATES.LOCATION) {
        console.log('üìç [Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏');
        await handleLocationMessage(phone_no_id, from, message);
      }
      // 2) –û—Ç–≤–µ—Ç –æ—Ç Flow
      else if (message.type === "interactive" &&
               message.interactive?.type === "nfm_reply" &&
               currentWaitingState === WAITING_STATES.FLOW_RESPONSE) {
        console.log('üîÑ [Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ Flow –æ—Ç–≤–µ—Ç–∞');
        await handleFlowResponse(phone_no_id, from, message, body_param);
      }
      // 3) –ó–∞–∫–∞–∑ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
      else if (message.type === "order" &&
               currentWaitingState === WAITING_STATES.CATALOG_ORDER) {
        console.log('üõí [Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞');
        await handleCatalogOrderResponse(phone_no_id, from, message);
      }
      // 4) –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
      else if (message.type === "interactive" &&
               message.interactive?.type === "button_reply" &&
               currentWaitingState === WAITING_STATES.LANG) {
        console.log('üåê [Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞');
        await handleOrderConfirmationButton(phone_no_id, from, message);
      }
      // 5) –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å
      else if (message.type === "interactive" &&
               message.interactive?.type === "button_reply" &&
               currentWaitingState === WAITING_STATES.HELP_CONFIRM) {
        const id = message.interactive.button_reply.id;
        console.log('üîò [Handler] –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏:', id);
        if (id === 'continue_order') {
          console.log('‚ñ∂Ô∏è [Handler] –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
          await resumeFlow(phone_no_id, from);
        } else if (id === 'cancel_order') {
          console.log('‚ùå [Handler] –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞');
          const lan = await getUserLan(from);
          await deleteUserState(from);
          await clearResumeCheckpoint(from);
          await setUserWaitingState(from, WAITING_STATES.NONE);
          await sendMessage(phone_no_id, from, lan === 'kg' ? '‚úÖ –ë—É–π—Ä—É—Ç–º–∞“£—ã–∑ –∂–æ–∫–∫–æ —á—ã–≥–∞—Ä—ã–ª–¥—ã.' : '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.');
        }
      }
      // 6) –í–æ–ø—Ä–æ—Å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
      else if (message.type === "text" &&
              (currentWaitingState === WAITING_STATES.FLOW_RESPONSE || 
               currentWaitingState === WAITING_STATES.CATALOG_ORDER || 
               currentWaitingState === WAITING_STATES.LOCATION ||
               currentWaitingState === WAITING_STATES.HELP_CONFIRM)) {
        console.log('‚ùì [Handler] –í–æ–ø—Ä–æ—Å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è');
        await handleMidOrderHelp(phone_no_id, from, message, currentWaitingState, body_param);
      }
      // 7) –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      else if (message.type === "text" && currentWaitingState === WAITING_STATES.NONE) {
        console.log('üí¨ [Handler] –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        await handleIncomingMessage(phone_no_id, from, message);
      } else {
        console.log('‚ö†Ô∏è [Handler] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    } catch (e) {
      console.error("‚ùå [Webhook] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", e.message);
      console.error("‚ùå [Webhook] Stack:", e.stack);
    }

    return res.sendStatus(200);
  }

  console.log('‚ö†Ô∏è [Webhook] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞');
  res.sendStatus(404);
});

// ---------------------------- HELP: mid-order Q&A ----------------------------
async function handleMidOrderHelp(phone_no_id, from, message, currentWaitingState, body_param) {
  console.log('üÜò [Help] –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è');
  const text = message.text?.body || '';
  console.log('üí¨ [Help] –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:', text);
  
  const analysis = await analyzeCustomerIntent(text);
  console.log('üîç [Help] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:', analysis.intent);

  let heavyMedia = false;

  // –®–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  if (analysis.intent === 'ORDER_STATUS') {
    console.log('üìä [Help] –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ');
    await sendOrderStatusResponse(phone_no_id, from, analysis.language);
  } else if (analysis.intent === 'ORDER_TRACKING') {
    console.log('üîç [Help] –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏');
    await sendOrderTrackingResponse(phone_no_id, from, analysis.language);
  } else if (analysis.intent === 'PICKUP_ADDRESS') {
    console.log('üìç [Help] –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞');
    await sendPickupAddressResponse(phone_no_id, from, analysis.language);
  } else if (analysis.intent === 'MENU_QUESTION') {
    console.log('üçΩÔ∏è [Help] –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é');
    await sendMenuResponse(phone_no_id, from, analysis.language);
    heavyMedia = true;
  } else if (analysis.intent === 'ORDER_FOR_ANOTHER') {
    console.log('üë• [Help] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ');
    await sendOrderForAnotherResponse(phone_no_id, from, analysis.language);
  } else if (analysis.intent === 'PAYMENT_METHOD') {
    console.log('üí≥ [Help] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ');
    await sendPaymentMethodResponse(phone_no_id, from, analysis.language);
  } else if (analysis.intent === 'OTHER_INTENT') {
    console.log('üìû [Help] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
    await sendManagerContactMessage(phone_no_id, from, analysis.language);
  } else {
    console.log('‚ö†Ô∏è [Help] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç');
    const lan = await getUserLan(from);
    await sendMessage(phone_no_id, from, lan === 'kg'
      ? '–¢”©–º”©–Ω–∫“Ø –±–∞—Å–∫—ã—á—Ç–∞—Ä–¥—ã–Ω –±–∏—Ä–∏–Ω —Ç–∞–Ω–¥–∞“£—ã–∑.'
      : '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ.');
  }

  // –ß–µ–∫–ø–æ–∏–Ω—Ç
  const resume = await getResumeCheckpoint(from);
  if (!resume) {
    console.log('üìç [Help] –°–æ–∑–¥–∞–Ω–∏–µ checkpoint');
    if (currentWaitingState === WAITING_STATES.FLOW_RESPONSE) {
      await setResumeCheckpoint(from, { kind: 'flow' });
    } else if (currentWaitingState === WAITING_STATES.CATALOG_ORDER) {
      await setResumeCheckpoint(from, { kind: 'catalog' });
    }
  }

  await setUserWaitingState(from, WAITING_STATES.HELP_CONFIRM);

  if (heavyMedia) {
    console.log('‚è∏Ô∏è [Help] –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ (—Ç—è–∂–µ–ª–æ–µ –º–µ–¥–∏–∞)');
    await sleep(1500);
  }

  console.log('üîò [Help] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
  await sendHelpContinueButtons(phone_no_id, from);
}

async function sendHelpContinueButtons(phone_no_id, to) {
  console.log('üì§ [WA] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–º–æ—â–∏ –¥–ª—è:', to);
  const lan = await getUserLan(to);
  const buttonsMessage = {
    messaging_product: "whatsapp",
    to,
    type: "interactive",
    interactive: {
      type: "button",
      header: { type: "text", text: lan === 'kg' ? "–°—É—Ä–æ–æ“£—É–∑ –±–æ—é–Ω—á–∞ –∂–æ–æ–ø –±–µ—Ä–∏–ª–¥–∏" : "–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å" },
      body: { text: lan === 'kg' ? "–ë—É–π—Ä—É—Ç–º–∞–Ω—ã —É–ª–∞–Ω—Ç—É—É–Ω—É –∫–∞–∞–ª–∞–π—Å—ã–∑–±—ã?" : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞?" },
      footer: { text: "Yaposhkin Rolls" },
      action: {
        buttons: [
          { type: "reply", reply: { id: "continue_order", title: lan === 'kg' ? "–ë—É–π—Ä—É—Ç–º–∞–Ω—ã —É–ª–∞–Ω—Ç—É—É" : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑" } },
          { type: "reply", reply: { id: "cancel_order", title: lan === 'kg' ? "–ñ–æ–∫–∫–æ —á—ã–≥–∞—Ä—É—É" : "–û—Ç–º–µ–Ω–∏—Ç—å" } }
        ]
      }
    }
  };
  await sendWhatsAppMessage(phone_no_id, buttonsMessage);
  console.log('‚úÖ [WA] –ö–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
}

// –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ —á–µ–∫–ø–æ–∏–Ω—Ç—É
async function resumeFlow(phone_no_id, from) {
  console.log('‚ñ∂Ô∏è [Resume] –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è:', from);
  const lan = await getUserLan(from);
  const resume = await getResumeCheckpoint(from);

  if (!resume) {
    console.log('‚ö†Ô∏è [Resume] Checkpoint –Ω–µ –Ω–∞–π–¥–µ–Ω');
    await setUserWaitingState(from, WAITING_STATES.NONE);
    await sendMessage(phone_no_id, from, lan === 'kg'
      ? '–ö–µ—á–∏—Ä–µ—Å–∏–∑, —É–ª–∞–Ω—Ç—É—É—á—É –∫–∞–¥–∞–º —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫.'
      : '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—á–µ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å.');
    return;
  }

  console.log('üìç [Resume] –ù–∞–π–¥–µ–Ω checkpoint:', resume.kind);
  if (resume.kind === 'flow') {
    console.log('üîÑ [Resume] –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Flow');
    await checkCustomerAndSendFlow(phone_no_id, from, lan);
    await setUserWaitingState(from, WAITING_STATES.FLOW_RESPONSE, lan);
  } else if (resume.kind === 'catalog') {
    console.log('üõí [Resume] –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞');
    await sendMenuLink(phone_no_id, from);
    await setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER);
  } else {
    console.log('‚ö†Ô∏è [Resume] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø checkpoint');
    await setUserWaitingState(from, WAITING_STATES.NONE);
  }
}

// ---------------------------- WhatsApp helpers ----------------------------
async function sendWhatsAppMessage(phone_no_id, messageData) {
  console.log('üì§ [WA API] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
  try {
    const response = await axios({
      method: "POST",
      url: `https://graph.facebook.com/v23.0/${phone_no_id}/messages?access_token=${token}`,
      data: messageData,
      headers: { "Content-Type": "application/json" }
    });
    console.log('‚úÖ [WA API] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID:', response.data.messages?.[0]?.id);
    return response.data;
  } catch (error) {
    console.error('‚ùå [WA API] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.response?.data || error.message);
    throw error;
  }
}

async function sendMessage(phone_no_id, to, text) {
  console.log('üìù [WA] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞:', text.substring(0, 50) + '...');
  const data = { messaging_product: "whatsapp", to, text: { body: text || "–°–æ–æ–±—â–µ–Ω–∏–µ" } };
  return await sendWhatsAppMessage(phone_no_id, data);
}

// ---------------------------- Language choose ----------------------------
async function handleOrderConfirmationButton(phone_no_id, from, message) {
  console.log('üåê [Language] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞');
  try {
    const buttonId = message.interactive.button_reply.id;
    console.log('üåê [Language] –í—ã–±—Ä–∞–Ω —è–∑—ã–∫:', buttonId);
    await handleIncomingMessage(phone_no_id, from, message, buttonId);
  } catch (error) {
    console.error('‚ùå [Language] –û—à–∏–±–∫–∞:', error.message);
    await sendMessage(phone_no_id, from, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}

async function sendOrderConfirmationButtons(phone_no_id, to) {
  console.log('üì§ [WA] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞');
  const buttonsMessage = {
    messaging_product: "whatsapp",
    to,
    type: "interactive",
    interactive: {
      type: "button",
      header: { type: "text", text: "–ö–æ—à –∫–µ–ª–∏–Ω–∏–∑!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" },
      body: { text: "üìã –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞–Ω—ã–∑.\n\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è." },
      footer: { text: "Yaposhkin Rolls" },
      action: {
        buttons: [
          { type: "reply", reply: { id: "kg", title: "–ö—ã—Ä–≥—ã–∑ —Ç–∏–ª" } },
          { type: "reply", reply: { id: "ru", title: "–†—É—Å—Å–∫–∏–π" } }
        ]
      }
    }
  };
  await setUserWaitingState(to, WAITING_STATES.LANG);
  await sendWhatsAppMessage(phone_no_id, buttonsMessage);
  console.log('‚úÖ [WA] –ö–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
}

// ---------------------------- High-level flow entry ----------------------------
async function handleIncomingMessage(phone_no_id, from, message, buttonLang = null) {
  console.log('üì® [Message] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
  const messageText = message.text?.body || '';

  if (buttonLang) {
    console.log('üåê [Message] –Ø–∑—ã–∫ –∏–∑ –∫–Ω–æ–ø–∫–∏:', buttonLang);
    await checkCustomerAndSendFlow(phone_no_id, from, buttonLang);
    return;
  }

  try {
    const intent = await analyzeCustomerIntent(messageText);
    console.log('üéØ [Message] Intent:', intent.intent);
    
    switch (intent.intent) {
      case 'ORDER_INTENT':
        console.log('üõí [Message] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞');
        await sendOrderConfirmationButtons(phone_no_id, from);
        break;
      case 'ORDER_STATUS':
        console.log('üìä [Message] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
        await sendOrderStatusResponse(phone_no_id, from, intent.language);
        break;
      case 'ORDER_TRACKING':
        console.log('üîç [Message] –ó–∞–ø—Ä–æ—Å –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏');
        await sendOrderTrackingResponse(phone_no_id, from, intent.language);
        break;
      case 'PICKUP_ADDRESS':
        console.log('üìç [Message] –ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–æ–≤');
        await sendPickupAddressResponse(phone_no_id, from, intent.language);
        break;
      case 'MENU_QUESTION':
        console.log('üçΩÔ∏è [Message] –ó–∞–ø—Ä–æ—Å –º–µ–Ω—é');
        await sendMenuResponse(phone_no_id, from, intent.language);
        break;
      case 'ORDER_FOR_ANOTHER':
        console.log('üë• [Message] –í–æ–ø—Ä–æ—Å –æ –∑–∞–∫–∞–∑–µ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ');
        await sendOrderForAnotherResponse(phone_no_id, from, intent.language);
        break;
      case 'PAYMENT_METHOD':
        console.log('üí≥ [Message] –í–æ–ø—Ä–æ—Å –æ–± –æ–ø–ª–∞—Ç–µ');
        await sendPaymentMethodResponse(phone_no_id, from, intent.language);
        break;
      case 'OTHER_INTENT':
      default:
        console.log('üìû [Message] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É');
        await sendManagerContactMessage(phone_no_id, from, intent.language);
        break;
    }
  } catch (error) {
    console.error('‚ùå [Message] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error.message);
    await sendOrderConfirmationButtons(phone_no_id, from);
  }
}

// ---------------------------- Flow router ----------------------------
async function checkCustomerAndSendFlow(phone_no_id, from, lan) {
  console.log('üîÑ [Flow] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Flow');
  console.log('üë§ [Flow] –¢–µ–ª–µ—Ñ–æ–Ω:', from, '–Ø–∑—ã–∫:', lan);
  
  try {
    console.log('üì° [API] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤...');
    const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
    const restaurants = restaurantsResponse.data;
    console.log('‚úÖ [API] –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:', restaurants.length);
    
    const branches = restaurants.map(r => ({ id: r.external_id.toString(), title: `üè™ ${r.title}` }));

    console.log('üì° [API] –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞...');
    const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
    const customerData = customerResponse.data;
    console.log('‚úÖ [API] –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã');

    const hasAddresses = customerData.customer.addresses && customerData.customer.addresses.length > 0;
    const isNewCustomer = !hasAddresses || !customerData.customer.first_name || customerData.customer.first_name === '–ò–º—è';

    console.log('üë§ [Flow] –ö–ª–∏–µ–Ω—Ç:', isNewCustomer ? '–ù–û–í–´–ô' : '–°–£–©–ï–°–¢–í–£–Æ–©–ò–ô');
    console.log('üìç [Flow] –ê–¥—Ä–µ—Å–æ–≤:', customerData.customer.addresses?.length || 0);

    if (isNewCustomer) {
      console.log('üÜï [Flow] –û—Ç–ø—Ä–∞–≤–∫–∞ Flow –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
      if (lan === 'kg') await sendNewCustomerFlowKy(phone_no_id, from, branches);
      else await sendNewCustomerFlow(phone_no_id, from, branches);

      await setResumeCheckpoint(from, { kind: 'flow' });
    } else {
      console.log('üë§ [Flow] –û—Ç–ø—Ä–∞–≤–∫–∞ Flow –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
      if (lan === 'kg') await sendExistingCustomerFlowKy(phone_no_id, from, customerData.customer, branches);
      else await sendExistingCustomerFlow(phone_no_id, from, customerData.customer, branches);

      await setResumeCheckpoint(from, { kind: 'flow' });
    }

    await setUserWaitingState(from, WAITING_STATES.FLOW_RESPONSE, lan);
    console.log('‚úÖ [Flow] Flow –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå [Flow] –û—à–∏–±–∫–∞:', error.message);
    console.log('üîÑ [Flow] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Flow –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (fallback)');
    
    try {
      const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
      const restaurants = restaurantsResponse.data;
      const branches = restaurants.map(r => ({ id: r.external_id.toString(), title: `üè™ ${r.title}` }));
      await sendNewCustomerFlow(phone_no_id, from, branches);
      await setUserWaitingState(from, WAITING_STATES.FLOW_RESPONSE, lan);
      await setResumeCheckpoint(from, { kind: 'flow' });
      console.log('‚úÖ [Flow] Fallback Flow –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (fallbackError) {
      console.error('‚ùå [Flow] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback:', fallbackError.message);
      await sendMessage(phone_no_id, from, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
}

// ---------------------------- Flow messages ----------------------------
async function sendNewCustomerFlow(phone_no_id, from, branches) {
  console.log('üì§ [Flow] –û—Ç–ø—Ä–∞–≤–∫–∞ RU Flow –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
  const flowData = {
    messaging_product: "whatsapp",
    to: from,
    type: "interactive",
    interactive: {
      type: "flow",
      header: { type: "text", text: "üç£ Yaposhkin Rolls" },
      body: { text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" },
      footer: { text: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" },
      action: {
        name: "flow",
        parameters: {
          flow_message_version: "3",
          flow_token: `new_customer_${Date.now()}`,
          flow_id: NEW_CUSTOMER_FLOW_ID,
          flow_cta: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
          flow_action: "navigate",
          flow_action_payload: { screen: "WELCOME_NEW", data: { flow_type: "new_customer", branches } }
        }
      }
    }
  };
  await sendWhatsAppMessage(phone_no_id, flowData);
  console.log('‚úÖ [Flow] RU Flow –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
}

async function sendNewCustomerFlowKy(phone_no_id, from, branches) {
  console.log('üì§ [Flow] –û—Ç–ø—Ä–∞–≤–∫–∞ KG Flow –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
  const flowData = {
    messaging_product: "whatsapp",
    to: from,
    type: "interactive",
    interactive: {
      type: "flow",
      header: { type: "text", text: "üç£ Yaposhkin Rolls" },
      body: { text: "–ö–æ—à –∫–µ–ª–∏“£–∏–∑!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" },
      footer: { text: "–ö–∞—Ç—Ç–æ–æ —Ñ–æ—Ä–º–∞—Å—ã–Ω —Ç–æ–ª—Ç—É—Ä—É–Ω—É–∑" },
      action: {
        name: "flow",
        parameters: {
          flow_message_version: "3",
          flow_token: `new_customer_${Date.now()}`,
          flow_id: NEW_CUSTOMER_FLOW_ID_KY,
          flow_cta: "–ö–∞—Ç—Ç–æ–æ",
          flow_action: "navigate",
          flow_action_payload: { screen: "WELCOME_NEW", data: { flow_type: "new_customer", branches } }
        }
      }
    }
  };
  await sendWhatsAppMessage(phone_no_id, flowData);
  console.log('‚úÖ [Flow] KG Flow –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
}

async function sendExistingCustomerFlow(phone_no_id, from, customer, branches) {
  console.log('üì§ [Flow] –û—Ç–ø—Ä–∞–≤–∫–∞ RU Flow –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
  console.log('üë§ [Flow] –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:', customer.first_name);
  console.log('üìç [Flow] –ê–¥—Ä–µ—Å–æ–≤:', customer.addresses?.length || 0);
  
  const addresses = customer.addresses.map(a => ({ id: `address_${a.id}`, title: a.full_address }));
  addresses.push({ id: "new", title: "‚ûï –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å" });

  const flowData = {
    messaging_product: "whatsapp",
    to: from,
    type: "interactive",
    interactive: {
      type: "flow",
      header: { type: "text", text: "üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞" },
      body: { text: `–ü—Ä–∏–≤–µ—Ç, ${customer.first_name}!` },
      footer: { text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∞–¥—Ä–µ—Å" },
      action: {
        name: "flow",
        parameters: {
          flow_message_version: "3",
          flow_token: `existing_customer_${Date.now()}`,
          flow_id: ORDER_FLOW_ID,
          flow_cta: "–ó–∞–∫–∞–∑–∞—Ç—å",
          flow_action: "navigate",
          flow_action_payload: {
            screen: "ORDER_TYPE",
            data: { flow_type: "existing_customer", customer_name: customer.first_name, user_addresses: addresses, branches }
          }
        }
      }
    }
  };
  await sendWhatsAppMessage(phone_no_id, flowData);
  console.log('‚úÖ [Flow] RU Flow –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
}

async function sendExistingCustomerFlowKy(phone_no_id, from, customer, branches) {
  console.log('üì§ [Flow] –û—Ç–ø—Ä–∞–≤–∫–∞ KG Flow –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
  const addresses = customer.addresses.map(a => ({ id: `address_${a.id}`, title: a.full_address }));
  addresses.push({ id: "new", title: "‚ûï –ñ–∞–Ω—ã –¥–∞—Ä–µ–∫" });

  const flowData = {
    messaging_product: "whatsapp",
    to: from,
    type: "interactive",
    interactive: {
      type: "flow",
      header: { type: "text", text: "üõí –ë—É–π—Ä—É—Ç–º–∞ –±–µ—Ä—É—É" },
      body: { text: `–°–∞–ª–∞–º, ${customer.first_name}!` },
      footer: { text: "–§–æ—Ä–º–∞ —Ç–æ–ª—Ç—É—Ä—É–Ω—É–∑" },
      action: {
        name: "flow",
        parameters: {
          flow_message_version: "3",
          flow_token: `existing_customer_${Date.now()}`,
          flow_id: ORDER_FLOW_ID_KY,
          flow_cta: "–ë—É–π—Ä—É—Ç–º–∞ –±–µ—Ä—É—É",
          flow_action: "navigate",
          flow_action_payload: {
            screen: "ORDER_TYPE",
            data: { flow_type: "existing_customer", customer_name: customer.first_name, user_addresses: addresses, branches }
          }
        }
      }
    }
  };
  await sendWhatsAppMessage(phone_no_id, flowData);
  console.log('‚úÖ [Flow] KG Flow –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
}

// ---------------------------- Flow response handler ----------------------------
async function handleFlowResponse(phone_no_id, from, message, body_param) {
  console.log('üîÑ [Flow Response] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Flow');
  try {
    const flowResponse = JSON.parse(message.interactive.nfm_reply.response_json);
    console.log('üìã [Flow Response] –¢–∏–ø Flow:', flowResponse.flow_type);
    console.log('üìã [Flow Response] –î–∞–Ω–Ω—ã–µ:', JSON.stringify(flowResponse, null, 2));

    if (flowResponse.flow_type === 'new_customer') {
      console.log('üÜï [Flow Response] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
      await handleNewCustomerRegistration(phone_no_id, from, flowResponse);
    } else if (flowResponse.flow_type === 'existing_customer') {
      console.log('üë§ [Flow Response] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
      await handleExistingCustomerOrder(phone_no_id, from, flowResponse);
    } else {
      console.log('‚ö†Ô∏è [Flow Response] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø Flow');
      await sendMessage(phone_no_id, from, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ flow!");
    }
  } catch (error) {
    console.error('‚ùå [Flow Response] –û—à–∏–±–∫–∞:', error.message);
    await sendMessage(phone_no_id, from, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    await clearUserWaitingState(from);
  }
}

// ---------------------------- Registration / Orders from flow ----------------------------
async function handleNewCustomerRegistration(phone_no_id, from, data) {
  console.log('üÜï [Registration] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
  console.log('üìã [Registration] –ò–º—è:', data.customer_name);
  console.log('üìã [Registration] –¢–∏–ø –∑–∞–∫–∞–∑–∞:', data.order_type);
  
  try {
    if (data.order_type === 'delivery' && data.delivery_address) {
      console.log('üìç [Registration] –¢—Ä–µ–±—É–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏');
      const userState = {
        flow_type: 'new_customer',
        customer_name: data.customer_name,
        delivery_address: data.delivery_address,
        preparation_time: data.preparation_time,
        specific_time: data.specific_time,
        utensils_count: data.utensils_count === 'custom' ? data.custom_utensils_count : data.utensils_count,
        promo_code: data.promo_code,
        comment: data.comment,
        payment_method: data.payment_method
      };
      await setUserState(from, userState);
      await setUserWaitingState(from, WAITING_STATES.LOCATION);
      await sendLocationRequest(phone_no_id, from, data.customer_name);
      console.log('‚úÖ [Registration] –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } else {
      console.log('üè™ [Registration] –°–∞–º–æ–≤—ã–≤–æ–∑, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
      await registerCustomerWithoutLocation(phone_no_id, from, data);
    }
  } catch (error) {
    console.error('‚ùå [Registration] –û—à–∏–±–∫–∞:', error.message);
    await sendMessage(phone_no_id, from, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await clearUserWaitingState(from);
  }
}

async function registerCustomerWithoutLocation(phone_no_id, from, data) {
  console.log('üìù [Registration NoLoc] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
  try {
    const lan = await getUserLan(from);
    console.log('üì° [API] –ü–æ–ª—É—á–µ–Ω–∏–µ qr_token –∫–ª–∏–µ–Ω—Ç–∞...');
    const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
    const qr_token = customerResponse.data.qr_access_token;
    console.log('‚úÖ [API] qr_token –ø–æ–ª—É—á–µ–Ω');

    console.log('üì° [API] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞...');
    const updateData = { firstName: data.customer_name };
    await axios.post(`${TEMIR_API_BASE}/qr/update-customer/?qr_token=${qr_token}`, updateData);
    console.log('‚úÖ [API] –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

    let confirmText = `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${data.customer_name}! üéâ\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: üç£`;
    if (lan === 'kg') {
      confirmText = `–ö–∞—Ç—Ç–∞–ª–≥–∞–Ω—ã“£—ã–∑ “Ø—á“Ø–Ω —Ä–∞—Ö–º–∞—Ç, ${data.customer_name}! üéâ\n\n–°–∏–∑ –∞–ª—ã–ø –∫–µ—Ç“Ø“Ø–Ω“Ø —Ç–∞–Ω–¥–∞–¥—ã“£—ã–∑.\n\n–≠–º–∏ –±–∏–∑–¥–∏–Ω —Å–∞–π—Ç—Ç–∞–Ω —Ç–∞–º–∞–∫—Ç–∞—Ä–¥—ã —Ç–∞–Ω–¥–∞“£—ã–∑! üç£`;
    }
    await sendMessage(phone_no_id, from, confirmText);

    await sendMenuLink(phone_no_id, from);
    console.log('‚úÖ [Registration NoLoc] –ó–∞–≤–µ—Ä—à–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå [Registration NoLoc] –û—à–∏–±–∫–∞:', error.message);
    await sendMessage(phone_no_id, from, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    await clearUserWaitingState(from);
  }
}

async function handleExistingCustomerOrder(phone_no_id, from, data) {
  console.log('üë§ [Existing Order] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
  console.log('üìã [Existing Order] –¢–∏–ø –∑–∞–∫–∞–∑–∞:', data.order_type);
  console.log('üìã [Existing Order] –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏:', data.delivery_choice);
  
  try {
    const lan = await getUserLan(from);
    const userState = {
      flow_type: 'existing_customer',
      order_type: data.order_type,
      delivery_choice: data.delivery_choice,
      new_address: data.new_address,
      branch: data.branch,
      customer_name: data.customer_name,
      preparation_time: data.preparation_time,
      specific_time: data.specific_time,
      utensils_count: data.utensils_count === 'custom' ? data.custom_utensils_count : data.utensils_count,
      promo_code: data.promo_code,
      comment: data.comment,
      payment_method: data.payment_method
    };
    await setUserState(from, userState);

    if (data.order_type === 'delivery' && data.delivery_choice === 'new' && data.new_address) {
      console.log('üìç [Existing Order] –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è');
      const updatedUserState = {
        ...userState,
        delivery_address: data.new_address
      };
      await setUserState(from, updatedUserState);
      await setUserWaitingState(from, WAITING_STATES.LOCATION);
      await sendLocationRequest(phone_no_id, from, data.customer_name);
      console.log('‚úÖ [Existing Order] –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } else {
      console.log('‚úÖ [Existing Order] –ê–¥—Ä–µ—Å —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑');
      let confirmText;
      if (data.order_type === 'delivery') {
        const title = data.user_addresses.find(a => a.id === data.delivery_choice)?.title || '';
        confirmText = lan === 'kg'
          ? `‚úÖ –≠“£ —Å–æ–Ω—É–Ω! –ó–∞–∫–∞–∑ —Ç–∞–Ω–¥–∞–ª–≥–∞–Ω –¥–∞—Ä–µ–∫–∫–µ –∂–µ—Ç–∫–∏—Ä–∏–ª–µ—Ç.\n\n${title}\n\n–¢–∞–Ω–¥–æ–æ–Ω—É —Å–∞–π—Ç—Ç–∞–Ω –∂–∞—Å–∞“£—ã–∑:`
          : `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.\n\n${title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ:`;
      } else {
        const t = data.branches.find(b => b.id === data.branch)?.title || '';
        confirmText = lan === 'kg'
          ? `‚úÖ –ê–±–¥–∞–Ω –∂–∞–∫—à—ã! –°–∏–∑ –∞–ª—ã–ø –∫–µ—Ç“Ø“Ø–Ω“Ø —Ç–∞–Ω–¥–∞–¥—ã“£—ã–∑.\n\n${t}\n\n–¢–∞–Ω–¥–æ–æ–Ω—É —Å–∞–π—Ç—Ç–∞–Ω –∂–∞—Å–∞“£—ã–∑:`
          : `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.\n\n${t}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ:`;
      }
      await sendMessage(phone_no_id, from, confirmText);
      await sendMenuLink(phone_no_id, from);
      console.log('‚úÖ [Existing Order] –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    }
  } catch (error) {
    console.error('‚ùå [Existing Order] –û—à–∏–±–∫–∞:', error.message);
    await sendMessage(phone_no_id, from, '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    await clearUserWaitingState(from);
  }
}

// ---------------------------- Menu link sender ----------------------------
async function sendMenuLink(phone_no_id, to) {
  console.log('üîó [Menu Link] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω—é');
  const lan = await getUserLan(to);
  const locationId = await resolveLocationId(to);
  
  if (!MENU_URL) {
    console.log('‚ö†Ô∏è [Menu Link] MENU_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    await sendMessage(phone_no_id, to, lan === 'kg' ? '–ú–µ–Ω—é URL –æ—Ä–Ω–æ—Ç—É–ª–≥–∞–Ω —ç–º–µ—Å.' : 'URL –º–µ–Ω—é –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
    return;
  }
  
  const u = new URL(MENU_URL);
  u.searchParams.set('phone', to);
  if (locationId) {
    u.searchParams.set('locationId', locationId);
    console.log('üìç [Menu Link] LocationId –¥–æ–±–∞–≤–ª–µ–Ω:', locationId);
  }

  console.log('üîó [Menu Link] URL:', u.toString());

  const interactive = {
    messaging_product: "whatsapp",
    to,
    type: "interactive",
    interactive: {
      type: "cta_url",
      header: { type: "text", text: lan === 'kg' ? "–ê–±–¥–∞–Ω –∂–∞–∫—à—ã!" : "–û—Ç–ª–∏—á–Ω–æ!" },
      body: {
        text: lan === 'kg'
          ? "–¢”©–º”©–Ω–¥”©–≥“Ø –±–∞—Å–∫—ã—á—Ç—ã –±–∞—Å—ã–ø –º–µ–Ω—é–Ω—É –∫”©—Ä“Ø–ø –±—É–π—Ä—É—Ç–º–∞ –±–µ—Ä–∏“£–∏–∑."
          : "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑."
      },
      footer: { text: "Yaposhkin Rolls" },
      action: {
        name: "cta_url",
        parameters: {
          display_text: lan === 'kg' ? "–ú–µ–Ω—é–Ω—É –∞—á—É—É" : "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é",
          url: u.toString()
        }
      }
    }
  };

  await sendWhatsAppMessage(phone_no_id, interactive);
  await setResumeCheckpoint(to, { kind: 'catalog' });
  await setUserWaitingState(to, WAITING_STATES.CATALOG_ORDER);
  console.log('‚úÖ [Menu Link] –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
}

// ---------------------------- Location flow ----------------------------
async function sendLocationRequest(phone_no_id, from, customerName) {
  console.log('üìç [Location] –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
  const lan = await getUserLan(from);
  const text = lan === 'kg'
    ? `–†–∞—Ö–º–∞—Ç, ${customerName}! üìç\n\n–¢–∞–∫ –∂–µ—Ç–∫–∏—Ä“Ø“Ø “Ø—á“Ø–Ω –∂–∞–π–≥–∞—à–∫–∞–Ω –∂–µ—Ä–∏“£–∏–∑–¥–∏ –±”©–ª“Ø—à“Ø“£“Ø–∑.`
    : `–°–ø–∞—Å–∏–±–æ, ${customerName}! üìç\n\n–î–ª—è —Ç–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.`;
  await sendMessage(phone_no_id, from, text);
  console.log('‚úÖ [Location] –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
}

async function handleLocationMessage(phone_no_id, from, message) {
  console.log('üìç [Location] –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è');
  try {
    const { longitude, latitude } = message.location;
    console.log('üåç [Location] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', latitude, longitude);
    
    const userState = await getUserState(from);
    if (!userState) {
      console.log('‚ö†Ô∏è [Location] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.");
      await clearUserWaitingState(from);
      return;
    }

    await updateCustomerWithLocation(phone_no_id, from, userState, longitude, latitude);
  } catch (error) {
    console.error('‚ùå [Location] –û—à–∏–±–∫–∞:', error.message);
    await sendMessage(phone_no_id, from, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    await clearUserWaitingState(from);
  }
}

async function updateCustomerWithLocation(phone_no_id, from, userState, longitude, latitude) {
  console.log('üìç [Location Update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π');
  const lan = await getUserLan(from);
  
  try {
    console.log('üì° [API] –ü–æ–ª—É—á–µ–Ω–∏–µ qr_token...');
    const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
    const qr_token = customerResponse.data.qr_access_token;

    const updateData = {
      firstName: userState.customer_name,
      addresses: [{
        fullAddress: userState.delivery_address,
        office: "", floor: "", doorcode: "", entrance: "", comment: "",
        geocoding: {
          datasource: "yandex",
          longitude, latitude,
          country: "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", countrycode: "KG", city: "–ë–∏—à–∫–µ–∫",
          street: "", house: "", date: ""
        }
      }]
    };

    console.log('üì° [API] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–¥—Ä–µ—Å–æ–º...');
    console.log('üìç [Location Update] –ê–¥—Ä–µ—Å:', userState.delivery_address);
    await axios.post(`${TEMIR_API_BASE}/qr/update-customer/?qr_token=${qr_token}`, updateData);
    console.log('‚úÖ [API] –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');

    const updatedState = {
      ...userState,
      order_type: 'delivery',
      delivery_choice: 'new',
      location_processed: true,
      new_address: userState.delivery_address
    };
    await setUserState(from, updatedState);

    let confirmText = lan === 'kg'
      ? `–ö–∞—Ç—Ç–∞–ª–≥–∞–Ω—ã“£—ã–∑ “Ø—á“Ø–Ω —Ä–∞—Ö–º–∞—Ç, ${userState.customer_name}! üéâ\n\n–î–∞—Ä–µ–≥–∏“£–∏–∑ —Å–∞–∫—Ç–∞–ª–¥—ã: ${userState.delivery_address}\n\n–≠–º–∏ –∑–∞–∫–∞–∑ –±–µ—Ä—Å–µ“£–∏–∑ –±–æ–ª–æ—Ç. –ú–µ–Ω —Å–∏–∑–≥–µ –∞–∑—ã—Ä –º–µ–Ω—é–Ω—É–Ω —Å—Å—ã–ª–∫–∞—Å—ã–Ω –∂”©–Ω”©—Ç”©–º! üç£`
      : `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${userState.customer_name}! üéâ\n\n–í–∞—à –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${userState.delivery_address}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã. –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω—é! üç£`;
    
    if (userState.flow_type !== 'new_customer') {
      confirmText = lan === 'kg'
        ? `‚úÖ –ñ–∞“£—ã –¥–∞—Ä–µ–∫ –∫–æ—à—É–ª–¥—É!\n\nüìç ${userState.delivery_address}\n\n–≠–º–∏ —Å–∞–π—Ç—Ç–∞–Ω —Ç–∞–Ω–¥–∞“£—ã–∑:`
        : `‚úÖ –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüìç ${userState.delivery_address}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ:`;
    }

    await sendMessage(phone_no_id, from, confirmText);
    await sendMenuLink(phone_no_id, from);
    console.log('‚úÖ [Location Update] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå [Location Update] –û—à–∏–±–∫–∞:', error.message);
    await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    await deleteUserState(from);
    await clearUserWaitingState(from);
  }
}

// ---------------------------- Catalog / Order ----------------------------
let productsCache = null;
let productsCacheForSection = null;

async function getAllProducts() {
  if (productsCache) {
    console.log('üì¶ [Products] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    return productsCache;
  }
  
  console.log('üì° [API] –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
  const response = await axios.get(`${TEMIR_API_BASE}/qr/products`);
  const products = response.data;
  console.log('‚úÖ [API] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', products.length);
  
  const map = {};
  products.forEach(p => { 
    map[p.id] = { 
      id: p.id, 
      api_id: p.api_id, 
      title: p.title, 
      measure_unit: p.measure_unit_title || '—à—Ç' 
    }; 
  });
  productsCache = map;
  return map;
}

async function getAllProductsForSections() {
  if (productsCacheForSection) {
    console.log('üì¶ [Products Sections] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à');
    return productsCacheForSection;
  }
  
  console.log('üì° [API] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–µ–∫—Ü–∏–π...');
  const response = await axios.get(`${TEMIR_API_BASE}/qr/products`);
  const products = response.data;
  console.log('‚úÖ [API] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–µ–∫—Ü–∏–π:', products.length);
  
  const map = {};
  products.forEach(p => { 
    map[p.api_id] = { 
      id: p.id, 
      api_id: p.api_id, 
      title: p.title 
    }; 
  });
  productsCacheForSection = map;
  return map;
}

async function getProductInfo(productId) {
  console.log('üì¶ [Product] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ:', productId);
  const products = await getAllProducts();
  if (products[productId]) {
    console.log('‚úÖ [Product] –ù–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ:', products[productId].title);
    return products[productId];
  }
  
  console.log('üì° [API] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ API...');
  const response = await axios.get(`${TEMIR_API_BASE}/qr/products/${productId}`);
  const p = response.data;
  console.log('‚úÖ [API] –ü—Ä–æ–¥—É–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', p.title);
  return { 
    id: p.id, 
    api_id: p.api_id, 
    title: p.title, 
    measure_unit: p.measure_unit_title || '—à—Ç' 
  };
}

async function fetchAndConvertMenuData(from) {
  console.log('üìã [Menu Data] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é –¥–ª—è:', from);
  try {
    const locationId = await resolveLocationId(from);
    if (!locationId) {
      console.log('‚ö†Ô∏è [Menu Data] LocationId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return null;
    }

    console.log('üì° [API] –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è locationId:', locationId);
    const { data: apiData } = await axios.get(`${TEMIR_API_BASE}/qr/catalog?location_id=${locationId}`);
    const products = await getAllProductsForSections();

    const optimizedMenuGroups = apiData.map(group =>
      group.map(section => ({
        section_title: section.section_title,
        products: (section.products || [])
          .map(api_id => products[api_id]?.id)
          .filter(Boolean)
      }))
    );

    console.log('‚úÖ [Menu Data] –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω—ã');
    return optimizedMenuGroups;
  } catch (e) {
    console.error('‚ùå [Menu Data] –û—à–∏–±–∫–∞:', e.message);
    return null;
  }
}

async function resolveLocationId(from) {
  console.log('üìç [Location ID] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ locationId –¥–ª—è:', from);
  const userState = (await getUserState(from)) || {};
  let locationId = null;

  if (userState.order_type !== 'delivery') {
    console.log('üè™ [Location ID] –°–∞–º–æ–≤—ã–≤–æ–∑');
    if (userState.branch) {
      console.log('üè™ [Location ID] –§–∏–ª–∏–∞–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', userState.branch);
      const branchInfo = await getBranchInfo(String(userState.branch));
      if (branchInfo) {
        console.log('‚úÖ [Location ID] –§–∏–ª–∏–∞–ª –Ω–∞–π–¥–µ–Ω:', branchInfo.title);
        return parseInt(branchInfo.id);
      }
    }
    console.log('üì° [API] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞...');
    const restaurants = (await axios.get(`${TEMIR_API_BASE}/qr/restaurants`)).data || [];
    if (restaurants[0]) {
      console.log('‚úÖ [Location ID] –ü–µ—Ä–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', restaurants[0].title);
      return restaurants[0].external_id;
    }
    console.log('‚ö†Ô∏è [Location ID] –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1');
    return 1;
  }

  console.log('üöö [Location ID] –î–æ—Å—Ç–∞–≤–∫–∞');
  const { data: customerData } = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
  let address = null;

  if (userState.delivery_choice === 'new' || userState.location_processed) {
    const addresses = customerData.customer.addresses || [];
    address = addresses[addresses.length - 1] || null;
    console.log('üìç [Location ID] –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞');
  } else if (userState.delivery_choice?.startsWith('address_')) {
    const id = parseInt(userState.delivery_choice.replace('address_', ''));
    address = (customerData.customer.addresses || []).find(a => a.id == id) || null;
    console.log('üìç [Location ID] –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å ID:', id);
  }

  const geo = address?.geocoding_json || address?.geocoding || null;
  const lat = geo?.latitude, lon = geo?.longitude;
  
  if (!lat || !lon) {
    console.log('‚ö†Ô∏è [Location ID] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return null;
  }

  console.log('üåç [Location ID] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', lat, lon);
  console.log('üì° [API] –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ...');
  const delivery = (await axios.get(`${TEMIR_API_BASE}/qr/delivery/?lat=${lat}&lon=${lon}`)).data || [];
  if (delivery[0]?.restaurant_id) {
    locationId = delivery[0].restaurant_id;
    console.log('‚úÖ [Location ID] –†–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:', locationId);
  }

  return locationId || null;
}

// ---------------------------- Catalog order handler ----------------------------
async function handleCatalogOrderResponse(phone_no_id, from, message) {
  console.log('üõí [Catalog Order] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞');
  const lan = await getUserLan(from);
  
  try {
    const order = message.order;
    console.log('üì¶ [Catalog Order] –¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ:', order?.product_items?.length || 0);

    let orderSummary = lan === 'kg' ? "üõí –°–∏–∑–¥–∏–Ω –±—É–π—Ä—É—Ç–º–∞“£—ã–∑:\n\n" : "üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n";
    let totalAmount = 0;
    const orderItems = [];

    if (order?.product_items) {
      for (let i = 0; i < order.product_items.length; i++) {
        const item = order.product_items[i];
        const productInfo = await getProductInfo(item.product_retailer_id);
        const productName = productInfo.title || `–¢–æ–≤–∞—Ä ${item.product_retailer_id}`;
        const itemPrice = parseFloat(item.item_price) || 0;
        const itemTotal = itemPrice * item.quantity;

        console.log(`üì¶ [Catalog Order] ${i + 1}. ${productName} x${item.quantity} = ${itemTotal} KGS`);

        orderSummary += `${i + 1}. ${productName}\n`;
        orderSummary += lan === 'kg'
          ? `–î–∞–∞–Ω–∞—Å—ã: ${item.quantity} ${productInfo.measure_unit || '—à—Ç'}\n`
          : `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} ${productInfo.measure_unit || '—à—Ç'}\n`;
        orderSummary += lan === 'kg'
          ? `–ë–∞–∞—Å—ã: ${itemPrice} KGS x ${item.quantity} = ${itemTotal} KGS\n\n`
          : `–¶–µ–Ω–∞: ${itemPrice} KGS x ${item.quantity} = ${itemTotal} KGS\n\n`;

        totalAmount += itemTotal;
        orderItems.push({
          id: parseInt(productInfo.api_id),
          title: productName,
          quantity: item.quantity,
          priceWithDiscount: null,
          dealDiscountId: null,
          modifierGroups: []
        });
      }
    }

    orderSummary += lan === 'kg' 
      ? `üí∞ –ñ–∞–ª–ø—ã –Ω–∞—Ä–∫—ã: ${totalAmount} KGS\n\n` 
      : `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalAmount} KGS\n\n`;

    console.log('üí∞ [Catalog Order] –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:', totalAmount, 'KGS');

    let userState = await getUserState(from);
    await calculateDeliveryAndSubmitOrder(phone_no_id, from, orderItems, totalAmount, orderSummary, userState);
  } catch (error) {
    console.error('‚ùå [Catalog Order] –û—à–∏–±–∫–∞:', error.message);
    await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    await clearUserWaitingState(from);
  }
}

// utils
const sleep = (ms) => new Promise(res => setTimeout(res, ms));

async function getLocationWorkingHours(locationId) {
  console.log('üïê [Working Hours] –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–ª—è locationId:', locationId);
  try {
    const { data: restaurants } = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
    const r = restaurants.find(x => String(x.external_id) === String(locationId));
    if (!r) {
      console.log('‚ö†Ô∏è [Working Hours] –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }

    const t = r.working_hours_today || r.workingHoursToday || null;
    if (t) {
      const open = t.open || t.openTime || t.start || t.from;
      const close = t.close || t.closeTime || t.end || t.to;
      if (open && close) {
        console.log('‚úÖ [Working Hours] –ß–∞—Å—ã —Å–µ–≥–æ–¥–Ω—è:', `${open} - ${close}`);
        return `${open} - ${close}`;
      }
    }

    const daysEn = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];
    const todayKey = daysEn[new Date().getDay()];
    const wh = r.working_hours || r.workingHours || r.schedule || null;
    if (wh && wh[todayKey]) {
      const d = wh[todayKey];
      const open = d.open || d.openTime || d.start || d.from;
      const close = d.close || d.closeTime || d.end || d.to;
      if (open && close) {
        console.log('‚úÖ [Working Hours] –ß–∞—Å—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', `${open} - ${close}`);
        return `${open} - ${close}`;
      }
      if (typeof d === 'string') {
        console.log('‚úÖ [Working Hours] –ß–∞—Å—ã (—Å—Ç—Ä–æ–∫–∞):', d);
        return d;
      }
    }

    if (typeof r.working_hours === 'string') {
      console.log('‚úÖ [Working Hours] –ß–∞—Å—ã (—Å—Ç—Ä–æ–∫–∞):', r.working_hours);
      return r.working_hours;
    }
    if (typeof r.workingHours === 'string') {
      console.log('‚úÖ [Working Hours] –ß–∞—Å—ã (—Å—Ç—Ä–æ–∫–∞):', r.workingHours);
      return r.workingHours;
    }

    console.log('‚ö†Ô∏è [Working Hours] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–∞—Å—ã');
    return "11:00 - 23:45";
  } catch (error) {
    console.error('‚ùå [Working Hours] –û—à–∏–±–∫–∞:', error.message);
    return "11:00 - 23:45";
  }
}

// ---------------------------- Delivery calc + submit ----------------------------
async function calculateDeliveryAndSubmitOrder(phone_no_id, from, orderItems, totalAmount, orderSummary, paramUserState) {
  console.log('üí∞ [Delivery Calc] –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
  console.log('üì¶ [Delivery Calc] –¢–æ–≤–∞—Ä–æ–≤:', orderItems.length);
  console.log('üí∞ [Delivery Calc] –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:', totalAmount, 'KGS');
  
  const lan = await getUserLan(from);

  let deliveryCost = 0;
  let locationId = null;
  let locationTitle = "";
  let orderType = "pickup";
  let deliveryAddress = "";
  let utensils_count;

  try {
    let userState = paramUserState;
    if (!userState) {
      console.log('‚ö†Ô∏è [Delivery Calc] –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î');
      userState = await getUserState(from);
    }
    if (!userState) {
      console.log('‚ö†Ô∏è [Delivery Calc] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
      userState = { order_type: 'pickup', flow_type: 'fallback' };
    }

    console.log('üì° [API] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞...');
    const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
    const customerData = customerResponse.data;

    orderType = userState.order_type || "pickup";
    utensils_count = userState.utensils_count;
    console.log('üìã [Delivery Calc] –¢–∏–ø –∑–∞–∫–∞–∑–∞:', orderType);
    console.log('üç¥ [Delivery Calc] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤:', utensils_count);

    if (orderType === 'delivery') {
      console.log('üöö [Delivery Calc] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏');
      let address = null;
      let tempLat = null;
      let tempLon = null;

      if (userState.delivery_choice === 'new' || userState.location_processed) {
        const addresses = customerData.customer.addresses || [];
        address = addresses[addresses.length - 1];
        deliveryAddress = userState.new_address || userState.delivery_address || address?.full_address || "";
        console.log('üìç [Delivery Calc] –ù–æ–≤—ã–π/–ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥—Ä–µ—Å:', deliveryAddress);
        if (address?.geocoding_json) {
          tempLat = address.geocoding_json.latitude;
          tempLon = address.geocoding_json.longitude;
        }
      } else {
        const addressIndex = parseInt(userState.delivery_choice.replace('address_', ''));
        address = customerData.customer.addresses.find(item => item.id == addressIndex);
        deliveryAddress = address?.full_address || "";
        console.log('üìç [Delivery Calc] –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å ID:', addressIndex, '-', deliveryAddress);
        if (address?.geocoding_json) {
          tempLat = address.geocoding_json.latitude;
          tempLon = address.geocoding_json.longitude;
        }
      }

      if (!tempLat || !tempLon) {
        console.log('‚ùå [Delivery Calc] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        await sendMessage(phone_no_id, from, "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.");
        await deleteUserState(from);
        await clearUserWaitingState(from);
        return;
      }

      console.log('üåç [Delivery Calc] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', tempLat, tempLon);
      console.log('üì° [API] –ó–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏...');

      try {
        const deliveryResponse = await axios.get(`${TEMIR_API_BASE}/qr/delivery/?lat=${tempLat}&lon=${tempLon}`);
        if (deliveryResponse.data[0]) {
          deliveryCost = deliveryResponse.data[0].delivery_cost || 0;
          locationId = deliveryResponse.data[0].restaurant_id;
          locationTitle = deliveryResponse.data[0].title || "–†–µ—Å—Ç–æ—Ä–∞–Ω";
          console.log('‚úÖ [Delivery Calc] –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryCost, 'KGS');
          console.log('‚úÖ [Delivery Calc] –†–µ—Å—Ç–æ—Ä–∞–Ω:', locationTitle, '(ID:', locationId + ')');
        } else {
          console.log('‚ùå [Delivery Calc] –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
          await sendMessage(phone_no_id, from, "‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
          await deleteUserState(from);
          await clearUserWaitingState(from);
          return;
        }
      } catch (deliveryError) {
        console.error('‚ùå [Delivery Calc] –û—à–∏–±–∫–∞ API –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryError.message);
        await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏.");
        await deleteUserState(from);
        await clearUserWaitingState(from);
        return;
      }
    } else {
      console.log('üè™ [Delivery Calc] –°–∞–º–æ–≤—ã–≤–æ–∑');
      if (userState?.branch) {
        console.log('üè™ [Delivery Calc] –§–∏–ª–∏–∞–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', userState.branch);
        const branchInfo = await getBranchInfo(userState.branch);
        if (branchInfo) {
          locationId = parseInt(userState.branch);
          locationTitle = branchInfo.title;
          console.log('‚úÖ [Delivery Calc] –§–∏–ª–∏–∞–ª:', locationTitle);
        } else {
          console.log('‚ùå [Delivery Calc] –§–∏–ª–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          await sendMessage(phone_no_id, from, `‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É ${contact_branch['1']}.`);
          await deleteUserState(from);
          await clearUserWaitingState(from);
          return;
        }
      } else {
        console.log('üì° [API] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞...');
        const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = restaurantsResponse.data;
        if (restaurants.length > 0) {
          const selectedBranch = restaurants[0];
          locationId = selectedBranch.external_id;
          locationTitle = selectedBranch.title;
          console.log('‚úÖ [Delivery Calc] –ü–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª:', locationTitle);
        } else {
          console.log('‚ùå [Delivery Calc] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤');
          await sendMessage(phone_no_id, from, `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É ${contact_branch['1']}.`);
          await deleteUserState(from);
          await clearUserWaitingState(from);
          return;
        }
      }
    }

    if (!locationId) {
      console.log('‚ùå [Delivery Calc] LocationId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.");
      await deleteUserState(from);
      await clearUserWaitingState(from);
      return;
    }

    const finalAmount = totalAmount + deliveryCost;
    console.log('üí∞ [Delivery Calc] –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π:', finalAmount, 'KGS');
    
    let costMessage = orderSummary;

    if (orderType === "delivery") {
      costMessage += lan === 'kg' 
        ? `üöö –ñ–µ—Ç–∫–∏—Ä“Ø“Ø –±–∞–∞—Å—ã: ${deliveryCost} KGS\n` 
        : `üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryCost} KGS\n`;
      costMessage += lan === 'kg' 
        ? `üìç –ñ–µ—Ç–∫–∏—Ä“Ø“Ø –¥–∞—Ä–µ–≥–∏: ${deliveryAddress}\n\n` 
        : `üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryAddress}\n\n`;
    } else {
      costMessage += lan === 'kg' 
        ? `üè™ –ê–ª—ã–ø –∫–µ—Ç“Ø“Ø: 0 —Å–æ–º\n` 
        : `üè™ –°–∞–º–æ–≤—ã–≤–æ–∑: 0 KGS\n`;
      costMessage += `üìç –§–∏–ª–∏–∞–ª: ${locationTitle}\n\n`;
    }

    if (userState.payment_method === 'transfer') {
      costMessage += lan === 'kg' 
        ? `üí≥ –¢”©–ª”©”© —ã–∫–º–∞—Å—ã: –ö–æ—Ç–æ—Ä—É—É\n` 
        : `üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ü–µ—Ä–µ–≤–æ–¥\n`;
    } else {
      costMessage += lan === 'kg' 
        ? `üíµ –¢”©–ª”©”© —ã–∫–º–∞—Å—ã: –ñ–µ—Ç–∫–∏—Ä“Ø“Ø –±–æ—é–Ω—á–∞ –Ω–∞–∫—Ç–∞–ª–∞–π –∞–∫—á–∞\n\n` 
        : `üíµ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n`;
    }

    if (userState.preparation_time === 'specific' && userState.specific_time) {
      costMessage += lan === 'kg' 
        ? `‚è∞ –ë—ã—à—ã—Ä—É—É —É–±–∞–∫—Ç—ã—Å—ã: ${userState.specific_time}\n` 
        : `‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${userState.specific_time}\n`;
    } else {
      costMessage += lan === 'kg' 
        ? `‚è∞ –î–∞—è—Ä–¥–æ–æ —É–±–∞–∫—Ç—ã—Å—ã: –º“Ø–º–∫“Ø–Ω –±–æ–ª—É—à—É–Ω—á–∞ —Ç–µ–∑–∏—Ä—ç—ç–∫\n` 
        : `‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ\n`;
    }

    if (userState.promo_code) costMessage += `üé´ –ü—Ä–æ–º–æ–∫–æ–¥: ${userState.promo_code}\n`;
    if (userState.comment) costMessage += `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${userState.comment}\n`;

    costMessage += lan === 'kg' 
      ? `üí∞ –ñ–∞–ª–ø—ã –Ω–∞—Ä–∫—ã: ${finalAmount} —Å–æ–º\n\n` 
      : `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${finalAmount} KGS\n\n`;
    
    if (userState.payment_method === 'transfer') {
      costMessage += lan === 'kg' 
        ? `üí≥ –¢”©–ª”©”© —ã–∫–º–∞—Å—ã: –ö–æ—Ç–æ—Ä—É—É, QR –∫–æ–¥—É–Ω –∂”©–Ω”©—Ç“Ø“Ø...\n` 
        : `üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ü–µ—Ä–µ–≤–æ–¥, –æ—Ç–ø—Ä–∞–≤–∫–∞ QR –∫–æ–¥–∞...\n`;
    } else {
      costMessage += lan === 'kg' 
        ? `‚è≥ –ë—É–π—Ä—É—Ç–º–∞“£—ã–∑ –∏—à—Ç–µ—Ç–∏–ª“Ø“Ø–¥”©...` 
        : `‚è≥ –û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑...`;
    }

    console.log('üì§ [Delivery Calc] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞');
    await sendMessage(phone_no_id, from, costMessage);

    if (userState.payment_method === 'transfer') {
      console.log('üí≥ [Delivery Calc] –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
      const userOrders = { orderItems, customerData, locationId, locationTitle, orderType, finalAmount };
      await setUserOrder(from, userOrders);
      await sendPaymentQRCodeImproved(phone_no_id, from, finalAmount);
    }

    console.log('üìã [Delivery Calc] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ API...');
    await submitOrder(phone_no_id, from, orderItems, customerData, locationId, locationTitle, orderType, finalAmount, utensils_count);
  } catch (error) {
    console.error('‚ùå [Delivery Calc] –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('‚ùå [Delivery Calc] Stack:', error.stack);
    
    const desc = (error.response?.data?.error?.description || "").toLowerCase();
    const type = (error.response?.data?.error?.type || "").toLowerCase();
    const status = error.response?.status;

    const { code, minAmount } = classifyPreorderError(error);
    const t = (ru, kg) => (lan === 'ru') ? ru : kg;
    const itemsAmount = totalAmount || 0;

    console.log('üîç [Error] –¢–∏–ø –æ—à–∏–±–∫–∏:', code || 'UNKNOWN');
    console.log('üîç [Error] HTTP —Å—Ç–∞—Ç—É—Å:', status);

    if (code === ERR.MIN_AMOUNT) {
      console.log('‚ö†Ô∏è [Error] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞');
      const need = (minAmount && itemsAmount) ? Math.max(minAmount - itemsAmount, 0) : null;
      let msg = t('‚ùå –î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞.\n\n', '‚ùå –ñ–µ—Ç–∫–∏—Ä—É—É “Ø—á“Ø–Ω —Å—É–º–º–∞ –∂–µ—Ç–∏—à—Å–∏–∑.\n\n');
      if (minAmount) msg += t(`–ú–∏–Ω–∏–º—É–º –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${minAmount} KGS\n`, `–ñ–µ—Ç–∫–∏—Ä—É—É –º–∏–Ω–∏–º–∞–ª–¥—É—É: ${minAmount} KGS\n`);
      if (need) msg += t(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${need} KGS\n\n`, `–ñ–µ—Ç–ø–µ–π—Ç: ${need} KGS\n\n`);
      msg += t('–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∞–º–æ–≤—ã–≤–æ–∑.',
               '–î–∞–≥—ã —Ç–∞–º–∞–∫ –∫–æ—à—É“£—É–∑ –∂–µ ”©–∑“Ø –∞–ª—ã–ø –∫–µ—Ç“Ø“Ø–Ω“Ø —Ç–∞–Ω–¥–∞“£—ã–∑.');
      await sendMessage(phone_no_id, from, msg);
      await sendMenuLink(phone_no_id, from);
      await setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER);
      return;
    }

    if (desc.includes("location is closed") || type === "locationisclosedexception") {
      console.log('‚è∞ [Error] –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç');
      const hours = await getLocationWorkingHours(locationId);
      let msg;
      if (lan === "kg") {
        msg = `‚è∞ –¢–∏–ª–µ–∫–∫–µ –∫–∞—Ä—à—ã, –∞–∑—ã—Ä ${orderType === "delivery" ? "–∂–µ—Ç–∫–∏—Ä“Ø“Ø" : "”©–∑“Ø –∞–ª—ã–ø –∫–µ—Ç“Ø“Ø"} –º“Ø–º–∫“Ø–Ω —ç–º–µ—Å.\n` +
              `üè™ "${locationTitle}" —Ñ–∏–ª–∏–∞–ª—ã –∂–∞–±—ã–∫.\n` +
              (hours ? `üïê –ò—à —É–±–∞–∫—Ç—ã—Å—ã: ${hours}\n\n` : "\n") +
              `–ò—à —É–±–∞–∫—Ç—ã—Å—ã–Ω–¥–∞ –∑–∞–∫–∞–∑ –±–µ—Ä–µ –∞–ª–∞—Å—ã–∑.`;
      } else {
        msg = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å ${orderType === "delivery" ? "–¥–æ—Å—Ç–∞–≤–∫–∞" : "—Å–∞–º–æ–≤—ã–≤–æ–∑"} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n` +
              `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n` +
              (hours ? `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${hours}\n\n` : "\n") +
              `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.`;
      }
      await sendMessage(phone_no_id, from, msg);
      await deleteUserState(from);
      await clearUserWaitingState(from);
      return;
    }

    if (desc.includes("out of stock") || desc.includes("unavailable") || type === "soldoutproductexception") {
      console.log('üì¶ [Error] –¢–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      const ids = error.response?.data?.error?.productIds || [];
      const unavailable = ids
        .map(pid => orderItems.find(o => o.id === pid)?.title)
        .filter(Boolean)
        .join("\n");

      let msg;
      if (lan === "kg") {
        msg = `‚ùå –¢–∏–ª–µ–∫–∫–µ –∫–∞—Ä—à—ã, –∞–π—Ä—ã–º —Ç–æ–≤–∞—Ä–ª–∞—Ä –∞–∑—ã—Ä –∂–æ–∫.\n\n` +
              (unavailable ? `${unavailable}\n\n` : "") +
              `–°–∞–π—Ç—Ç–∞–≥—ã –º–µ–Ω—é–¥–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Ç–∞–Ω–¥–∞“£—ã–∑ –∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä–≥–µ –∫–∞–π—Ä—ã–ª—ã“£—ã–∑.`;
      } else {
        msg = `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n` +
              (unavailable ? `${unavailable}\n\n` : "") +
              `–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–∞ —Å–∞–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
      }
      await sendMessage(phone_no_id, from, msg);
      await setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER);
      await sendMenuLink(phone_no_id, from);
      return;
    }

    if (status === 400) {
      console.log('‚ùå [Error] HTTP 400 - –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      await sendMessage(
        phone_no_id,
        from,
        lan === "kg"
          ? "‚ùå –ó–∞–∫–∞–∑ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä—ã–Ω–¥–∞ –∫–∞—Ç–∞. –ö–∞–π—Ä–∞ –±–µ—Ä–∏–ø –∫”©—Ä“Ø“£“Ø–∑."
          : "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–Ω–æ–≤–æ."
      );
    } else if (status === 404) {
      console.log('‚ùå [Error] HTTP 404 - –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      await sendMessage(
        phone_no_id,
        from,
        lan === "kg"
          ? "‚ùå –¢–∞–Ω–¥–∞–ª–≥–∞–Ω —Ñ–∏–ª–∏–∞–ª –∂–µ—Ç–∫–∏–ª–∏–∫—Å–∏–∑. –ö–∏–π–∏–Ω—á–µ—Ä—ç—ç–∫ –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã“£—ã–∑."
          : "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    } else if (status === 500) {
      console.log('‚ùå [Error] HTTP 500 - –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞');
      await sendMessage(
        phone_no_id,
        from,
        lan === "kg"
          ? "‚ùå –°–µ—Ä–≤–µ—Ä–¥–µ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã–∫ –∫”©–π–≥”©–π–ª”©—Ä. –ë–∏—Ä –∞–∑–¥–∞–Ω –∫–∏–π–∏–Ω –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã“£—ã–∑."
          : "‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
      );
    } else {
      console.log('‚ùå [Error] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      const txt = error.response?.data?.error?.description || error.message || "Unknown error";
      await sendMessage(
        phone_no_id,
        from,
        lan === "kg"
          ? `‚ùå –ó–∞–∫–∞–∑ –±–µ—Ä“Ø“Ø–¥”© –∫–∞—Ç–∞: ${txt}`
          : `‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${txt}`
      );
    }
    await deleteUserState(from);
    await deleteUserOrders(from);
    await clearUserWaitingState(from);
  }
}

// –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ preorder (MIN_AMOUNT)
function classifyPreorderError(error) {
  const data = error?.response?.data || {};
  const e = data.error || {};
  const type = String(e.type || '').toUpperCase();
  const desc = String(e.description || data.message || '').toLowerCase();

  let code = null, minAmount = e.minOrderAmount || e.minOrderSum || null;

  if (type.includes('DELIVERYNOTAVAILABLEFORAMOUNTEXCEPTION') ||
      desc.includes('not available for amount')) {
    code = ERR.MIN_AMOUNT;
    console.log('‚ö†Ô∏è [Error Classification] MIN_AMOUNT –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
  }

  if (!minAmount) {
    const m = /(min(?:imum)?\s*(?:order)?\s*(?:sum|amount)\D+(\d+))/i.exec(e.description || '');
    if (m) {
      minAmount = Number(m[2]);
      console.log('‚ö†Ô∏è [Error Classification] minAmount –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è:', minAmount);
    }
  }

  return { code, minAmount, description: e.description || '' };
}

// ---------------------------- Payment QR ----------------------------
async function sendPaymentQRCodeImproved(phone_no_id, to, amount) {
  console.log('üí≥ [Payment] –û—Ç–ø—Ä–∞–≤–∫–∞ QR –∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã');
  console.log('üí∞ [Payment] –°—É–º–º–∞:', amount, 'KGS');
  
  const lan = await getUserLan(to);
  try {
    const qrImageUrl = "https://yaposhkinrolls.com/image-proxy-new/460x460,q85,spFLp372BcVbVX3LkpozjsUzn_ZkOP_vM1B6xzIL8Ey4/https://storage.yandexcloud.net/quickrestobase/ve738/offer/681b464f-8e8d-4b5e-b96a-c2628eaf7a52.png";
    const paymentPhone = "+996709063676";
    const paymentRecipient = "–≠–ú–ò–†–õ–ê–ù –≠.";

    const imageMessage = {
      messaging_product: "whatsapp",
      to,
      type: "image",
      image: {
        link: qrImageUrl,
        caption: lan === 'kg'
          ? `üí≥ –¢”©–ª”©”© “Ø—á“Ø–Ω QR –∫–æ–¥—É\n\nüí∞ –¢”©–ª”©”© —Ç—É—Ä–≥–∞–Ω —Å—É–º–º–∞: ${amount} KGS\nüì± ${paymentPhone}\nüë§ ${paymentRecipient}\n`
          : `üí≥ QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${amount} KGS\nüì± ${paymentPhone}\nüë§ ${paymentRecipient}\n`
      }
    };
    await sendWhatsAppMessage(phone_no_id, imageMessage);
    console.log('‚úÖ [Payment] QR –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå [Payment] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR:', error.message);
    console.log('üîÑ [Payment] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (fallback)');
    
    const paymentPhone = "+996709063676";
    const paymentRecipient = "–≠–ú–ò–†–õ–ê–ù –≠.";
    const fallbackMessage = lan === 'kg'
      ? `üí≥ –ö–æ—Ç–æ—Ä—É—É –∞—Ä–∫—ã–ª—É—É —Ç”©–ª”©”©:\n\nüì± ${paymentPhone}\nüë§ ${paymentRecipient}\n\nüí∞ –¢”©–ª”©–Ω”© —Ç—É—Ä–≥–∞–Ω —Å—É–º–º–∞: ${amount} KGS\n`
      : `üí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º:\n\nüì± ${paymentPhone}\nüë§ ${paymentRecipient}\n\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${amount} KGS\n`;
    await sendMessage(phone_no_id, to, fallbackMessage);
    console.log('‚úÖ [Payment] –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
  }
}

function computeOrderDueDateDeltaMinutes(state) {
  console.log('‚è∞ [Order Time] –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è');
  
  if (!state) {
    console.log('‚è∞ [Order Time] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, ASAP');
    return 0;
  }
  
  if (state.preparation_time === 'specific' && state.specific_time) {
    console.log('‚è∞ [Order Time] –£–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è:', state.specific_time);
    
    const [hh, mm] = String(state.specific_time).split(':').map(Number);
    
    if (!Number.isFinite(hh) || !Number.isFinite(mm)) {
      console.log('‚ö†Ô∏è [Order Time] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, ASAP');
      return 0;
    }

    // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ë–∏—à–∫–µ–∫–∞
    const nowUTC = new Date();
    const bishkekOffset = 6 * 60; // UTC+6 –≤ –º–∏–Ω—É—Ç–∞—Ö
    const nowBishkek = new Date(nowUTC.getTime() + bishkekOffset * 60000);
    
    const dueBishkek = new Date(nowBishkek);
    dueBishkek.setUTCHours(hh, mm, 0, 0);
    
    const currentHours = nowBishkek.getUTCHours();
    const currentMinutes = nowBishkek.getUTCMinutes();
    
    console.log('üïê [Order Time] –¢–ï–ö–£–©–ï–ï –≤—Ä–µ–º—è (UTC):', nowUTC.toISOString());
    console.log('üïê [Order Time] –¢–ï–ö–£–©–ï–ï –≤—Ä–µ–º—è (–ë–∏—à–∫–µ–∫):', 
                `${currentHours.toString().padStart(2, '0')}:${currentMinutes.toString().padStart(2, '0')}`);
    console.log('üïê [Order Time] –ñ–ï–õ–ê–ï–ú–û–ï –≤—Ä–µ–º—è:', `${hh.toString().padStart(2, '0')}:${mm.toString().padStart(2, '0')}`);
    
    let deltaMs = dueBishkek - nowBishkek;
    
    if (deltaMs < 0) {
      deltaMs += 24 * 60 * 60 * 1000;
      console.log('üìÖ [Order Time] –ó–∞–∫–∞–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å');
    }
    
    const minutes = Math.round(deltaMs / 60000);
    console.log('‚úÖ [Order Time] –†–∞–∑–Ω–∏—Ü–∞:', minutes, '–º–∏–Ω—É—Ç', 'temp:', minutes*60);
    
    return minutes*60;
  }
  
  console.log('‚è∞ [Order Time] ASAP');
  return 0;
}

// ---------------------------- Submit order ----------------------------
async function submitOrder(phone_no_id, from, orderItems, customerData, locationId, locationTitle, orderType, finalAmount, utensils_count) {
  console.log('üìã [Submit Order] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
  console.log('üìã [Submit Order] LocationId:', locationId, '-', locationTitle);
  console.log('üìã [Submit Order] –¢–∏–ø:', orderType);
  console.log('üí∞ [Submit Order] –°—É–º–º–∞:', finalAmount, 'KGS');
  
  const lan = await getUserLan(from);
  
  try {
    const state = await getUserState(from);

    const firstName =
      (customerData?.customer?.first_name && customerData.customer.first_name !== '–ò–º—è'
        ? customerData.customer.first_name
        : state?.customer_name) || '–ì–æ—Å—Ç—å';

    console.log('üë§ [Submit Order] –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:', firstName);

    const orderDueDateDelta = computeOrderDueDateDeltaMinutes(state);

    const commentParts = [];
    if (state?.comment) commentParts.push(state.comment);
    if (utensils_count && utensils_count !== '0') commentParts.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤: ${utensils_count}`);
    const comment = commentParts.join('\n') || '';
    
    if (comment) console.log('üìù [Submit Order] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', comment);

    const preorderData = {
      locationId: parseInt(locationId),
      locationTitle,
      type: orderType,
      customerContact: {
        firstName,
        comment,
        contactMethod: { type: "phoneNumber", value: from }
      },
      orderDueDateDelta,
      guests: [{ orderItems }],
      paymentSumWithDiscount: null
    };

    console.log('üì§ [Submit Order] –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:');
    console.log(JSON.stringify(preorderData, null, 2));

    console.log('üì° [API] –û—Ç–ø—Ä–∞–≤–∫–∞ preorder –∑–∞–ø—Ä–æ—Å–∞...');
    const preorderResponse = await axios.post(
      `${TEMIR_API_BASE}/qr/preorder/?qr_token=${customerData.qr_access_token}`, 
      preorderData
    );

    console.log('‚úÖ [API] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', preorderResponse.data?.status || 'unknown');

    if (preorderResponse.data?.error) {
      console.error('‚ùå [Submit Order] –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:', preorderResponse.data.error);
      throw { response: { status: 200, data: preorderResponse.data } };
    }

    console.log('üéâ [Submit Order] –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω');
    await sendOrderSuccessMessage(phone_no_id, from, preorderResponse.data, orderType, finalAmount, locationTitle, locationId);
  } catch (error) {
    console.error('‚ùå [Submit Order] –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:', error.message);
    
    const desc = (error.response?.data?.error?.description || "").toLowerCase();
    const type = (error.response?.data?.error?.type || "").toLowerCase();
    const status = error.response?.status;

    console.log('üîç [Submit Order Error] –û–ø–∏—Å–∞–Ω–∏–µ:', desc);
    console.log('üîç [Submit Order Error] –¢–∏–ø:', type);
    console.log('üîç [Submit Order Error] –°—Ç–∞—Ç—É—Å:', status);

    if (desc.includes("location is closed") || type === "locationisclosedexception") {
      console.log('‚è∞ [Submit Order Error] –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç');
      const hours = await getLocationWorkingHours(locationId);
      let msg;
      if (lan === "kg") {
        msg = `‚è∞ –¢–∏–ª–µ–∫–∫–µ –∫–∞—Ä—à—ã, –∞–∑—ã—Ä ${orderType === "delivery" ? "–∂–µ—Ç–∫–∏—Ä“Ø“Ø" : "”©–∑“Ø –∞–ª—ã–ø –∫–µ—Ç“Ø“Ø"} –º“Ø–º–∫“Ø–Ω —ç–º–µ—Å.\n` +
              `üè™ "${locationTitle}" —Ñ–∏–ª–∏–∞–ª—ã –∂–∞–±—ã–∫.\n` +
              (hours ? `üïê –ò—à —É–±–∞–∫—Ç—ã—Å—ã: ${hours}\n\n` : "\n") +
              `–ò—à —É–±–∞–∫—Ç—ã—Å—ã–Ω–¥–∞ –∑–∞–∫–∞–∑ –±–µ—Ä–µ –∞–ª–∞—Å—ã–∑.`;
      } else {
        msg = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å ${orderType === "delivery" ? "–¥–æ—Å—Ç–∞–≤–∫–∞" : "—Å–∞–º–æ–≤—ã–≤–æ–∑"} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n` +
              `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n` +
              (hours ? `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${hours}\n\n` : "\n") +
              `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.`;
      }
      await sendMessage(phone_no_id, from, msg);
      await deleteUserState(from);
      await clearUserWaitingState(from);
      return;
    }

    if (desc.includes("out of stock") || desc.includes("unavailable") || type === "soldoutproductexception") {
      console.log('üì¶ [Submit Order Error] –¢–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      const ids = error.response?.data?.error?.productIds || [];
      const unavailable = ids
        .map(pid => orderItems.find(o => o.id === pid)?.title)
        .filter(Boolean)
        .join("\n");

      let msg;
      if (lan === "kg") {
        msg = `‚ùå –¢–∏–ª–µ–∫–∫–µ –∫–∞—Ä—à—ã, –∞–π—Ä—ã–º —Ç–æ–≤–∞—Ä–ª–∞—Ä –∞–∑—ã—Ä –∂–æ–∫.\n\n` +
              (unavailable ? `${unavailable}\n\n` : "") +
              `–°–∞–π—Ç—Ç–∞–≥—ã –º–µ–Ω—é–¥–∞–Ω –±–∞—à–∫–∞ —Ç–∞–º–∞–∫—Ç–∞—Ä–¥—ã —Ç–∞–Ω–¥–∞“£—ã–∑ –∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä–≥–µ –∫–∞–π—Ä—ã–ª—ã“£—ã–∑.`;
      } else {
        msg = `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n` +
              (unavailable ? `${unavailable}\n\n` : "") +
              `–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–∞ —Å–∞–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
      }
      await sendMessage(phone_no_id, from, msg);
      await setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER);
      await sendMenuLink(phone_no_id, from);
      return;
    }

    if (status === 400) {
      console.log('‚ùå [Submit Order Error] HTTP 400');
      await sendMessage(
        phone_no_id,
        from,
        lan === "kg"
          ? "‚ùå –ó–∞–∫–∞–∑ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä—ã–Ω–¥–∞ –∫–∞—Ç–∞. –ö–∞–π—Ä–∞ –±–µ—Ä–∏–ø –∫”©—Ä“Ø“£“Ø–∑."
          : "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–Ω–æ–≤–æ."
      );
    } else if (status === 404) {
      console.log('‚ùå [Submit Order Error] HTTP 404');
      await sendMessage(
        phone_no_id,
        from,
        lan === "kg"
          ? "‚ùå –¢–∞–Ω–¥–∞–ª–≥–∞–Ω —Ñ–∏–ª–∏–∞–ª –∂–µ—Ç–∫–∏–ª–∏–∫—Å–∏–∑. –ö–∏–π–∏–Ω—á–µ—Ä—ç—ç–∫ –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã“£—ã–∑."
          : "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    } else if (status === 500) {
      console.log('‚ùå [Submit Order Error] HTTP 500');
      await sendMessage(
        phone_no_id,
        from,
        lan === "kg"
          ? "‚ùå –°–µ—Ä–≤–µ—Ä–¥–µ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã–∫ –∫”©–π–≥”©–π–ª”©—Ä. –ë–∏—Ä –∞–∑–¥–∞–Ω –∫–∏–π–∏–Ω –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã“£—ã–∑."
          : "‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
      );
    } else {
      console.log('‚ùå [Submit Order Error] –û–±—â–∞—è –æ—à–∏–±–∫–∞');
      const txt = error.response?.data?.error?.description || error.message || "Unknown error";
      await sendMessage(
        phone_no_id,
        from,
        lan === "kg"
          ? `‚ùå –ó–∞–∫–∞–∑ –±–µ—Ä“Ø“Ø–¥”© –∫–∞—Ç–∞: ${txt}`
          : `‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${txt}`
      );
    }

    await deleteUserState(from);
    await clearUserWaitingState(from);
  }
}

// ---------------------------- Branch info ----------------------------
async function getBranchInfo(branchId) {
  console.log('üè™ [Branch Info] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–µ:', branchId);
  try {
    const response = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
    const restaurants = response.data;
    const branch = restaurants.find(r => r.external_id.toString() === branchId);
    if (branch) {
      console.log('‚úÖ [Branch Info] –§–∏–ª–∏–∞–ª –Ω–∞–π–¥–µ–Ω:', branch.title);
      return {
        id: branch.external_id,
        title: branch.title,
        address: branch.address,
        phone: branch.contacts.find(c => c.type === 'PHONE')?.value,
        whatsapp: branch.contacts.find(c => c.type === 'WHATSAPP')?.value
      };
    }
    console.log('‚ö†Ô∏è [Branch Info] –§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  } catch (error) {
    console.error('‚ùå [Branch Info] –û—à–∏–±–∫–∞:', error.message);
    return null;
  }
}

// ---------------------------- Simple answers ----------------------------
async function sendOrderStatusResponse(phone_no_id, from, language) {
  console.log('üìä [Response] –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞');
  const m = language === 'kg'
    ? `üìã –ë—É–π—Ä—É—Ç–º–∞“£—ã–∑–¥—ã–Ω —Å—Ç–∞—Ç—É—Å—É –∂”©–Ω“Ø–Ω–¥”©:\n\n–°–∏–∑–¥–∏–Ω WhatsApp'–∫–∞ –±—É–π—Ä—É—Ç–º–∞“£—ã–∑–¥—ã–Ω —Å—Ç–∞—Ç—É—Å—É –∂”©–Ω“Ø–Ω–¥”© –±–∏–ª–¥–∏—Ä“Ø“Ø –∂”©–Ω”©—Ç“Ø–ª”©—Ç.`
    : `üìã –û —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞:\n\n–í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ WhatsApp –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞.`;
  await sendMessage(phone_no_id, from, m);
}

async function sendOrderTrackingResponse(phone_no_id, from, language) {
  console.log('üîç [Response] –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏');
  const m = language === 'kg'
    ? `üì± –ë—É–π—Ä—É—Ç–º–∞–Ω—ã –∫”©–∑”©–º”©–ª–¥”©”©:\n\n–°–∏–∑–¥–∏–Ω WhatsApp'–∫–∞ –±—É–π—Ä—É—Ç–º–∞“£—ã–∑–¥—ã–Ω —Å—Ç–∞—Ç—É—Å—É –∂”©–Ω“Ø–Ω–¥”© –±–∏–ª–¥–∏—Ä“Ø“Ø –∂”©–Ω”©—Ç“Ø–ª”©—Ç.`
    : `üì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n–í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ WhatsApp –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞.`;
  await sendMessage(phone_no_id, from, m);
}

async function sendPickupAddressResponse(phone_no_id, from, language) {
  console.log('üìç [Response] –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞');
  const m = language === 'kg'
    ? `üìç –ê–ª—ã–ø –∫–µ—Ç“Ø“Ø –¥–∞—Ä–µ–≥–∏:\n\nüè™ **Yaposhkin Rolls**\n–ò—Å—ã –ê—Ö—É–Ω–±–∞–µ–≤–∞ 125–≤\n–ë–∏—à–∫–µ–∫, –∫”©—á”©—Å“Ø –ò—Å—ã –ê—Ö—É–Ω–±–∞–µ–≤–∞, 125–ê\nüìû +996709063676\nüïê –ö“Ø–Ω —Å–∞–π—ã–Ω 11:00 - 23:45\n\nüè™ **Yaposhkin Rolls –ö–æ–∫ –∂–∞—Ä**\n–ë–∏—à–∫–µ–∫, –∫”©—á”©—Å“Ø –ß–∞—Ä, 83\nüìû +996705063676\nüïê –ö“Ø–Ω —Å–∞–π—ã–Ω 11:00 - 23:45`
    : `üìç –ê–¥—Ä–µ—Å–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:\n\nüè™ **Yaposhkin Rolls**\n–ò—Å—ã –ê—Ö—É–Ω–±–∞–µ–≤–∞ 125–≤\n–ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ò—Å—ã –ê—Ö—É–Ω–±–∞–µ–≤–∞, 125–ê\nüìû +996709063676\nüïê –ï–∂–µ–¥–Ω–µ–≤–Ω–æ 11:00 - 23:45\n\nüè™ **Yaposhkin Rolls –ö–æ–∫ –∂–∞—Ä**\n–ë–∏—à–∫–µ–∫, —É–ª–∏—Ü–∞ –ß–∞—Ä, 83\nüìû +996705063676\nüïê –ï–∂–µ–¥–Ω–µ–≤–Ω–æ 11:00 - 23:45`;
  await sendMessage(phone_no_id, from, m);
}

async function sendMenuResponse(phone_no_id, from, language) {
  console.log('üçΩÔ∏è [Response] –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é');
  try {
    let textMessage = language === 'kg' ? `üçΩÔ∏è –ë–∏–∑–¥–∏–Ω —Ç–æ–ª—É–∫ –º–µ–Ω—é:` : `üçΩÔ∏è –ù–∞—à–µ –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é:`;
    await sendMessage(phone_no_id, from, textMessage);

    const possiblePaths = [
      './assets/menu.pdf',
      '/var/task/assets/menu.pdf',
      path.join(__dirname, 'assets', 'menu.pdf'),
      path.join(process.cwd(), 'assets', 'menu.pdf')
    ];

    let menuPdfPath = null;
    for (const p of possiblePaths) {
      console.log('üìÅ [Menu PDF] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏:', p);
      if (fs.existsSync(p)) { 
        menuPdfPath = p; 
        console.log('‚úÖ [Menu PDF] –§–∞–π–ª –Ω–∞–π–¥–µ–Ω:', p);
        break; 
      }
    }
    
    if (!menuPdfPath) {
      console.log('‚ö†Ô∏è [Menu PDF] PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      throw new Error('PDF not found');
    }

    console.log('üì§ [Menu PDF] –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    await sendLocalPdfDocument(phone_no_id, from, menuPdfPath, {
      document: {
        filename: language === 'kg' ? "Yaposhkin_Rolls_Menu_KG.pdf" : "Yaposhkin_Rolls_Menu_RU.pdf",
        caption: language === 'kg' ? "üìã Yaposhkin Rolls –º–µ–Ω—é" : "üìã –ú–µ–Ω—é Yaposhkin Rolls"
      }
    });
    console.log('‚úÖ [Menu PDF] PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå [Menu PDF] –û—à–∏–±–∫–∞:', error.message);
    console.log('üîÑ [Menu PDF] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é (fallback)');
    
    const fallbackMessage = language === 'kg'
      ? `üçΩÔ∏è –ë–∏–∑–¥–∏–Ω –º–µ–Ω—é–¥–∞ –±–∞—Ä:\n\nüç£ –†–æ–ª–ª–¥–æ—Ä –∂–∞–Ω–∞ —Å—É—à–∏\nüç± –°–µ—Ç—Ç–µ—Ä\nü•ó –°–∞–ª–∞—Ç—Ç–∞—Ä\nüçú –´—Å—ã–∫ —Ç–∞–º–∞–∫—Ç–∞—Ä\nü•§ –°—É—É—Å—É–Ω–¥—É–∫—Ç–∞—Ä\n\n–¢–æ–ª—É–∫ –º–∞–∞–ª—ã–º–∞—Ç “Ø—á“Ø–Ω –º–µ–Ω–µ–¥–∂–µ—Ä:\nüìû +996709063676`
      : `üçΩÔ∏è –í –Ω–∞—à–µ–º –º–µ–Ω—é –µ—Å—Ç—å:\n\nüç£ –†–æ–ª–ª—ã –∏ —Å—É—à–∏\nüç± –°–µ—Ç—ã\nü•ó –°–∞–ª–∞—Ç—ã\nüçú –ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞\nü•§ –ù–∞–ø–∏—Ç–∫–∏\n\n–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\nüìû +996709063676`;
    await sendMessage(phone_no_id, from, fallbackMessage);
  }
}

async function sendLocalPdfDocument(phone_no_id, from, filePath, documentMessage) {
  console.log('üìÑ [PDF Upload] –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞ –≤ WhatsApp');
  try {
    const FormData = require('form-data');
    const formData = new FormData();
    const fileStream = fs.createReadStream(filePath);

    formData.append('file', fileStream, {
      filename: documentMessage.document.filename,
      contentType: 'application/pdf'
    });
    formData.append('type', 'application/pdf');
    formData.append('messaging_product', 'whatsapp');

    console.log('üì° [PDF Upload] –ó–∞–≥—Ä—É–∑–∫–∞ –≤ WhatsApp Media API...');
    const uploadResponse = await axios.post(
      `https://graph.facebook.com/v22.0/${phone_no_id}/media`,
      formData,
      { 
        headers: { 
          'Authorization': `Bearer ${token}`, 
          ...formData.getHeaders() 
        }, 
        maxContentLength: Infinity, 
        maxBodyLength: Infinity 
      }
    );

    const mediaId = uploadResponse.data.id;
    console.log('‚úÖ [PDF Upload] Media ID –ø–æ–ª—É—á–µ–Ω:', mediaId);

    const data = {
      messaging_product: "whatsapp",
      to: from,
      type: "document",
      document: { 
        id: mediaId, 
        filename: documentMessage.document.filename, 
        caption: documentMessage.document.caption 
      }
    };
    
    console.log('üì§ [PDF Upload] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...');
    await sendWhatsAppMessage(phone_no_id, data);
    console.log('‚úÖ [PDF Upload] –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå [PDF Upload] –û—à–∏–±–∫–∞:', error.message);
    console.log('üîÑ [PDF Upload] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω—é (fallback)');
    await sendMessage(phone_no_id, from, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é. –û—Ç–∫—Ä–æ–µ–º —Å–∞–π—Ç –º–µ–Ω—é:");
    await sendMenuLink(phone_no_id, from);
  }
}

async function sendOrderForAnotherResponse(phone_no_id, from, language) {
  console.log('üë• [Response] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ');
  const m = language === 'kg'
    ? `üë• –ë–∞—à–∫–∞ –∞–¥–∞–º–≥–∞ –±—É–π—Ä—É—Ç–º–∞ –±–µ—Ä“Ø“Ø:\n\n–°–∏–∑ –±–∞—à–∫–∞ –∞–¥–∞–º–≥–∞ –±—É–π—Ä—É—Ç–º–∞ –±–µ—Ä–µ –∞–ª–∞—Å—ã–∑, –∞–Ω—ã–Ω –∞—Ç—ã-–∂”©–Ω“Ø–Ω –∂–∞–Ω–∞ –Ω–æ–º–µ—Ä–∏–Ω –∫”©—Ä—Å”©—Ç“Ø–ø. –û—à–æ–Ω–¥–æ–π —ç–ª–µ, –∂–µ—Ç–∫–∏—Ä“Ø“Ø –¥–∞—Ä–µ–≥–∏–Ω –∂–∞–∑—É—É–Ω—É —É–Ω—É—Ç–ø–∞“£—ã–∑.`
    : `üë• –ó–∞–∫–∞–∑ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:\n\n–ú–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ, —É–∫–∞–∑–∞–≤ –µ–≥–æ –∏–º—è –∏ –Ω–æ–º–µ—Ä. –¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–ø–∏—Å–∞—Ç—å –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–µ—Å–ª–∏ –Ω–µ —Å–∞–º–æ–≤—ã–≤–æ–∑).`;
  await sendMessage(phone_no_id, from, m);
}

async function sendPaymentMethodResponse(phone_no_id, from, language) {
  console.log('üí≥ [Response] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ');
  const m = language === 'kg'
    ? `üí≥ –¢”©–ª”©”© –∂–æ–ª–¥–æ—Ä—É:\n\n–û–æ–±–∞, –∫–∞—Ä—Ç–∞ –º–µ–Ω–µ–Ω —Ç”©–ª”©—Å”© –±–æ–ª–æ—Ç.`
    : `üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n\n–î–∞, –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π.`;
  await sendMessage(phone_no_id, from, m);
}

async function sendManagerContactMessage(phone_no_id, from, language) {
  console.log('üìû [Response] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
  const m = language === 'kg'
    ? `–°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±—ã!\n\n–ë—É–ª —Å—É—Ä–æ–æ–ª–æ—Ä –±–æ—é–Ω—á–∞ –±–∏–∑–¥–∏–Ω –∫—ã–∑–º–∞—Ç–∫–µ—Ä –º–µ–Ω–µ–Ω –±–∞–π–ª–∞–Ω—ã—à—Å–∞“£—ã–∑ –±–æ–ª–æ—Ç:\nüì± +996709063676`
    : `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–ü–æ —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º:\nüì± +996709063676`;
  await sendMessage(phone_no_id, from, m);
}

// ---------------------------- Order success ----------------------------
async function sendOrderSuccessMessage(phone_no_id, from, preorderResponse, orderType, finalAmount, locationTitle, locationId) {
  console.log('üéâ [Order Success] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ');
  const lan = await getUserLan(from);
  
  try {
    let successMessage = '';
    if (preorderResponse.status === 'success') {
      console.log('‚úÖ [Order Success] –°—Ç–∞—Ç—É—Å: SUCCESS');
      successMessage = lan === 'kg'
        ? 'üéâ –ë—É–π—Ä—É—Ç–º–∞“£—ã–∑ –∫–∞–±—ã–ª –∞–ª—ã–Ω–¥—ã!\n\n'
        : 'üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n';

      if (orderType === 'pickup') {
        successMessage += lan === 'kg' ? `üè™ –ê–ª—É—É—á—É —Ñ–∏–ª–∏–∞–ª:\n` : `üè™ –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ —Ñ–∏–ª–∏–∞–ª–∞:\n`;
        successMessage += `üìç ${locationTitle}\n`;
      } else {
        successMessage += lan === 'kg' ? `üöó –î–∞—Ä–µ–≥–∏“£–∏–∑ –±–æ—é–Ω—á–∞ –∂–µ—Ç–∫–∏—Ä“Ø“Ø\n` : `üöó –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É\n`;
      }

      successMessage += lan === 'kg'
        ? `üí∞ –¢”©–ª”©”© —Ç—É—Ä–≥–∞–Ω —Å—É–º–º–∞: ${finalAmount} —Å–æ–º\n\n`
        : `üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${finalAmount} KGS\n\n`;

      successMessage += lan === 'kg'
        ? '‚è≥ –ë—É–π—Ä—É—Ç–º–∞“£—ã–∑ –¥–∞—è—Ä –±–æ–ª–≥–æ–Ω–¥–æ –±–∏–ª–¥–∏—Ä“Ø“Ø –∫–µ–ª–µ—Ç.\n\n'
        : '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞.\n\n';

      successMessage += lan === 'kg'
        ? `üìû –°—É—Ä–æ–æ–ª–æ—Ä—É“£—É–∑ –±–æ–ª—Å–æ: ${contact_branch[locationId]}.`
        : `üìû –í–æ–ø—Ä–æ—Å—ã: ${contact_branch[locationId]}.`;

      await setUserWaitingState(from, WAITING_STATES.ORDER_STATUS);
      console.log('‚úÖ [Order Success] Waiting state —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ORDER_STATUS');
    } else {
      console.log('‚ö†Ô∏è [Order Success] –°—Ç–∞—Ç—É—Å –ù–ï success');
      successMessage = lan === 'kg'
        ? '‚ùå –ë—É–π—Ä—É—Ç–º–∞ –±–µ—Ä“Ø“Ø–¥”© –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏.\n'
        : '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n';
      successMessage += lan === 'kg'
        ? `–ú–µ–Ω–µ–¥–∂–µ—Ä: ${contact_branch[locationId]}`
        : `–ú–µ–Ω–µ–¥–∂–µ—Ä: ${contact_branch[locationId]}`;
      await deleteUserState(from);
      await clearUserWaitingState(from);
    }
    
    await sendMessage(phone_no_id, from, successMessage);
    console.log('‚úÖ [Order Success] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå [Order Success] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    console.log('üßπ [Order Success] –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    await deleteUserState(from);
    await clearUserWaitingState(from);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const lan = await getUserLan(from);
    const errorMsg = lan === 'kg'
      ? '‚ùå –ë—É–π—Ä—É—Ç–º–∞ –∫–∞–±—ã–ª –∞–ª—ã–Ω–¥—ã, –±–∏—Ä–æ–∫ –±–∏–ª–¥–∏—Ä“Ø“Ø –∂”©–Ω”©—Ç“Ø“Ø–¥”© –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–∑ –º–µ–Ω–µ–Ω –±–∞–π–ª–∞–Ω—ã—à–∞—Ç.'
      : '‚ùå –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.';
    await sendMessage(phone_no_id, from, errorMsg);
  }
}

// ---------------------------- Body parsers ----------------------------
app.use(body_parser.json({ type: ['application/json', 'text/plain'] }));
app.use(body_parser.text({ type: 'text/plain' }));

// ---------------------------- Flow encryption endpoint ----------------------------
app.post("/flow", async (req, res) => {
  console.log('üîê [Flow Crypto] POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /flow');
  try {
    const { decryptedBody, aesKeyBuffer, initialVectorBuffer } = decryptRequest(req.body);
    console.log('‚úÖ [Flow Crypto] –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω');
    console.log('üìã [Flow Crypto] Action:', decryptedBody.action);
    
    const responseData = await processFlowData(decryptedBody);
    console.log('‚úÖ [Flow Crypto] –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
    
    const encryptedResponse = encryptResponse(responseData, aesKeyBuffer, initialVectorBuffer);
    console.log('‚úÖ [Flow Crypto] –û—Ç–≤–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω');
    
    res.setHeader('Content-Type', 'text/plain');
    return res.status(200).send(encryptedResponse);
  } catch (error) {
    console.error('‚ùå [Flow Crypto] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error.message);
    return res.status(421).json({ error: "Request processing failed" });
  }
});

const decryptRequest = (body) => {
  console.log('üîì [Decrypt] –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Flow');
  const { encrypted_aes_key, encrypted_flow_data, initial_vector } = body;
  const privatePem = getPrivateKey();
  if (!privatePem) {
    console.error('‚ùå [Decrypt] Private key –Ω–µ –Ω–∞–π–¥–µ–Ω');
    throw new Error("Private key not found");
  }

  const decryptedAesKey = crypto.privateDecrypt(
    {
      key: crypto.createPrivateKey(privatePem),
      padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
      oaepHash: "sha256",
    },
    Buffer.from(encrypted_aes_key, "base64")
  );

  const flowDataBuffer = Buffer.from(encrypted_flow_data, "base64");
  const initialVectorBuffer = Buffer.from(initial_vector, "base64");

  const TAG_LENGTH = 16;
  const encrypted_flow_data_body = flowDataBuffer.subarray(0, -TAG_LENGTH);
  const encrypted_flow_data_tag = flowDataBuffer.subarray(-TAG_LENGTH);

  const decipher = crypto.createDecipheriv("aes-128-gcm", decryptedAesKey, initialVectorBuffer);
  decipher.setAuthTag(encrypted_flow_data_tag);

  const decryptedJSONString = Buffer.concat([decipher.update(encrypted_flow_data_body), decipher.final()]).toString("utf-8");

  console.log('‚úÖ [Decrypt] –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã');
  return { decryptedBody: JSON.parse(decryptedJSONString), aesKeyBuffer: decryptedAesKey, initialVectorBuffer };
};

const encryptResponse = (response, aesKeyBuffer, initialVectorBuffer) => {
  console.log('üîê [Encrypt] –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Flow');
  const flipped_iv = [];
  for (const pair of initialVectorBuffer.entries()) flipped_iv.push(~pair[1]);
  const cipher = crypto.createCipheriv("aes-128-gcm", aesKeyBuffer, Buffer.from(flipped_iv));
  const encryptedData = Buffer.concat([cipher.update(JSON.stringify(response), "utf-8"), cipher.final(), cipher.getAuthTag()]);
  console.log('‚úÖ [Encrypt] –û—Ç–≤–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω');
  return encryptedData.toString("base64");
};

async function processFlowData(data) {
  console.log('‚öôÔ∏è [Flow Process] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Flow');
  try {
    const { action, flow_token, data: flowData, screen } = data;
    console.log('üìã [Flow Process] Action:', action);
    console.log('üìã [Flow Process] Screen:', screen);
    
    switch (action) {
      case "ping":
        console.log('üèì [Flow Process] PING');
        return { data: { status: "active" } };
      case "INIT":
        console.log('üöÄ [Flow Process] INIT');
        if (flow_token && flow_token.includes("new_customer")) {
          console.log('üÜï [Flow Process] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
          return { screen: "WELCOME_NEW", data: { flow_type: "new_customer", branches: flowData?.branches || [] } };
        } else if (flow_token && flow_token.includes("existing_customer")) {
          console.log('üë§ [Flow Process] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
          const customerName = flowData?.customer_name || "";
          const userAddresses = flowData?.user_addresses || [];
          const branches = flowData?.branches || [];
          return { screen: "ORDER_TYPE", data: { flow_type: "existing_customer", customer_name: customerName, user_addresses: userAddresses, branches } };
        }
        console.log('‚ö†Ô∏è [Flow Process] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        return { screen: "ORDER_TYPE", data: {} };
      case "data_exchange":
        console.log('üîÑ [Flow Process] DATA_EXCHANGE');
        return await handleDataExchange(screen, flowData, flow_token);
      default:
        console.log('‚ö†Ô∏è [Flow Process] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π action:', action);
        return { data: { status: "active" } };
    }
  } catch (error) {
    console.error('‚ùå [Flow Process] –û—à–∏–±–∫–∞:', error.message);
    return { data: { status: "active" } };
  }
}

async function handleDataExchange(screen, data, flow_token) {
  console.log('üîÑ [Data Exchange] –≠–∫—Ä–∞–Ω:', screen);
  try {
    switch (screen) {
      case "WELCOME_NEW":
        console.log('üÜï [Data Exchange] WELCOME_NEW -> ORDER_TYPE_NEW');
        return { screen: "ORDER_TYPE_NEW", data: { flow_type: "new_customer", customer_name: data.customer_name, branches: data.branches } };
      case "ORDER_TYPE_NEW":
        console.log('üìã [Data Exchange] ORDER_TYPE_NEW -> DELIVERY_OPTIONS_NEW');
        return { screen: "DELIVERY_OPTIONS_NEW", data: { flow_type: "new_customer", customer_name: data.customer_name, order_type: data.order_type, branches: data.branches } };
      case "DELIVERY_OPTIONS_NEW":
        console.log('‚úÖ [Data Exchange] DELIVERY_OPTIONS_NEW -> SUCCESS');
        return {
          screen: "SUCCESS",
          data: {
            extension_message_response: {
              params: {
                flow_token, flow_type: "new_customer",
                customer_name: data.customer_name, order_type: data.order_type, branch: data.branch, delivery_address: data.delivery_address
              }
            }
          }
        };
      case "ORDER_TYPE":
        console.log('üìã [Data Exchange] ORDER_TYPE -> DELIVERY_OPTIONS');
        return { screen: "DELIVERY_OPTIONS", data: { flow_type: "existing_customer", customer_name: data.customer_name, order_type: data.order_type, user_addresses: data.user_addresses, branches: data.branches } };
      case "DELIVERY_OPTIONS":
        console.log('‚úÖ [Data Exchange] DELIVERY_OPTIONS -> SUCCESS');
        return {
          screen: "SUCCESS",
          data: {
            extension_message_response: {
              params: {
                flow_token, flow_type: "existing_customer",
                customer_name: data.customer_name, order_type: data.order_type, delivery_choice: data.delivery_choice, new_address: data.new_address, branch: data.branch
              }
            }
          }
        };
      default:
        console.log('‚ö†Ô∏è [Data Exchange] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω:', screen);
        return { screen: "ORDER_TYPE", data: {} };
    }
  } catch (error) {
    console.error('‚ùå [Data Exchange] –û—à–∏–±–∫–∞:', error.message);
    return { screen, data: { error_message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." } };
  }
}

function getPrivateKey() {
  console.log('üîë [Private Key] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞');
  try {
    if (process.env.PRIVATE_KEY) {
      console.log('‚úÖ [Private Key] –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return process.env.PRIVATE_KEY.replace(/\\n/g, '\n');
    }
    if (fs.existsSync('./private_key.pem')) {
      console.log('‚úÖ [Private Key] –ò–∑ —Ñ–∞–π–ª–∞ ./private_key.pem');
      return fs.readFileSync('./private_key.pem', 'utf8');
    }
    console.log('‚ùå [Private Key] –ù–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  } catch (error) {
    console.error('‚ùå [Private Key] –û—à–∏–±–∫–∞:', error.message);
    return null;
  }
}

// ---------------------------- Order status notify API ----------------------------
app.post("/order-status", async (req, res) => {
  console.log('üìä [Order Status API] POST –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  try {
    if (typeof req.body === 'string') {
      console.log('üîÑ [Order Status API] –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ body');
      try { req.body = JSON.parse(req.body); } catch {}
    }

    const { phone, order_id, status, order_type, location_title, estimated_time, additional_info } = req.body;
    console.log('üìã [Order Status API] –¢–µ–ª–µ—Ñ–æ–Ω:', phone);
    console.log('üìã [Order Status API] Order ID:', order_id);
    console.log('üìã [Order Status API] –°—Ç–∞—Ç—É—Å:', status);
    
    if (!phone || !order_id || !status) {
      console.log('‚ùå [Order Status API] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
      return res.status(400).json({ success: false, error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, order_id, status" });
    }

    const phone_no_id = process.env.PHONE_NUMBER_ID;
    if (!phone_no_id) {
      console.log('‚ùå [Order Status API] PHONE_NUMBER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return res.status(500).json({ success: false, error: "PHONE_NUMBER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" });
    }

    const result = await sendOrderStatusNotification(
      phone_no_id, phone, order_id, status, order_type, location_title, estimated_time, additional_info
    );

    if (result.success) {
      console.log('‚úÖ [Order Status API] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      res.status(200).json({ success: true, message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", whatsapp_message_id: result.message_id });
    } else {
      console.log('‚ùå [Order Status API] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', result.error);
      res.status(500).json({ success: false, error: result.error });
    }
  } catch (error) {
    console.error('‚ùå [Order Status API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    res.status(500).json({ success: false, error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

async function sendOrderStatusNotification(phone_no_id, customerPhone, orderId, status, orderType = 'pickup', locationTitle = '', estimatedTime = '', additionalInfo = '') {
  console.log('üì® [Status Notification] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ');
  console.log('üìã [Status Notification] –ö–ª–∏–µ–Ω—Ç:', customerPhone);
  console.log('üìã [Status Notification] –°—Ç–∞—Ç—É—Å:', status);
  
  try {
    const message = await formatOrderStatusMessage(orderId, status, orderType, locationTitle, estimatedTime, additionalInfo, customerPhone.replace("+", ""));
    const response = await sendMessage(phone_no_id, customerPhone.replace("+", ""), message);
    console.log('‚úÖ [Status Notification] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    return { success: true, message_id: response.messages?.[0]?.id };
  } catch (error) {
    console.error('‚ùå [Status Notification] –û—à–∏–±–∫–∞:', error.message);
    return { success: false, error: error.message };
  }
}

async function formatOrderStatusMessage(orderId, status, orderType, locationTitle, estimatedTime, additionalInfo, from) {
  console.log('üìù [Format Status] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ');
  const lan = await getUserLan(from);
  const userState = await getUserState(from);
  const ordType = userState?.order_type;

  let m = '';

  switch (status) {
    case 'NEW':
      console.log('üìù [Format Status] NEW');
      m += lan === 'ru' ? 'üìù –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n'
                        : 'üìù –ë—É–π—Ä—É—Ç–º–∞ —Ç“Ø–∑“Ø–ª–¥“Ø. –´—Ä–∞—Å—Ç–æ–æ–Ω—É –∫“Ø—Ç“Ø–ø –∂–∞—Ç–∞—Ç.\n\n';
      break;
    case 'ACCEPTED':
      console.log('‚úÖ [Format Status] ACCEPTED');
      m += lan === 'ru' ? '‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.\n\n'
                        : '‚úÖ –ë—É–π—Ä—É—Ç–º–∞ –∏—à—Ç–µ—Ç“Ø“Ø–≥”© –∫–∞–±—ã–ª –∞–ª—ã–Ω–¥—ã.\n\n';
      break;
    case 'PRODUCTION':
      console.log('üë®‚Äçüç≥ [Format Status] PRODUCTION');
      m += lan === 'ru' ? 'üë®‚Äçüç≥ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è.\n\n'
                        : 'üë®‚Äçüç≥ –ë—É–π—Ä—É—Ç–º–∞ –¥–∞—è—Ä–¥–∞–ª—É—É–¥–∞.\n\n';
      break;
    case 'COMPLETED':
      console.log('üéâ [Format Status] COMPLETED');
      if (ordType === 'delivery') {
        m += lan === 'ru' ? 'üéâ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.\n\n'
                          : 'üéâ –ë—É–π—Ä—É—Ç–º–∞ –¥–∞—è—Ä. –ñ–µ—Ç–∫–∏—Ä“Ø“Ø –∫“Ø—Ç“Ø–ª“Ø“Ø–¥”©.\n\n';
      } else {
        m += lan === 'ru' ? 'üéâ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ.\n\n'
                          : 'üéâ –ë—É–π—Ä—É—Ç–º–∞ –∞–ª—ã–ø –∫–µ—Ç“Ø“Ø–≥”© –¥–∞—è—Ä.\n\n';
      }
      break;
    case 'OUT_FOR_DELIVERY':
      console.log('üöó [Format Status] OUT_FOR_DELIVERY');
      m += lan === 'ru' ? 'üöó –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏.\n\n'
                        : 'üöó –ö—É—Ä—å–µ—Ä –∂–æ–ª–¥–æ.\n\n';
      break;
    case 'DELIVERED':
    case 'DONE':
      console.log('‚úÖ [Format Status] DELIVERED/DONE');
      m += lan === 'ru' ? '‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ.\n'
                        : '‚úÖ –ë—É–π—Ä—É—Ç–º–∞ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∞—Ç–∫–∞—Ä—ã–ª–¥—ã. –†–∞—Ö–º–∞—Ç.\n';
      console.log('üßπ [Format Status] –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω)');
      await deleteUserState(from);
      await clearUserWaitingState(from);
      break;
    case 'CANCELLED':
      console.log('‚ùå [Format Status] CANCELLED');
      m += lan === 'ru' ? '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n'
                        : '‚ùå –ë—É–π—Ä—É—Ç–º–∞ –∂–æ–∫–∫–æ —á—ã–≥–∞—Ä—ã–ª–¥—ã.\n';
      console.log('üßπ [Format Status] –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω)');
      await deleteUserState(from);
      await clearUserWaitingState(from);
      break;
    case 'DELAYED':
      console.log('‚è∞ [Format Status] DELAYED');
      m += lan === 'ru' ? '‚è∞ –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞.\n'
                        : '‚è∞ –ö–∏—á–∏–Ω–µ –∫–µ—á–∏–≥“Ø“Ø.\n';
      if (estimatedTime) m += `üïê ${estimatedTime}\n`;
      if (additionalInfo) m += `üìù ${additionalInfo}\n`;
      break;
    default:
      console.log('‚ùì [Format Status] UNKNOWN:', status);
      m += lan === 'ru' ? `üìã –°—Ç–∞—Ç—É—Å: ${status}\n`
                        : `üìã –°—Ç–∞—Ç—É—Å: ${status}\n`;
  }
  return m;
}

// ---------------------------- POST endpoint from menu site ----------------------------
app.post("/menu-order", async (req, res) => {
  console.log('üõí [Menu Order] POST –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–∞–π—Ç–∞ –º–µ–Ω—é');
  try {
    if (typeof req.body === 'string') {
      console.log('üîÑ [Menu Order] –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ body');
      try { req.body = JSON.parse(req.body); } catch {}
    }
    
    const isArray = Array.isArray(req.body);
    const items = isArray ? req.body
                          : (Array.isArray(req.body?.items) ? req.body.items : null);

    const phoneRaw = isArray ? (req.query.phone || req.body?.phone)
                             : (req.body?.phone || req.query.phone);
    const phone = normalizePhone(phoneRaw);

    console.log('üìã [Menu Order] –¢–µ–ª–µ—Ñ–æ–Ω:', phone);
    console.log('üìã [Menu Order] –¢–æ–≤–∞—Ä–æ–≤:', items?.length || 0);

    if (!phone || !items) {
      console.log('‚ùå [Menu Order] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
      return res.status(400).json({ success: false, error: "Required: phone and items[]" });
    }

    const phone_no_id = process.env.PHONE_NUMBER_ID;
    if (!phone_no_id) {
      console.log('‚ùå [Menu Order] PHONE_NUMBER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return res.status(500).json({ success: false, error: "PHONE_NUMBER_ID not set" });
    }

    const currentWaitingState = await getUserWaitingState(phone);
    console.log('üîç [Menu Order] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', currentWaitingState);

    if (currentWaitingState !== WAITING_STATES.CATALOG_ORDER) {
      console.log('‚ö†Ô∏è [Menu Order] –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      const lan = await getUserLan(phone);
      const message = lan === 'kg' 
        ? '‚ö†Ô∏è –ë—É–π—Ä—É—Ç–º–∞ –±–µ—Ä“Ø“Ø –º“Ø–º–∫“Ø–Ω —ç–º–µ—Å. –°—É—Ä–∞–Ω—ã—á, –±–∞—à—Ç–∞–Ω –±–∞—à—Ç–∞“£—ã–∑.' 
        : '‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.';
      
      return res.status(403).json({ 
        success: false, 
        error: "Order not allowed in current state",
        message: message
      });
    }

    const lan = await getUserLan(phone);

    let orderSummary = lan === 'kg' ? "üõí –°–∏–∑–¥–∏–Ω –±—É–π—Ä—É—Ç–º–∞“£—ã–∑:\n\n" : "üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n";
    let totalAmount = 0;
    const orderItems = [];

    for (let i = 0; i < items.length; i++) {
      const it = items[i];
      const productInfo = await getProductInfo(it.product_retailer_id);
      const name = productInfo.title || `–¢–æ–≤–∞—Ä ${it.product_retailer_id}`;
      const price = Number(it.item_price) || 0;
      const qty = Number(it.quantity) || 0;
      const line = price * qty;

      console.log(`üì¶ [Menu Order] ${i + 1}. ${name} x${qty} = ${line} KGS`);

      orderSummary += `${i + 1}. ${name}\n`;
      orderSummary += lan === 'kg'
        ? `–î–∞–∞–Ω–∞—Å—ã: ${qty} ${productInfo.measure_unit || '—à—Ç'}\n–ë–∞–∞—Å—ã: ${price} KGS x ${qty} = ${line} KGS\n\n`
        : `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${qty} ${productInfo.measure_unit || '—à—Ç'}\n–¶–µ–Ω–∞: ${price} KGS x ${qty} = ${line} KGS\n\n`;

      totalAmount += line;
      orderItems.push({
        id: parseInt(productInfo.api_id),
        title: name,
        quantity: qty,
        priceWithDiscount: null,
        dealDiscountId: null,
        modifierGroups: []
      });
    }

    orderSummary += lan === 'kg'
      ? `üí∞ –ñ–∞–ª–ø—ã –Ω–∞—Ä–∫—ã: ${totalAmount} KGS\n\n`
      : `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalAmount} KGS\n\n`;

    console.log('üí∞ [Menu Order] –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:', totalAmount, 'KGS');

    const userState = await getUserState(phone);

    await calculateDeliveryAndSubmitOrder(
      phone_no_id, phone, orderItems, totalAmount, orderSummary, userState
    );

    console.log('‚úÖ [Menu Order] –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    return res.status(200).json({ success: true });
  } catch (e) {
    console.error("‚ùå [Menu Order] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", e.message);
    console.error("‚ùå [Menu Order] Stack:", e.stack);
    return res.status(500).json({ success: false, error: "Internal error" });
  }
});

// ---------------------------- Stats / Cleanup / Root ----------------------------
app.get("/stats", async (_req, res) => {
  console.log('üìä [Stats] GET –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  try {
    const totalUsers = await userStatesCollection.countDocuments();
    const waitingStates = await userStatesCollection.aggregate([{ $group: { _id: "$waitingState", count: { $sum: 1 } } }]).toArray();
    const agg = waitingStates.reduce((acc, i) => { acc[i._id || 'none'] = i.count; return acc; }, {});
    console.log('‚úÖ [Stats] –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', totalUsers);
    res.status(200).json({ success: true, timestamp: new Date().toISOString(), database: { connected: !!db, name: DB_NAME }, statistics: { totalUsers, waitingStates: agg } });
  } catch (error) {
    console.error('‚ùå [Stats] –û—à–∏–±–∫–∞:', error.message);
    res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" });
  }
});

app.delete("/cleanup", async (_req, res) => {
  console.log('üßπ [Cleanup] DELETE –∑–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏');
  try {
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const result = await userStatesCollection.deleteMany({ updatedAt: { $lt: oneDayAgo } });
    console.log('‚úÖ [Cleanup] –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', result.deletedCount);
    res.status(200).json({ success: true, message: `–£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π`, deletedCount: result.deletedCount });
  } catch (error) {
    console.error('‚ùå [Cleanup] –û—à–∏–±–∫–∞:', error.message);
    res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π" });
  }
});

app.get("/", (_req, res) => {
  console.log('üè† [Root] GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é');
  res.status(200).json({
    message: "WhatsApp Bot —Å MongoDB",
    status: "active",
    version: "2.3.0",
    database: { connected: !!db, name: DB_NAME },
    features: [
      "MongoDB —Å–æ—Å—Ç–æ—è–Ω–∏—è",
      "Flow –æ–±—Ä–∞–±–æ—Ç–∫–∞",
      "–°–∞–π—Ç –º–µ–Ω—é –≤–º–µ—Å—Ç–æ –∫–∞—Ç–∞–ª–æ–≥–∞ WhatsApp",
      "–û—Ç–∫—Ä—ã—Ç—ã–π POST /menu-order",
      "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö",
      "AI-–ø–æ–º–æ—â—å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
      "–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ (resume checkpoint)",
      "–ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
    ],
    endpoints: { 
      webhook: "/webhook", 
      flow: "/flow", 
      menuOrder: "/menu-order", 
      orderStatus: "/order-status", 
      stats: "/stats", 
      cleanup: "/cleanup" 
    }
  });
});

// ---------------------------- Process signals ----------------------------
process.on('SIGINT', async () => {
  console.log('‚ö†Ô∏è [Process] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT');
  if (db) {
    console.log('üîå [Process] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');
    await db.client.close();
    console.log('‚úÖ [Process] MongoDB –æ—Ç–∫–ª—é—á–µ–Ω');
  }
  console.log('üëã [Process] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
  process.exit(0);
});

process.on('unhandledRejection', (reason) => { 
  console.error('‚ùå‚ùå‚ùå [Process] UNHANDLED REJECTION ‚ùå‚ùå‚ùå');
  console.error('–ü—Ä–∏—á–∏–Ω–∞:', reason); 
  if (reason?.stack) console.error('Stack:', reason.stack);
});

process.on('uncaughtException', (error) => { 
  console.error('‚ùå‚ùå‚ùå [Process] UNCAUGHT EXCEPTION ‚ùå‚ùå‚ùå');
  console.error('–û—à–∏–±–∫–∞:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1); 
});