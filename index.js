const express = require("express");
const body_parser = require("body-parser");
const axios = require("axios");
require('dotenv').config();

const app = express().use(body_parser.json());

const token = process.env.TOKEN;
const mytoken = process.env.MYTOKEN;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TEMIR_API_BASE = 'https://ya.temir.me';

// Flow IDs
const NEW_CUSTOMER_FLOW_ID = '4265839023734503'; // newCustomer
const ORDER_FLOW_ID = '708820881926236'; // order

app.listen(process.env.PORT, () => {
    console.log("webhook is listening");
});

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook
app.get("/webhook", (req, res) => {
    let mode = req.query["hub.mode"];
    let challenge = req.query["hub.challenge"];
    let token = req.query["hub.verify_token"];

    if (mode && token) {
        if (mode === "subscribe" && token === mytoken) {
            res.status(200).send(challenge);
        } else {
            res.status(403).send("Forbidden");
        }
    }
});

app.post("/webhook", async (req, res) => {
    let body_param = req.body;

    console.log("=== –ü–û–õ–£–ß–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===");
    console.log(JSON.stringify(body_param, null, 2));

    if (body_param.object) {
        console.log("inside body param");
        if (body_param.entry && 
            body_param.entry[0].changes && 
            body_param.entry[0].changes[0].value.messages && 
            body_param.entry[0].changes[0].value.messages[0]) {
            
            let phone_no_id = body_param.entry[0].changes[0].value.metadata.phone_number_id;
            let from = body_param.entry[0].changes[0].value.messages[0].from;
            let message = body_param.entry[0].changes[0].value.messages[0];

            console.log("phone number " + phone_no_id);
            console.log("from " + from);
            console.log("message type:", message.type);
            console.log("message:", JSON.stringify(message, null, 2));

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                if (message.type === "interactive") {
                    console.log("Interactive message type:", message.interactive.type);
                    
                    if (message.interactive.type === "nfm_reply") {
                        // –û—Ç–≤–µ—Ç –æ—Ç Flow
                        console.log("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Flow");
                        await handleFlowResponse(phone_no_id, from, message, body_param);
                    } else if (message.interactive.type === "product_list_reply") {
                        // –û—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ order flow
                        console.log("üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (product_list)");
                        await handleCatalogResponse(phone_no_id, from, message);
                    } else if (message.interactive.type === "button_reply") {
                        // –û—Ç–≤–µ—Ç –æ—Ç –∫–Ω–æ–ø–∫–∏
                        console.log("üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–Ω–æ–ø–∫–∏");
                        await handleButtonResponse(phone_no_id, from, message);
                    } else {
                        console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø interactive —Å–æ–æ–±—â–µ–Ω–∏—è:", message.interactive.type);
                        await handleIncomingMessage(phone_no_id, from, message);
                    }
                } else if (message.type === "order") {
                    // –û—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ order
                    console.log("üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (order)");
                    await handleCatalogOrderResponse(phone_no_id, from, message);
                } else {
                    // –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
                    console.log("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
                    await handleIncomingMessage(phone_no_id, from, message);
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
            }

            res.sendStatus(200);
        } else {
            res.sendStatus(404);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
async function handleIncomingMessage(phone_no_id, from, message) {
    console.log("=== –ü–†–û–í–ï–†–ö–ê –ö–õ–ò–ï–ù–¢–ê ===");
    
    const messageText = message.text?.body?.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}: ${messageText || '–Ω–µ —Ç–µ–∫—Å—Ç'}`);
    
    await checkCustomerAndSendFlow(phone_no_id, from);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ Flow
async function checkCustomerAndSendFlow(phone_no_id, from) {
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${from}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ Temir
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const customerData = customerResponse.data;
        
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:', customerData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å–∞ —É –∫–ª–∏–µ–Ω—Ç–∞
        const hasAddresses = customerData.customer.addresses && customerData.customer.addresses.length > 0;
        const isNewCustomer = !hasAddresses || 
                             !customerData.customer.first_name || 
                             customerData.customer.first_name === '–ò–º—è';

        if (isNewCustomer) {
            console.log('üÜï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow');
            await sendNewCustomerFlow(phone_no_id, from);
        } else {
            console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–∞—Ç–∞–ª–æ–≥');
            await sendExistingCustomerGreeting(phone_no_id, from, customerData.customer);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API - —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
        console.log('üÜï –û—à–∏–±–∫–∞ API - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow');
        await sendNewCustomerFlow(phone_no_id, from);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Flow –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
async function sendNewCustomerFlow(phone_no_id, from) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê FLOW –î–õ–Ø –ù–û–í–´–• –ö–õ–ò–ï–ù–¢–û–í ===");
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üç£ Yaposhkin Rolls"
            },
            body: {
                text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
            },
            footer: {
                text: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `new_customer_${Date.now()}`,
                    flow_id: NEW_CUSTOMER_FLOW_ID,
                    flow_cta: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                    flow_action: "navigate"
                }
            }
        }
    };

    await sendWhatsAppMessage(phone_no_id, flowData);
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
async function sendExistingCustomerGreeting(phone_no_id, from, customer) {
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    const greetingText = `–ü—Ä–∏–≤–µ—Ç, ${customer.first_name}! üëã\n\n–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ Yaposhkin Rolls! üç£\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
    await sendMessage(phone_no_id, from, greetingText);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    setTimeout(async () => {
        await sendCatalog(phone_no_id, from);
    }, 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ order
async function handleCatalogOrderResponse(phone_no_id, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ê–¢–ê–õ–û–ì–ê (ORDER FORMAT) ===");
        console.log("Order message:", JSON.stringify(message, null, 2));
        
        const order = message.order;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        let orderSummary = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n";
        let totalAmount = 0;
        
        if (order && order.product_items) {
            console.log("=== –î–ï–¢–ê–õ–ò –¢–û–í–ê–†–û–í ===");
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ API
            for (let index = 0; index < order.product_items.length; index++) {
                const item = order.product_items[index];
                console.log(`–¢–æ–≤–∞—Ä ${index + 1}:`, JSON.stringify(item, null, 2));
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ API
                const productInfo = await getProductInfo(item.product_retailer_id);
                
                const productName = productInfo.title || `–¢–æ–≤–∞—Ä ${item.product_retailer_id}`;
                console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${productName}`);
                
                orderSummary += `${index + 1}. ${productName}\n`;
                orderSummary += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} ${productInfo.measure_unit || '—à—Ç'}\n`;
                
                if (item.item_price) {
                    const itemTotal = parseFloat(item.item_price) * item.quantity;
                    orderSummary += `–¶–µ–Ω–∞: ${item.item_price} ${item.currency || 'KGS'} x ${item.quantity} = ${itemTotal} ${item.currency || 'KGS'}\n`;
                    totalAmount += itemTotal;
                }
                
                orderSummary += "\n";
            }
        }
        
        orderSummary += `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalAmount} KGS\n`;
        orderSummary += "\nüìç –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:";
        
        await sendMessage(phone_no_id, from, orderSummary);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º order flow —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
            await sendOrderFlow(phone_no_id, from);
        }, 2000);
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ order –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–Ω–æ–ø–æ–∫
async function handleButtonResponse(phone_no_id, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ù–û–ü–ö–ò ===");
        const buttonId = message.interactive.button_reply.id;
        
        if (buttonId === "order_flow") {
            await sendOrderFlow(phone_no_id, from);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏:", error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
async function handleCatalogResponse(phone_no_id, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ê–¢–ê–õ–û–ì–ê (PRODUCT LIST) ===");
        console.log("Catalog response:", JSON.stringify(message.interactive, null, 2));
        
        const productListReply = message.interactive.product_list_reply;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        let orderSummary = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n";
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        orderSummary += "üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n";
        if (productListReply.single_product_reply) {
            orderSummary += `‚Ä¢ ${productListReply.single_product_reply.product_retailer_id}\n`;
        } else {
            orderSummary += `‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞\n`;
        }
        orderSummary += "\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n";
        orderSummary += "\nüìç –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:";
        
        await sendMessage(phone_no_id, from, orderSummary);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º order flow —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
            await sendOrderFlow(phone_no_id, from);
        }, 2000);
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ order flow
async function sendOrderFlow(phone_no_id, from) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê ORDER FLOW ===");
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
            },
            body: {
                text: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞"
            },
            footer: {
                text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –≤—Ä–µ–º—è"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `order_${Date.now()}`,
                    flow_id: ORDER_FLOW_ID,
                    flow_cta: "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                    flow_action: "navigate",
                    flow_action_payload: {
                    user_address: "—É–ª. –ò—Å—ã –ê—Ö—É–Ω–±–∞–µ–≤–∞ 125–≤, –∫–≤. 10" // –í–∞—à –∞–¥—Ä–µ—Å
                }
                }
            }
        }
    };

    await sendWhatsAppMessage(phone_no_id, flowData);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ Flow
async function handleFlowResponse(phone_no_id, from, message, body_param) {
    try {
        console.log("=== –û–ë–†–ê–ë–û–¢–ö–ê FLOW –û–¢–í–ï–¢–ê ===");
        
        const flowResponse = JSON.parse(message.interactive.nfm_reply.response_json);
        const customerProfile = body_param.entry[0].changes[0].value.contacts[0].profile.name;
        
        console.log('–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:', from);
        console.log('–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è WhatsApp:', customerProfile);
        console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ Flow:', flowResponse);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø Flow –ø–æ –¥–∞–Ω–Ω—ã–º
        if (flowResponse.flow_type === 'new_customer') {
            await handleNewCustomerRegistration(phone_no_id, from, flowResponse);
        } else {
            // –≠—Ç–æ order flow - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
            await handleOrderCompletion(phone_no_id, from, flowResponse);
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Flow –æ—Ç–≤–µ—Ç–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function handleNewCustomerRegistration(phone_no_id, from, data) {
    try {
        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', data);

        // –ó–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Temir API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        const customerData = {
            phone: from,
            first_name: data.first_name,
            last_name: data.last_name || '',
            address: data.address
        };

        // await axios.post(`${TEMIR_API_BASE}/customers/`, customerData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const confirmText = `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${data.first_name}! üéâ\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã. –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥! üç£`;
        await sendMessage(phone_no_id, from, confirmText);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
            await sendCatalog(phone_no_id, from);
        }, 2000);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        await sendMessage(phone_no_id, from, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (order flow)
async function handleOrderCompletion(phone_no_id, from, data) {
    try {
        console.log('‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑:', data);

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª–∏–∞–ª–µ –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑
        let branchInfo = null;
        if (data.order_type === 'pickup' && data.branch) {
            branchInfo = await getBranchInfo(data.branch);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API
        const orderData = {
            phone: from,
            order_type: data.order_type,
            branch_id: data.branch,
            delivery_choice: data.delivery_choice,
            new_address: data.new_address,
            preparation_time: data.preparation_time,
            specific_time: data.specific_time,
            promo_code: data.promo_code,
            comment: data.comment
        };

        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ Temir API
        // await axios.post(`${TEMIR_API_BASE}/orders/`, orderData);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let successMessage = 'üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n';
        
        if (data.order_type === 'pickup') {
            if (branchInfo) {
                successMessage += `üìç –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ —Ñ–∏–ª–∏–∞–ª–∞:\n`;
                successMessage += `üè™ ${branchInfo.title}\n`;
                successMessage += `üìç ${branchInfo.address}\n`;
                if (branchInfo.phone) {
                    successMessage += `üìû ${branchInfo.phone}\n`;
                }
            } else {
                successMessage += `üìç –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞\n`;
            }
        } else {
            successMessage += `üöó –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É\n`;
        }

        if (data.preparation_time === 'specific') {
            successMessage += `‚è∞ –í—Ä–µ–º—è: ${data.specific_time}\n`;
        } else {
            successMessage += `‚ö° –ì–æ—Ç–æ–≤–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ\n`;
        }

        if (data.promo_code) {
            successMessage += `üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: ${data.promo_code}\n`;
        }

        if (data.comment) {
            successMessage += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment}\n`;
        }

        successMessage += '\n‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!';
        successMessage += '\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.';

        await sendMessage(phone_no_id, from, successMessage);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        await sendMessage(phone_no_id, from, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Flow (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function handleLegacyFlowResponse(phone_no_id, from, flowResponse, customerProfile) {
    const orderData = {
        customer_phone: from,
        whatsapp_name: customerProfile,
        customer_name: flowResponse.customer_name,
        delivery_address: flowResponse.delivery_address,
        delivery_area: flowResponse.delivery_area,
        payment_method: flowResponse.payment_method,
        delivery_terms_accepted: flowResponse.delivery_terms,
        order_timestamp: new Date().toISOString()
    };

    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', orderData);

    await sendGreeting(phone_no_id, from, orderData);
    
    setTimeout(async () => {
        await sendCatalog(phone_no_id, from);
    }, 2000);
}

// –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
let productsCache = null;
let cacheExpiry = null;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
async function getAllProducts() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        if (productsCache && cacheExpiry && Date.now() < cacheExpiry) {
            console.log("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã");
            return productsCache;
        }
        
        console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ API");
        const response = await axios.get(`${TEMIR_API_BASE}/qr/products`);
        const products = response.data;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ ID
        const productsMap = {};
        products.forEach(product => {
            productsMap[product.api_id] = {
                id: product.api_id,
                api_id: product.api_id,
                title: product.title,
                measure_unit: product.measure_unit_title || '—à—Ç'
            };
        });
        
        // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
        productsCache = productsMap;
        cacheExpiry = Date.now() + (30 * 60 * 1000);
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        return productsMap;
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error.response?.status, error.response?.data);
        return productsCache || {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ ID
async function getProductInfo(productId) {
    try {
        const products = await getAllProducts();
        
        if (products[productId]) {
            console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: ${products[productId].title}`);
            return products[productId];
        } else {
            console.log(`‚ùì –¢–æ–≤–∞—Ä ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ`);
            
            // Fallback - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
            const response = await axios.get(`${TEMIR_API_BASE}/qr/products/${productId}`);
            const product = response.data;
            
            return {
                id: product.id,
                api_id: product.api_id,
                title: product.title,
                measure_unit: product.measure_unit_title || '—à—Ç'
            };
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error.response?.status);
        
        return {
            id: productId,
            title: `–¢–æ–≤–∞—Ä ${productId}`,
            measure_unit: '—à—Ç'
        };
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö
async function getBranchInfo(branchId) {
    try {
        const response = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = response.data;
        
        const branch = restaurants.find(r => r.external_id.toString() === branchId);
        
        if (branch) {
            return {
                id: branch.external_id,
                title: branch.title,
                address: branch.address,
                phone: branch.contacts.find(c => c.type === 'PHONE')?.value,
                whatsapp: branch.contacts.find(c => c.type === 'WHATSAPP')?.value
            };
        }
        
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–µ:', error);
        return null;
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendWhatsAppMessage(phone_no_id, messageData) {
    try {
        const response = await axios({
            method: "POST",
            url: `https://graph.facebook.com/v22.0/${phone_no_id}/messages?access_token=${token}`,
            data: messageData,
            headers: {
                "Content-Type": "application/json"
            }
        });
        
        console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:", response.data);
        return response.data;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:");
        console.error("Status:", error.response?.status);
        console.error("Data:", error.response?.data);
        throw error;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function sendCatalog(phone_no_id, to) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê –ö–ê–¢–ê–õ–û–ì–ê ===");
    
    const catalogData = {
        messaging_product: "whatsapp",
        to: to,
        type: "interactive",
        interactive: {
            type: "catalog_message",
            body: {
                text: "üç£ –ù–∞—à –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ Yaposhkin Rolls!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–≤–µ–∂–∏–µ –∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è —Å –ª—é–±–æ–≤—å—é! ‚ù§Ô∏è"
            },
            footer: {
                text: "–î–æ—Å—Ç–∞–≤–∫–∞ 30-40 –º–∏–Ω—É—Ç"
            },
            action: {
                name: "catalog_message"
            }
        }
    };

    await sendWhatsAppMessage(phone_no_id, catalogData);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function sendGreeting(phone_no_id, to, orderData) {
    const greetingText = `üéâ –°–ø–∞—Å–∏–±–æ, ${orderData.customer_name}!

‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:
üë§ –ò–º—è: ${orderData.customer_name}
üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${orderData.delivery_address}
üèôÔ∏è –†–∞–π–æ–Ω: ${getAreaName(orderData.delivery_area)}
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${getPaymentMethodName(orderData.payment_method)}

–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª—é–¥! üç£`;

    return await sendMessage(phone_no_id, to, greetingText);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(phone_no_id, to, text) {
    const messageData = {
        messaging_product: "whatsapp",
        to: to,
        text: {
            body: text
        }
    };

    return await sendWhatsAppMessage(phone_no_id, messageData);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getAreaName(areaCode) {
    const areas = {
        'center': '–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞',
        'north': '–°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω',
        'south': '–Æ–∂–Ω—ã–π —Ä–∞–π–æ–Ω',
        'east': '–í–æ—Å—Ç–æ—á–Ω—ã–π —Ä–∞–π–æ–Ω',
        'west': '–ó–∞–ø–∞–¥–Ω—ã–π —Ä–∞–π–æ–Ω'
    };
    return areas[areaCode] || areaCode;
}

function getPaymentMethodName(method) {
    const methods = {
        'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É',
        'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π',
        'transfer': '–ü–µ—Ä–µ–≤–æ–¥–æ–º'
    };
    return methods[method] || method;
}



// –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç–µ –≤–∞—à /flow endpoint –Ω–∞ —ç—Ç–æ—Ç:

app.post("/flow", async (req, res) => {
    console.log("=== FLOW REQUEST ===");
    console.log("Headers:", JSON.stringify(req.headers, null, 2));
    console.log("Body:", JSON.stringify(req.body, null, 2));

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        if (req.body.encrypted_flow_data) {
            console.log("üîê Encrypted flow data detected");
            return handleEncryptedRequest(req, res);
        }

        // –û–±—ã—á–Ω—ã–µ Flow –∑–∞–ø—Ä–æ—Å—ã
        const { version, action, flow_token, data } = req.body;
        
        console.log(`üìã Processing: version=${version}, action=${action}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        if (version && version !== "5.0") {
            console.log("‚ùå Unsupported version:", version);
            return res.status(400).json({
                error: "Unsupported version"
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        switch (action) {
            case "ping":
                console.log("üèì Ping request");
                return res.status(200).json({
                    version: "5.0",
                    data: {
                        status: "active"
                    }
                });

            case "INIT":
                console.log("üöÄ Flow initialization");
                return res.status(200).json({
                    version: "5.0",
                    data: {
                        screen: "welcome",
                        flow_token: flow_token || "default_token"
                    }
                });

            case "data_exchange":
                console.log("üíæ Data exchange");
                return res.status(200).json({
                    version: "5.0",
                    data: {
                        success: true
                    }
                });

            default:
                console.log("‚ùì Unknown or no action, sending default response");
                // –ï—Å–ª–∏ –Ω–µ—Ç action, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                return res.status(200).json({
                    version: "5.0",
                    data: {
                        status: "active",
                        message: "Flow endpoint is working"
                    }
                });
        }

    } catch (error) {
        console.error("‚ùå Flow endpoint error:", error);
        return res.status(200).json({
            version: "5.0",
            data: {
                status: "error",
                message: error.message
            }
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
function handleEncryptedRequest(req, res) {
    console.log("üîê Handling encrypted request");
    
    try {
        // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const response = {
            version: "5.0",
            data: {
                status: "active"
            }
        };

        console.log("üì§ Sending JSON response:", response);
        return res.status(200).json(response);

    } catch (error) {
        console.error("‚ùå Encrypted request error:", error);
        return res.status(200).json({
            version: "5.0",
            data: {
                status: "error"
            }
        });
    }
}

// GET endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.get("/flow", (req, res) => {
    const status = {
        status: "Flow endpoint is active",
        timestamp: new Date().toISOString(),
        endpoints: {
            "POST /flow": "Handle WhatsApp Flow requests",
            "GET /flow": "Status check"
        },
        ready: true
    };
    
    console.log("üìä Status check:", status);
    res.status(200).json(status);
});


app.get("/", (req, res) => {
    res.status(200).send("hello this is webhook setup");
});