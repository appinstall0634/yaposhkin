const express = require("express");
const body_parser = require("body-parser");
const axios = require("axios");
require('dotenv').config();
const crypto = require('crypto');
const fs = require('fs');
const PORT = process.env.PORT || 3000;

const app = express().use(body_parser.json());

const token = process.env.TOKEN;
const mytoken = process.env.MYTOKEN;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TEMIR_API_BASE = 'https://ya.temir.me';

// Flow IDs
const NEW_CUSTOMER_FLOW_ID = '4265839023734503'; // newCustomer
const ORDER_FLOW_ID = '708820881926236'; // order

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
const userStates = new Map();

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
const userWaitingStates = new Map();

// –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
const WAITING_STATES = {
    NONE: 'none',                    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    FLOW_RESPONSE: 'flow_response',  // –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç –æ—Ç Flow (nfm_reply)
    LOCATION: 'location',            // –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (location)
    CATALOG_ORDER: 'catalog_order',  // –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (order/product_list_reply)
    BUTTON_RESPONSE: 'button_response' // –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç –æ—Ç –∫–Ω–æ–ø–æ–∫ (button_reply)
};

app.listen(PORT, () => {
    console.log("webhook is listening");
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook
app.get("/webhook", (req, res) => {
    let mode = req.query["hub.mode"];
    let challenge = req.query["hub.challenge"];
    let token = req.query["hub.verify_token"];

    if (mode && token) {
        if (mode === "subscribe" && token === mytoken) {
            res.status(200).send(challenge);
        } else {
            res.status(403).send("Forbidden");
        }
    }
});

app.post("/webhook", async (req, res) => {
    let body_param = req.body;

    console.log("=== –ü–û–õ–£–ß–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===");
    console.log(JSON.stringify(body_param, null, 2));

    if (body_param.object) {
        console.log("inside body param");
        if (body_param.entry && 
            body_param.entry[0].changes && 
            body_param.entry[0].changes[0].value.messages && 
            body_param.entry[0].changes[0].value.messages[0]) {
            
            let phone_no_id = body_param.entry[0].changes[0].value.metadata.phone_number_id;
            let from = body_param.entry[0].changes[0].value.messages[0].from;
            let message = body_param.entry[0].changes[0].value.messages[0];

            console.log("phone number " + phone_no_id);
            console.log("from " + from);
            console.log("message type:", message.type);
            console.log("message:", JSON.stringify(message, null, 2));

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentWaitingState = getUserWaitingState(from);
            console.log(`üë§ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${from}: ${currentWaitingState}`);

            try {
                // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô –û–ñ–ò–î–ê–ù–ò–Ø
                const messageProcessed = await processMessageByWaitingState(
                    phone_no_id, 
                    from, 
                    message, 
                    currentWaitingState, 
                    body_param
                );

                if (!messageProcessed) {
                    // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await sendWaitingStateMessage(phone_no_id, from, currentWaitingState);
                }

            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                clearUserWaitingState(from);
                await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.");
            }

            res.sendStatus(200);
        } else {
            res.sendStatus(404);
        }
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –æ–∂–∏–¥–∞–Ω–∏—è
function setUserWaitingState(phone, state, timeout = 300000) { // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console.log(`üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${phone}: ${state}`);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const currentState = userWaitingStates.get(phone);
    if (currentState && currentState.timeout) {
        clearTimeout(currentState.timeout);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const timeoutId = setTimeout(() => {
        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${phone}: ${state}`);
        clearUserWaitingState(phone);
        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ
        sendTimeoutMessage(phone, state);
    }, timeout);
    
    userWaitingStates.set(phone, {
        state: state,
        timestamp: Date.now(),
        timeout: timeoutId
    });
}


function clearUserWaitingState(phone) {
    console.log(`‚úÖ –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${phone}`);
    const currentState = userWaitingStates.get(phone);
    if (currentState && currentState.timeout) {
        clearTimeout(currentState.timeout);
    }
    userWaitingStates.delete(phone);
}

function clearAllWaitingStates() {
    console.log("üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è");
    for (const [phone, stateObj] of userWaitingStates) {
        if (stateObj.timeout) {
            clearTimeout(stateObj.timeout);
        }
    }
    userWaitingStates.clear();
}

function getWaitingStatesStats() {
    const stats = {
        total: userWaitingStates.size,
        states: {}
    };
    
    for (const [phone, stateObj] of userWaitingStates) {
        const state = stateObj.state;
        stats.states[state] = (stats.states[state] || 0) + 1;
    }
    
    console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è:", stats);
    return stats;
}

function getUserWaitingState(phone) {
    const stateObj = userWaitingStates.get(phone);
    return stateObj ? stateObj.state : WAITING_STATES.NONE;
}

async function sendTimeoutMessage(phone, state) {
    try {
        const phone_no_id = process.env.PHONE_NUMBER_ID;
        let message = '';
        
        switch (state) {
            case WAITING_STATES.FLOW_RESPONSE:
                message = '‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.';
                break;
            case WAITING_STATES.LOCATION:
                message = '‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.';
                break;
            case WAITING_STATES.CATALOG_ORDER:
                message = '‚è∞ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.';
                break;
            default:
                message = '‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.';
        }
        
        await sendMessage(phone_no_id, phone, message);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ:', error);
    }
}



async function processMessageByWaitingState(phone_no_id, from, message, waitingState, body_param) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "${message.type}" –ø—Ä–æ—Ç–∏–≤ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è "${waitingState}"`);

    switch (waitingState) {
        case WAITING_STATES.NONE:
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            console.log("‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            await handleIncomingMessage(phone_no_id, from, message);
            return true;

        case WAITING_STATES.FLOW_RESPONSE:
            // –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç –æ—Ç Flow
            if (message.type === "interactive" && message.interactive.type === "nfm_reply") {
                console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Flow");
                await handleFlowResponse(phone_no_id, from, message, body_param);
                return true;
            } else {
                console.log("‚ùå –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Flow, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è");
                return false;
            }

        case WAITING_STATES.LOCATION:
            // –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            if (message.type === "location") {
                console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
                await handleLocationMessage(phone_no_id, from, message);
                return true;
            } else {
                console.log("‚ùå –û–∂–∏–¥–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è");
                return false;
            }

        case WAITING_STATES.CATALOG_ORDER:
            // –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
            if (message.type === "order") {
                console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –∑–∞–∫–∞–∑ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (order)");
                await handleCatalogOrderResponse(phone_no_id, from, message);
                return true;
            } else if (message.type === "interactive" && message.interactive.type === "product_list_reply") {
                console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (product_list_reply)");
                await handleCatalogResponse(phone_no_id, from, message);
                return true;
            } else {
                console.log("‚ùå –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è");
                return false;
            }

        case WAITING_STATES.BUTTON_RESPONSE:
            // –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç –æ—Ç –∫–Ω–æ–ø–æ–∫
            if (message.type === "interactive" && message.interactive.type === "button_reply") {
                console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∫–Ω–æ–ø–∫–∏");
                await handleButtonResponse(phone_no_id, from, message);
                return true;
            } else {
                console.log("‚ùå –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–Ω–æ–ø–∫–∏, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è");
                return false;
            }

        default:
            console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è: ${waitingState}`);
            // –ü—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            clearUserWaitingState(from);
            await handleIncomingMessage(phone_no_id, from, message);
            return true;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á–µ–≥–æ –º—ã –æ–∂–∏–¥–∞–µ–º
async function sendWaitingStateMessage(phone_no_id, from, waitingState) {
    let message = '';
    
    switch (waitingState) {
        case WAITING_STATES.FLOW_RESPONSE:
            message = '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.';
            break;
            
        case WAITING_STATES.LOCATION:
            message = 'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
            break;
            
        case WAITING_STATES.CATALOG_ORDER:
            message = 'üõí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤—ã—à–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É.';
            break;
            
        case WAITING_STATES.BUTTON_RESPONSE:
            message = 'üîò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ.';
            break;
            
        default:
            return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    }
    
    try {
        await sendMessage(phone_no_id, from, message);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function handleLocationMessage(phone_no_id, from, message) {
    try {
        console.log("=== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===");
        
        // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        clearUserWaitingState(from);
        
        const location = message.location;
        const longitude = location.longitude;
        const latitude = location.latitude;
        
        console.log(`üìç –ü–æ–ª—É—á–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${latitude}, ${longitude}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userState = userStates.get(from);
        
        if (!userState) {
            console.log("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.");
            return;
        }
        
        console.log("üë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userState);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º
        await updateCustomerWithLocation(phone_no_id, from, userState, longitude, latitude);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        clearUserWaitingState(from);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
async function updateCustomerWithLocation(phone_no_id, from, userState, longitude, latitude) {
    try {
        console.log("=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –° –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï–ú ===");
        
        // –ü–æ–ª—É—á–∞–µ–º qr_token
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const qr_token = customerResponse.data.qr_access_token;
        
        console.log("üîë QR Token:", qr_token);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData = {
            firstName: userState.customer_name,
            addresses: [{
                fullAddress: userState.delivery_address,
                office: "",
                floor: "",
                doorcode: "",
                entrance: "",
                comment: "",
                geocoding: {
                    datasource: "yandex",
                    longitude: longitude,
                    latitude: latitude,
                    country: "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω",
                    countrycode: "KG",
                    city: "–ë–∏—à–∫–µ–∫",
                    street: "",
                    house: "",
                    date: ""
                }
            }]
        };
        
        console.log("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", updateData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const updateResponse = await axios.post(
            `${TEMIR_API_BASE}/qr/update-customer/?qr_token=${qr_token}`,
            updateData
        );
        
        console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", updateResponse.data);
        
        // –û–ë–ù–û–í–õ–Ø–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—á–∏—Å—Ç–∫–∏
        userStates.set(from, {
            ...userState,
            order_type: 'delivery',
            delivery_choice: 'new',
            location_processed: true,
            new_address: userState.delivery_address
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if (userState.flow_type === 'new_customer') {
            const confirmText = `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${userState.customer_name}! üéâ\n\n–í–∞—à –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${userState.delivery_address}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã. –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥! üç£`;
            await sendMessage(phone_no_id, from, confirmText);
        } else {
            const confirmText = `‚úÖ –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüìç ${userState.delivery_address}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
            await sendMessage(phone_no_id, from, confirmText);
        }
        
        // –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await sendCatalog(phone_no_id, from);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", error);
        
        let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.";
        if (error.response?.status === 400) {
            errorMessage = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        } else if (error.response?.status === 404) {
            errorMessage = "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.";
        }
        
        await sendMessage(phone_no_id, from, errorMessage);
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        userStates.delete(from);
        clearUserWaitingState(from);
    }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
async function handleIncomingMessage(phone_no_id, from, message) {
    console.log("=== –ü–†–û–í–ï–†–ö–ê –ö–õ–ò–ï–ù–¢–ê ===");
    
    const messageText = message.text?.body?.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}: ${messageText || '–Ω–µ —Ç–µ–∫—Å—Ç'}`);
    
    await checkCustomerAndSendFlow(phone_no_id, from);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ Flow
async function checkCustomerAndSendFlow(phone_no_id, from) {
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${from}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Flow
        const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = restaurantsResponse.data;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª–∏–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–æ–≤
        const branches = restaurants.map(restaurant => ({
            id: restaurant.external_id.toString(),
            title: `üè™ ${restaurant.title}`
        }));
        
        console.log("üè™ –§–∏–ª–∏–∞–ª—ã –¥–ª—è Flow:", branches);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ Temir
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const customerData = customerResponse.data;
        
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:', customerData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å–∞ —É –∫–ª–∏–µ–Ω—Ç–∞
        const hasAddresses = customerData.customer.addresses && customerData.customer.addresses.length > 0;
        const isNewCustomer = !hasAddresses || 
                             !customerData.customer.first_name || 
                             customerData.customer.first_name === '–ò–º—è';

        if (isNewCustomer) {
            console.log('üÜï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow');
            await sendNewCustomerFlow(phone_no_id, from, branches);
        } else {
            console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Flow —Å –∞–¥—Ä–µ—Å–∞–º–∏');
            await sendExistingCustomerFlow(phone_no_id, from, customerData.customer, branches);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Flow
        setUserWaitingState(from, WAITING_STATES.FLOW_RESPONSE);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API - –ø–æ–ª—É—á–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow
        try {
            const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
            const restaurants = restaurantsResponse.data;
            const branches = restaurants.map(restaurant => ({
                id: restaurant.external_id.toString(),
                title: `üè™ ${restaurant.title}`
            }));
            
            console.log('üÜï –û—à–∏–±–∫–∞ API - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow');
            await sendNewCustomerFlow(phone_no_id, from, branches);
            setUserWaitingState(from, WAITING_STATES.FLOW_RESPONSE);
        } catch (fallbackError) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–æ–≤:', fallbackError);
            await sendMessage(phone_no_id, from, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Flow –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
async function sendNewCustomerFlow(phone_no_id, from, branches) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê FLOW –î–õ–Ø –ù–û–í–´–• –ö–õ–ò–ï–ù–¢–û–í ===");
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üç£ Yaposhkin Rolls"
            },
            body: {
                text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
            },
            footer: {
                text: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `new_customer_${Date.now()}`,
                    flow_id: NEW_CUSTOMER_FLOW_ID,
                    flow_cta: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                    flow_action: "navigate",
                    flow_action_payload: {
                        screen: "WELCOME_NEW",
                        data: {
                            flow_type: "new_customer",
                            branches: branches
                        }
                    }
                }
            }
        }
    };

    await sendWhatsAppMessage(phone_no_id, flowData);
    
    // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è Flow
    setUserWaitingState(from, WAITING_STATES.FLOW_RESPONSE, 600000); // 10 –º–∏–Ω—É—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Flow –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
async function sendExistingCustomerFlow(phone_no_id, from, customer, branches) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê FLOW –î–õ–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ö–õ–ò–ï–ù–¢–û–í ===");
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è dropdown
    const addresses = customer.addresses.map((addr) => ({
        id: `address_${addr.id}`,
        title: addr.full_address
    }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å"
    addresses.push({
        id: "new",
        title: "‚ûï –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å"
    });
    
    console.log("üìç –ê–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞:", addresses);
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
            },
            body: {
                text: `–ü—Ä–∏–≤–µ—Ç, ${customer.first_name}! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞`
            },
            footer: {
                text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∞–¥—Ä–µ—Å"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `existing_customer_${Date.now()}`,
                    flow_id: ORDER_FLOW_ID,
                    flow_cta: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–∫–∞–∑",
                    flow_action: "navigate",
                    flow_action_payload: {
                        screen: "ORDER_TYPE",
                        data: {
                            flow_type: "existing_customer",
                            customer_name: customer.first_name,
                            user_addresses: addresses,
                            branches: branches
                        }
                    }
                }
            }
        }
    };

    await sendWhatsAppMessage(phone_no_id, flowData);
    
    // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è Flow
    setUserWaitingState(from, WAITING_STATES.FLOW_RESPONSE, 600000); // 10 –º–∏–Ω—É—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ Flow
async function handleFlowResponse(phone_no_id, from, message, body_param) {
    try {
        console.log("=== –û–ë–†–ê–ë–û–¢–ö–ê FLOW –û–¢–í–ï–¢–ê ===");
        
        // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è Flow
        clearUserWaitingState(from);
        
        const flowResponse = JSON.parse(message.interactive.nfm_reply.response_json);
        const customerProfile = body_param.entry[0].changes[0].value.contacts[0].profile.name;
        
        console.log('–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:', from);
        console.log('–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è WhatsApp:', customerProfile);
        console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ Flow:', flowResponse);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø Flow –ø–æ –¥–∞–Ω–Ω—ã–º
        if (flowResponse.flow_type === 'new_customer') {
            await handleNewCustomerRegistration(phone_no_id, from, flowResponse);
        } else if (flowResponse.flow_type === 'existing_customer') {
            await handleExistingCustomerOrder(phone_no_id, from, flowResponse);
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø flow - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
            console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø Flow, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥");
            await sendMessage(phone_no_id, from, "–°–ø–∞—Å–∏–±–æ! –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:");
            await sendCatalog(phone_no_id, from);
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Flow –æ—Ç–≤–µ—Ç–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        clearUserWaitingState(from);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function handleNewCustomerRegistration(phone_no_id, from, data) {
    try {
        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', data);

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        if (data.order_type === 'delivery' && data.delivery_address) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            userStates.set(from, {
                flow_type: 'new_customer',
                customer_name: data.customer_name,
                delivery_address: data.delivery_address
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è)
            await sendLocationRequest(phone_no_id, from, data.customer_name);
        } else {
            // –°–∞–º–æ–≤—ã–≤–æ–∑ - —Å—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
            await registerCustomerWithoutLocation(phone_no_id, from, data);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        await sendMessage(phone_no_id, from, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        clearUserWaitingState(from);
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞)
async function registerCustomerWithoutLocation(phone_no_id, from, data) {
    try {
        console.log("=== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê –ë–ï–ó –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===");
        
        // –ü–æ–ª—É—á–∞–µ–º qr_token
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const qr_token = customerResponse.data.qr_access_token;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∏–º—è)
        const updateData = {
            firstName: data.customer_name
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const updateResponse = await axios.post(
            `${TEMIR_API_BASE}/qr/update-customer/?qr_token=${qr_token}`,
            updateData
        );
        
        console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", updateResponse.data);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirmText = `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${data.customer_name}! üéâ\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞! üç£`;
        await sendMessage(phone_no_id, from, confirmText);
        
        // –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ (–≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è)
        await sendCatalog(phone_no_id, from);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        clearUserWaitingState(from);
    }
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function handleExistingCustomerOrder(phone_no_id, from, data) {
    try {
        console.log('üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', data);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        userStates.set(from, {
            flow_type: 'existing_customer',
            order_type: data.order_type,
            delivery_choice: data.delivery_choice,
            new_address: data.new_address,
            branch: data.branch,
            customer_name: data.customer_name
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–ª –∫–ª–∏–µ–Ω—Ç
        if (data.order_type === 'delivery' && data.delivery_choice === 'new' && data.new_address) {
            console.log('üìç –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–æ—Å—Ç–∞–≤–∫—É —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º:', data.new_address);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –°–û–•–†–ê–ù–Ø–Ø –í–°–ï –î–ê–ù–ù–´–ï
            userStates.set(from, {
                flow_type: 'existing_customer',
                customer_name: data.customer_name || '–ö–ª–∏–µ–Ω—Ç',
                delivery_address: data.new_address,
                // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                order_type: data.order_type,
                delivery_choice: data.delivery_choice,
                new_address: data.new_address,
                branch: data.branch
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è)
            await sendLocationRequest(phone_no_id, from, data.customer_name);
            
        } else {
            console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥');
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
            let confirmText;
            if (data.order_type === 'delivery') {
                confirmText = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
            } else {
                confirmText = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
            }
            
            await sendMessage(phone_no_id, from, confirmText);
            
            // –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ (–≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è)
            await sendCatalog(phone_no_id, from);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
        await sendMessage(phone_no_id, from, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        clearUserWaitingState(from);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function sendLocationRequest(phone_no_id, from, customerName) {
    console.log("=== –ó–ê–ü–†–û–° –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===");
    
    const locationText = `–°–ø–∞—Å–∏–±–æ, ${customerName}! üìç\n\n–î–ª—è —Ç–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ`;
    
    await sendMessage(phone_no_id, from, locationText);
    
    // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    setUserWaitingState(from, WAITING_STATES.LOCATION, 300000); // 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ order
async function handleCatalogOrderResponse(phone_no_id, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ê–¢–ê–õ–û–ì–ê (ORDER FORMAT) ===");
        
        // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
        clearUserWaitingState(from);
        
        console.log("Order message:", JSON.stringify(message, null, 2));
        
        const order = message.order;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        let orderSummary = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n";
        let totalAmount = 0;
        let orderItems = [];
        
        if (order && order.product_items) {
            console.log("=== –î–ï–¢–ê–õ–ò –¢–û–í–ê–†–û–í ===");
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            for (let index = 0; index < order.product_items.length; index++) {
                const item = order.product_items[index];
                console.log(`–¢–æ–≤–∞—Ä ${index + 1}:`, JSON.stringify(item, null, 2));
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ API
                const productInfo = await getProductInfo(item.product_retailer_id);
                
                const productName = productInfo.title || `–¢–æ–≤–∞—Ä ${item.product_retailer_id}`;
                const productId = productInfo.api_id;
                const itemPrice = parseFloat(item.item_price) || 0;
                const itemTotal = itemPrice * item.quantity;
                
                console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${productName}`);
                
                orderSummary += `${index + 1}. ${productName}\n`;
                orderSummary += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} ${productInfo.measure_unit || '—à—Ç'}\n`;
                orderSummary += `–¶–µ–Ω–∞: ${itemPrice} KGS x ${item.quantity} = ${itemTotal} KGS\n\n`;
                
                totalAmount += itemTotal;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∑–∞–∫–∞–∑–∞
                orderItems.push({
                    id: parseInt(productId),
                    title: productName,
                    quantity: item.quantity,
                    priceWithDiscount: null,
                    dealDiscountId: null,
                    modifierGroups: []
                });
            }
        }
        
        console.log("üì¶ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:", orderItems);
        orderSummary += `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalAmount} KGS\n\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
        const userState = userStates.get(from);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        await calculateDeliveryAndSubmitOrder(phone_no_id, from, orderItems, totalAmount, orderSummary, userState);
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ order –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        clearUserWaitingState(from);
    }
}

// –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function calculateDeliveryAndSubmitOrder(phone_no_id, from, orderItems, totalAmount, orderSummary, userState) {
    try {
        console.log("=== –†–ê–°–ß–ï–¢ –î–û–°–¢–ê–í–ö–ò –ò –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===");
        console.log("User state from parameter:", userState);
        
        // –ï—Å–ª–∏ userState –ø—É—Å—Ç–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Map
        if (!userState) {
            console.log("‚ö†Ô∏è User state is null, trying to get from Map");
            userState = userStates.get(from);
            console.log("User state from Map:", userState);
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
        if (!userState) {
            console.log("‚ö†Ô∏è No user state found, defaulting to pickup");
            userState = {
                order_type: 'pickup',
                flow_type: 'fallback'
            };
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const customerData = customerResponse.data;
        
        let deliveryCost = 0;
        let locationId = null;
        let locationTitle = "";
        let orderType = userState.order_type || "pickup"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º–æ–≤—ã–≤–æ–∑
        let deliveryAddress = "";

        console.log(`üìã Order type from state: ${orderType}`);
        console.log(`üìã Full userState:`, userState);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
        if (orderType === 'delivery') {
            console.log("üöö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É");
            
            let address = null;
            let tempLat = null;
            let tempLon = null;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å
            if (userState.delivery_choice === 'new' || userState.location_processed) {
                // –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å - –∏—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
                const addresses = customerData.customer.addresses || [];
                address = addresses[addresses.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π
                deliveryAddress = userState.new_address || userState.delivery_address || address?.full_address || "";
                console.log(`üìç Using new address: ${deliveryAddress}`);
                console.log(`üìç Address object:`, address);
                
                if (address?.geocoding_json) {
                    console.log(`üìç Address latitude: ${address.geocoding_json.latitude}`);
                    tempLat = address.geocoding_json.latitude;
                    console.log(`üìç Address longitude: ${address.geocoding_json.longitude}`);
                    tempLon = address.geocoding_json.longitude;
                }
            } else {
                // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
                const addressIndex = parseInt(userState.delivery_choice.replace('address_', ''));
                address = customerData.customer.addresses.find(item => item.id == addressIndex);
                deliveryAddress = address?.full_address || "";
                console.log(`üìç Using existing address index ${addressIndex}: ${deliveryAddress}`);
                console.log(`üìç Address object:`, address);
                
                if (address?.geocoding_json) {
                    console.log(`üìç Address latitude: ${address.geocoding_json.latitude}`);
                    tempLat = address.geocoding_json.latitude;
                    console.log(`üìç Address longitude: ${address.geocoding_json.longitude}`);
                    tempLon = address.geocoding_json.longitude;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (!tempLat || !tempLon) {
                console.log("‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏");
                await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                userStates.delete(from);
                clearUserWaitingState(from);
                return;
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
            const lat = tempLat;
            const lon = tempLon;
            
            console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏: ${lat}, ${lon}`);
            
            try {
                const deliveryResponse = await axios.get(
                    `${TEMIR_API_BASE}/qr/delivery/?lat=${lat}&lon=${lon}`
                );
                
                console.log("üöö –û—Ç–≤–µ—Ç delivery API:", deliveryResponse.data);
                
                if (deliveryResponse.data[0]) {
                    deliveryCost = deliveryResponse.data[0].delivery_cost || 0;
                    locationId = deliveryResponse.data[0].restaurant_id;
                    locationTitle = deliveryResponse.data[0].title || "–†–µ—Å—Ç–æ—Ä–∞–Ω";
                } else {
                    // –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                    console.log("‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É");
                    await sendMessage(phone_no_id, from, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                    userStates.delete(from);
                    clearUserWaitingState(from);
                    return; 
                }
            } catch (deliveryError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:", deliveryError);
                await sendMessage(phone_no_id, from, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                userStates.delete(from);
                clearUserWaitingState(from);
                return;
            }
        } else {
            // –ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ - –≤—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª–∏–∞–ª
            console.log("üè™ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑");
            
            if (userState?.branch) {
                // –§–∏–ª–∏–∞–ª –≤—ã–±—Ä–∞–Ω –≤ Flow
                const branchInfo = await getBranchInfo(userState.branch);
                if (branchInfo) {
                    locationId = parseInt(userState.branch);
                    locationTitle = branchInfo.title;
                } else {
                    console.log("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                    await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                    userStates.delete(from);
                    clearUserWaitingState(from);
                    return;
                }
            } else {
                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
                try {
                    const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
                    const restaurants = restaurantsResponse.data;
                    
                    if (restaurants.length > 0) {
                        const selectedBranch = restaurants[0];
                        locationId = selectedBranch.external_id;
                        locationTitle = selectedBranch.title;
                    } else {
                        console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤");
                        await sendMessage(phone_no_id, from, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                        userStates.delete(from);
                        clearUserWaitingState(from);
                        return;
                    }
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤:", error);
                    await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                    userStates.delete(from);
                    clearUserWaitingState(from);
                    return;
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å locationId
        if (!locationId) {
            console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞");
            await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
            userStates.delete(from);
            clearUserWaitingState(from);
            return;
        }
        
        const finalAmount = totalAmount + deliveryCost;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        let costMessage = orderSummary;
        
        if (orderType === "delivery") {
            costMessage += `üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryCost} KGS\n`;
            costMessage += `üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryAddress}\n\n`;
        } else {
            costMessage += `üè™ –°–∞–º–æ–≤—ã–≤–æ–∑: 0 KGS\n`;
            costMessage += `üìç –§–∏–ª–∏–∞–ª: ${locationTitle}\n\n`;
        }
        
        costMessage += `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${finalAmount} KGS\n\n`;
        costMessage += `‚è≥ –û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑...`;
        
        await sendMessage(phone_no_id, from, costMessage);
        
        // –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        await submitOrder(phone_no_id, from, orderItems, customerData, locationId, locationTitle, orderType, finalAmount);
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        userStates.delete(from);
        clearUserWaitingState(from);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
        await sendMessage(phone_no_id, from, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.");
        userStates.delete(from);
        clearUserWaitingState(from);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ API
async function submitOrder(phone_no_id, from, orderItems, customerData, locationId, locationTitle, orderType, finalAmount) {
    try {
        console.log("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ API");
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è preorder
        const preorderData = {
            locationId: parseInt(locationId),
            locationTitle: locationTitle,
            type: orderType,
            customerContact: {
                firstName: "Test",
                comment: "Test",
                contactMethod: {
                    type: "phoneNumber",
                    value: from
                }
            },
            orderDueDateDelta: 0, // –ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ
            guests: [{
                orderItems: orderItems
            }],
            paymentSumWithDiscount: null
        };
        
        console.log("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è preorder:", JSON.stringify(preorderData, null, 2));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ API
        const preorderResponse = await axios.post(
            `${TEMIR_API_BASE}/qr/preorder/?qr_token=${customerData.qr_access_token}`,
            preorderData
        );
        
        console.log("‚úÖ –û—Ç–≤–µ—Ç preorder API:", preorderResponse.data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ –¥–∞–∂–µ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ 200
        if (preorderResponse.data.error) {
            console.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:", preorderResponse.data.error);
            throw {
                response: {
                    status: 200,
                    data: preorderResponse.data
                }
            };
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await sendOrderSuccessMessage(phone_no_id, from, preorderResponse.data, orderType, finalAmount, locationTitle);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ API:', error);
        
        let errorMessage = '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        if (error.response?.data?.error?.description) {
            const errorDescription = error.response.data.error.description;
            
            if (errorDescription.includes("Location is closed")) {
                // –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç
                console.log("üîí –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç");
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
                const workingHours = await getLocationWorkingHours(locationId);
                
                if (orderType === 'delivery') {
                    errorMessage = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n`;
                    errorMessage += `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n`;
                    if (workingHours) {
                        errorMessage += `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${workingHours}\n\n`;
                    }
                    errorMessage += `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
                } else {
                    errorMessage = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n`;
                    errorMessage += `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n`;
                    if (workingHours) {
                        errorMessage += `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${workingHours}\n\n`;
                    }
                    errorMessage += `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
                }
            } else if (errorDescription.includes("out of stock") || errorDescription.includes("unavailable")) {
                // –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                errorMessage = `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n`;
                errorMessage += `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è.`;
            } else {
                // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API
                errorMessage = `‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${errorDescription}\n\n`;
                errorMessage += `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.`;
            }
        } else if (error.response?.data?.error?.type) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø—É
            const errorType = error.response.data.error.type;
            
            if (errorType === "LocationIsClosedException") {
                console.log("üîí –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç (–ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏)");
                
                const workingHours = await getLocationWorkingHours(locationId);
                
                errorMessage = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, ${orderType === 'delivery' ? '–¥–æ—Å—Ç–∞–≤–∫–∞' : '—Å–∞–º–æ–≤—ã–≤–æ–∑'} —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n`;
                errorMessage += `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n`;
                if (workingHours) {
                    errorMessage += `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${workingHours}\n\n`;
                }
                errorMessage += `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
            } else {
                errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${errorType}\n\n`;
                errorMessage += `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.`;
            }
        } else if (error.response?.status === 400) {
            errorMessage = `‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.\n\n`;
            errorMessage += `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.`;
        } else if (error.response?.status === 404) {
            errorMessage = `‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n`;
            errorMessage += `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.`;
        } else if (error.response?.status === 500) {
            errorMessage = `‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n\n`;
            errorMessage += `–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`;
        } else {
            errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n\n`;
            errorMessage += `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`;
        }
        
        await sendMessage(phone_no_id, from, errorMessage);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª–∏–∞–ª–∞
async function getLocationWorkingHours(locationId) {
    try {
        console.log(`üïê –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${locationId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö
        const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = restaurantsResponse.data;
        
        // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
        const restaurant = restaurants.find(r => r.external_id == locationId);
        
        if (restaurant && restaurant.schedule) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            const today = new Date().getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∏ —Ç.–¥.
            const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            const dayNamesRu = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
            
            const todayKey = dayNames[today];
            const todayNameRu = dayNamesRu[today];
            
            // –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            const todaySchedule = restaurant.schedule.find(s => s.day === todayKey);
            
            if (todaySchedule) {
                if (todaySchedule.active) {
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    const timeStart = todaySchedule.timeStart.substring(0, 5); // "11:00:00" -> "11:00"
                    const timeEnd = todaySchedule.timeEnd.substring(0, 5);     // "23:45:59" -> "23:45"
                    
                    return `${todayNameRu}: ${timeStart} - ${timeEnd}`;
                } else {
                    return `${todayNameRu}: –≤—ã—Ö–æ–¥–Ω–æ–π`;
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            const workingDays = restaurant.schedule.filter(s => s.active);
            if (workingDays.length > 0) {
                const firstDay = workingDays[0];
                const timeStart = firstDay.timeStart.substring(0, 5);
                const timeEnd = firstDay.timeEnd.substring(0, 5);
                return `–û–±—ã—á–Ω–æ: ${timeStart} - ${timeEnd}`;
            }
        }
        
        // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API
        return "11:00 - 23:45";
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:", error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        return "11:00 - 23:45";
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ
async function sendOrderSuccessMessage(phone_no_id, from, preorderResponse, orderType, finalAmount, locationTitle) {
    try {
        let successMessage = '';
        
        if (preorderResponse.status === 'success') {
            successMessage = 'üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n';
            successMessage += `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${preorderResponse.data.preorder_id}\n\n`;
            
            if (orderType === 'pickup') {
                successMessage += `üè™ –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ —Ñ–∏–ª–∏–∞–ª–∞:\n`;
                successMessage += `üìç ${locationTitle}\n`;
            } else {
                successMessage += `üöó –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É\n`;
            }

            successMessage += `üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${finalAmount} KGS\n\n`;
            successMessage += '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n';
            successMessage += 'üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.';
        } else {
            successMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n';
            successMessage += '–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.';
        }

        await sendMessage(phone_no_id, from, successMessage);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ:', error);
    }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...
async function handleButtonResponse(phone_no_id, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ù–û–ü–ö–ò ===");
        
        // –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –∫–Ω–æ–ø–∫–∏, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (getUserWaitingState(from) === WAITING_STATES.BUTTON_RESPONSE) {
            clearUserWaitingState(from);
        }
        
        const buttonId = message.interactive.button_reply.id;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        console.log("Button ID:", buttonId);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏:", error);
    }
}

async function sendButtonMessage(phone_no_id, to, bodyText, buttons, headerText = null, footerText = null, timeoutMinutes = 5) {
    try {
        const interactiveData = {
            messaging_product: "whatsapp",
            to: to,
            type: "interactive",
            interactive: {
                type: "button",
                body: {
                    text: bodyText
                },
                action: {
                    buttons: buttons
                }
            }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (headerText) {
            interactiveData.interactive.header = {
                type: "text",
                text: headerText
            };
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
        if (footerText) {
            interactiveData.interactive.footer = {
                text: footerText
            };
        }
        
        await sendWhatsAppMessage(phone_no_id, interactiveData);
        
        // –í–ê–ñ–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        setUserWaitingState(to, WAITING_STATES.BUTTON_RESPONSE, timeoutMinutes * 60 * 1000);
        
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ ${timeoutMinutes} –º–∏–Ω—É—Ç`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫:", error);
        throw error;
    }
}

async function resetUserState(phone_no_id, from, reason = "–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è") {
    console.log(`üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${from}: ${reason}`);
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    clearUserWaitingState(from);
    userStates.delete(from);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await sendMessage(phone_no_id, from, "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.");
}

function cleanupExpiredStates() {
    const now = Date.now();
    const maxAge = 3600000; // 1 —á–∞—Å
    let cleanedCount = 0;
    
    for (const [phone, stateObj] of userWaitingStates) {
        if (now - stateObj.timestamp > maxAge) {
            console.log(`üßπ –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${phone}`);
            clearUserWaitingState(phone);
            cleanedCount++;
        }
    }
    
    if (cleanedCount > 0) {
        console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π`);
    }
    
    return cleanedCount;
}

function logUserStateChange(phone, action, oldState, newState) {
    const timestamp = new Date().toISOString();
    console.log(`üìù [${timestamp}] ${phone}: ${action} | ${oldState} ‚Üí ${newState}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
}

async function handleCatalogResponse(phone_no_id, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ê–¢–ê–õ–û–ì–ê (PRODUCT LIST) ===");
        
        // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
        clearUserWaitingState(from);
        
        console.log("Catalog response:", JSON.stringify(message.interactive, null, 2));
        
        // –≠—Ç–æ—Ç —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–¥–∫–æ
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç - order –≤ handleCatalogOrderResponse
        await sendMessage(phone_no_id, from, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑...");
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        clearUserWaitingState(from);
    }
}

// –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
let productsCache = null;
let cacheExpiry = null;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
async function getAllProducts() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        if (productsCache && cacheExpiry && Date.now() < cacheExpiry) {
            console.log("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã");
            return productsCache;
        }
        
        console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ API");
        const response = await axios.get(`${TEMIR_API_BASE}/qr/products`);
        const products = response.data;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ ID
        const productsMap = {};
        products.forEach(product => {
            productsMap[product.api_id] = {
                id: product.api_id,
                api_id: product.api_id,
                title: product.title,
                measure_unit: product.measure_unit_title || '—à—Ç'
            };
        });
        
        // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
        productsCache = productsMap;
        cacheExpiry = Date.now() + (30 * 60 * 1000);
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        return productsMap;
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error.response?.status, error.response?.data);
        return productsCache || {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ ID
async function getProductInfo(productId) {
    try {
        const products = await getAllProducts();
        
        if (products[productId]) {
            console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: ${products[productId].title}`);
            return products[productId];
        } else {
            console.log(`‚ùì –¢–æ–≤–∞—Ä ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ`);
            
            // Fallback - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
            const response = await axios.get(`${TEMIR_API_BASE}/qr/products/${productId}`);
            const product = response.data;
            
            return {
                id: product.id,
                api_id: product.api_id,
                title: product.title,
                measure_unit: product.measure_unit_title || '—à—Ç'
            };
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error.response?.status);
        
        return {
            id: productId,
            title: `–¢–æ–≤–∞—Ä ${productId}`,
            measure_unit: '—à—Ç'
        };
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö
async function getBranchInfo(branchId) {
    try {
        const response = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = response.data;
        
        const branch = restaurants.find(r => r.external_id.toString() === branchId);
        
        if (branch) {
            return {
                id: branch.external_id,
                title: branch.title,
                address: branch.address,
                phone: branch.contacts.find(c => c.type === 'PHONE')?.value,
                whatsapp: branch.contacts.find(c => c.type === 'WHATSAPP')?.value
            };
        }
        
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–µ:', error);
        return null;
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendWhatsAppMessage(phone_no_id, messageData) {
    try {
        const response = await axios({
            method: "POST",
            url: `https://graph.facebook.com/v22.0/${phone_no_id}/messages?access_token=${token}`,
            data: messageData,
            headers: {
                "Content-Type": "application/json"
            }
        });
        
        console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:", response.data);
        return response.data;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:");
        console.error("Status:", error.response?.status);
        console.error("Data:", error.response?.data);
        throw error;
    }
}

// // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
// async function sendCatalog(phone_no_id, to) {
//     console.log("=== –û–¢–ü–†–ê–í–ö–ê –ö–ê–¢–ê–õ–û–ì–ê ===");
    
//     const catalogData = {
//         messaging_product: "whatsapp",
//         to: to,
//         type: "interactive",
//         interactive: {
//             type: "catalog_message",
//             body: {
//                 text: "üç£ –ù–∞—à –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ Yaposhkin Rolls!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–≤–µ–∂–∏–µ –∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è —Å –ª—é–±–æ–≤—å—é! ‚ù§Ô∏è"
//             },
//             footer: {
//                 text: "–î–æ—Å—Ç–∞–≤–∫–∞ 30-40 –º–∏–Ω—É—Ç"
//             },
//             action: {
//                 name: "catalog_message"
//             }
//         }
//     };

//     await sendWhatsAppMessage(phone_no_id, catalogData);
// }

// –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –ß–ê–°–¢–¨ –í –í–ê–®–ï–ú –ö–û–î–ï:
// –ù–∞–π–¥–∏—Ç–µ —Å–µ–∫—Ü–∏—é —Å menuCategories –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –µ—ë –Ω–∞ —ç—Ç–æ:

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ (6 —Å–æ–æ–±—â–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ 12)
const optimizedMenuGroups = [
    // –ì—Ä—É–ø–ø–∞ 1: –†–æ–ª–ª—ã (–ø–µ—Ä–≤—ã–µ 30)
    [
        {
            title: "–†–æ–ª–ª—ã",
            productIds: [
                "71", "46", "54", "58", "63", "62", "60", "61", "49", "48", 
                "47", "50", "53", "72", "67", "70", "68", "69", "52", "51", 
                "57", "64", "56", "59", "66", "65", "55", "38", "36", "37"
            ]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 2: –†–æ–ª–ª—ã (–æ—Å—Ç–∞–≤—à–∏–µ—Å—è) + –¢–µ–ø–ª—ã–µ —Ä–æ–ª–ª—ã + –†–æ–ª–ª—ã –±–µ–∑ —Ä–∏—Å–∞ + –ö—Ä—É–∞—Å—Å–∞–Ω—ã + –°–ª–∞–¥–∫–∏–µ —Ä–æ–ª–ª—ã (30 —Ç–æ–≤–∞—Ä–æ–≤)
    [
        {
            title: "–†–æ–ª–ª—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)",
            productIds: ["41", "35", "42", "44", "45", "43", "40", "39", "34"]
        },
        {
            title: "–¢–µ–ø–ª—ã–µ —Ä–æ–ª–ª—ã",
            productIds: ["24", "26", "33", "28", "25", "27", "29", "30", "23", "31", "32"]
        },
        {
            title: "–†–æ–ª–ª—ã –±–µ–∑ —Ä–∏—Å–∞",
            productIds: ["136", "134", "135"]
        },
        {
            title: "–ö—Ä—É–∞—Å—Å–∞–Ω—ã",
            productIds: ["93", "94", "92"]
        },
        {
            title: "–°–ª–∞–¥–∫–∏–µ —Ä–æ–ª–ª—ã",
            productIds: ["150", "139", "137", "138"]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 3: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–ª—ã + –¢–µ–º–ø—É—Ä–∞ —Ä–æ–ª–ª—ã (15 —Ç–æ–≤–∞—Ä–æ–≤)
    [
        {
            title: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–ª—ã",
            productIds: ["131", "130", "127", "133", "129", "128", "132"]
        },
        {
            title: "–¢–µ–º–ø—É—Ä–∞ —Ä–æ–ª–ª—ã",
            productIds: ["19", "17", "15", "21", "20", "18", "16", "22"]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 4: –°—É—à–∏ –∏ –≥—É–Ω–∫–∞–Ω—ã + –¢–µ–ø–ª—ã–µ —Å–µ—Ç—ã (28 —Ç–æ–≤–∞—Ä–æ–≤)
    [
        {
            title: "–°—É—à–∏ –∏ –≥—É–Ω–∫–∞–Ω—ã",
            productIds: [
                "85", "86", "81", "82", "91", "78", "84", "80", "79", "83", 
                "77", "75", "73", "76", "74", "89", "88", "87", "90"
            ]
        },
        {
            title: "–¢–µ–ø–ª—ã–µ —Å–µ—Ç—ã",
            productIds: ["6", "3", "4", "1", "2", "5"]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 5: –°–µ—Ç—ã (24 —Ç–æ–≤–∞—Ä–∞)
    [
        {
            title: "–°–µ—Ç—ã",
            productIds: [
                "109", "117", "123", "111", "112", "105", "103", "113", "118", 
                "106", "119", "124", "121", "108", "110", "116", "125", "114", 
                "104", "107", "122", "126", "120", "115"
            ]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 6: –°–∞–ª–∞—Ç—ã + –ù–∞–ø–∏—Ç–∫–∏ + –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (26 —Ç–æ–≤–∞—Ä–æ–≤)
    [
        {
            title: "–°–∞–ª–∞—Ç—ã",
            productIds: ["98", "96", "95", "97", "99", "102", "101", "100"]
        },
        {
            title: "–ù–∞–ø–∏—Ç–∫–∏",
            productIds: ["13", "9", "8", "10", "12", "14", "7", "11"]
        },
        {
            title: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ",
            productIds: ["142", "141", "144", "140", "143", "147", "148", "149", "146", "145"]
        }
    ]
];

// –ó–ê–ú–ï–ù–ò–¢–ï –§–£–ù–ö–¶–ò–Æ sendCatalog –ù–ê –≠–¢–£:
async function sendCatalog(phone_no_id, from) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ö–ê–¢–ê–õ–û–ì–ê ===");
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º CATALOG_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const catalogId = process.env.CATALOG_ID;
        if (!catalogId) {
            console.error("‚ùå CATALOG_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
            throw new Error("CATALOG_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const welcomeText = "üç£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Yaposhkin Rolls!\n\n–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞! ‚ù§Ô∏è";
        await sendMessage(phone_no_id, from, welcomeText);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
        const categoryGroups = optimizedMenuGroups;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π product_list
        for (let i = 0; i < categoryGroups.length; i++) {
            const group = categoryGroups[i];
            await sendProductListWithSections(phone_no_id, from, group, i + 1, categoryGroups.length, catalogId);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const finalText = `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞ –∏–∑ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É.`;
        await sendMessage(phone_no_id, from, finalText);
        
        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER, 1800000); // 30 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
        
        console.log("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é");
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        
        // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
        console.log("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–∫ fallback");
        const fallbackCatalogData = {
            messaging_product: "whatsapp",
            to: from,
            type: "interactive",
            interactive: {
                type: "catalog_message",
                body: {
                    text: "üç£ –ù–∞—à –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ Yaposhkin Rolls!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–≤–µ–∂–∏–µ –∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è —Å –ª—é–±–æ–≤—å—é! ‚ù§Ô∏è"
                },
                footer: {
                    text: "–î–æ—Å—Ç–∞–≤–∫–∞ 30-40 –º–∏–Ω—É—Ç"
                },
                action: {
                    name: "catalog_message"
                }
            }
        };
        
        await sendWhatsAppMessage(phone_no_id, fallbackCatalogData);
        
        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–∞–∂–µ –¥–ª—è fallback
        setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER, 1800000); // 30 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
    }
}

// –û–ë–ù–û–í–ò–¢–ï –§–£–ù–ö–¶–ò–Æ sendProductListWithSections –¥–ª—è –ª—É—á—à–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:
async function sendProductListWithSections(phone_no_id, to, categories, groupNumber, totalGroups, catalogId) {
    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è WhatsApp
        const sections = categories.map(category => ({
            title: category.title,
            product_items: category.productIds.map(id => ({
                product_retailer_id: id
            }))
        }));
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        const totalProducts = categories.reduce((sum, cat) => sum + cat.productIds.length, 0);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        let headerText;
        if (categories.length === 1) {
            // –û–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            headerText = `üç£ ${categories[0].title}`;
        } else if (categories.length === 2) {
            // –î–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            headerText = `üç£ ${categories[0].title} –∏ ${categories[1].title}`;
        } else if (categories.length === 3) {
            // –¢—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            headerText = `üç£ ${categories[0].title}, ${categories[1].title} –∏ ${categories[2].title}`;
        } else {
            // –ú–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            const remaining = categories.length - 2;
            headerText = `üç£ ${categories[0].title}, ${categories[1].title} +${remaining} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ (WhatsApp –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã)
        if (headerText.length > 60) {
            headerText = `${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π (${totalProducts} —Ç–æ–≤–∞—Ä–æ–≤)`;
        }
        
        const productListData = {
            messaging_product: "whatsapp",
            to: to,
            type: "interactive",
            interactive: {
                type: "product_list",
                header: {
                    type: "text",
                    text: headerText
                },
                body: {
                    // text: `${totalProducts} —Ç–æ–≤–∞—Ä–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞:`
                    text: `–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞:`
                },
                footer: {
                    text: "Yaposhkin Rolls"
                },
                action: {
                    catalog_id: catalogId,
                    sections: sections
                }
            }
        };
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º product_list:`);
        console.log(`   üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${headerText}`);
        console.log(`   üì¶ –°–µ–∫—Ü–∏–π: ${sections.length}`);
        console.log(`   üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–µ–∫—Ü–∏—è–º
        sections.forEach(section => {
            console.log(`     üì¶ ${section.title}: ${section.product_items.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        });
        
        await sendWhatsAppMessage(phone_no_id, productListData);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ product_list —Å —Å–µ–∫—Ü–∏—è–º–∏:", error);
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å product_list, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const categoryNames = categories.map(cat => cat.title).join(', ');
        const fallbackText = `üì± –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryNames}\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥, –≤—ã–±—Ä–∞–≤ –º–µ–Ω—é –≤ —á–∞—Ç–µ.`;
        await sendMessage(phone_no_id, to, fallbackText);
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(phone_no_id, to, text) {
    const messageData = {
        messaging_product: "whatsapp",
        to: to,
        text: {
            body: text
        }
    };

    return await sendWhatsAppMessage(phone_no_id, messageData);
}

// Flow endpoint –æ–±—Ä–∞–±–æ—Ç–∫–∞
app.post("/flow", async (req, res) => {
    console.log("=== FLOW REQUEST ===");
    console.log("Headers:", JSON.stringify(req.headers, null, 2));
    console.log("Body:", JSON.stringify(req.body, null, 2));

    try {
        const { encrypted_flow_data, encrypted_aes_key, initial_vector } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!encrypted_flow_data || !encrypted_aes_key || !initial_vector) {
            console.log("‚ùå Missing encryption parameters");
            return res.status(421).json({ error: "Missing encryption parameters" });
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        const { decryptedBody, aesKeyBuffer, initialVectorBuffer } = decryptRequest(req.body);
        
        console.log("‚úÖ Decrypted data:", JSON.stringify(decryptedBody, null, 2));

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const responseData = await processFlowData(decryptedBody);

        // –®–∏—Ñ—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        const encryptedResponse = encryptResponse(responseData, aesKeyBuffer, initialVectorBuffer);

        console.log("‚úÖ Sending encrypted response");
        res.setHeader('Content-Type', 'text/plain');
        return res.status(200).send(encryptedResponse);

    } catch (error) {
        console.error("‚ùå Flow endpoint error:", error);
        return res.status(421).json({ error: "Request processing failed" });
    }
});

// –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç Facebook
const decryptRequest = (body) => {
    const { encrypted_aes_key, encrypted_flow_data, initial_vector } = body;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    const privatePem = getPrivateKey();
    if (!privatePem) {
        throw new Error("Private key not found");
    }

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º AES –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É—è RSA
    const decryptedAesKey = crypto.privateDecrypt(
        {
            key: crypto.createPrivateKey(privatePem),
            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
            oaepHash: "sha256",
        },
        Buffer.from(encrypted_aes_key, "base64")
    );

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º Flow –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è AES-GCM
    const flowDataBuffer = Buffer.from(encrypted_flow_data, "base64");
    const initialVectorBuffer = Buffer.from(initial_vector, "base64");
    
    const TAG_LENGTH = 16;
    const encrypted_flow_data_body = flowDataBuffer.subarray(0, -TAG_LENGTH);
    const encrypted_flow_data_tag = flowDataBuffer.subarray(-TAG_LENGTH);

    const decipher = crypto.createDecipheriv(
        "aes-128-gcm",
        decryptedAesKey,
        initialVectorBuffer
    );
    
    decipher.setAuthTag(encrypted_flow_data_tag);

    const decryptedJSONString = Buffer.concat([
        decipher.update(encrypted_flow_data_body),
        decipher.final(),
    ]).toString("utf-8");

    return {
        decryptedBody: JSON.parse(decryptedJSONString),
        aesKeyBuffer: decryptedAesKey,
        initialVectorBuffer,
    };
};

// –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ—Ç Facebook
const encryptResponse = (response, aesKeyBuffer, initialVectorBuffer) => {
    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º initialization vector (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è)
    const flipped_iv = [];
    for (const pair of initialVectorBuffer.entries()) {
        flipped_iv.push(~pair[1]);
    }

    // –®–∏—Ñ—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è AES-GCM
    const cipher = crypto.createCipheriv(
        "aes-128-gcm",
        aesKeyBuffer,
        Buffer.from(flipped_iv)
    );

    const encryptedData = Buffer.concat([
        cipher.update(JSON.stringify(response), "utf-8"),
        cipher.final(),
        cipher.getAuthTag(),
    ]);

    return encryptedData.toString("base64");
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Flow –¥–∞–Ω–Ω—ã—Ö
async function processFlowData(data) {
    console.log("üîÑ Processing flow data:", data);
    
    try {
        const { version, action, flow_token, data: flowData, screen } = data;
        
        console.log(`Processing: version=${version}, action=${action}, screen=${screen}, token=${flow_token}`);
        console.log("Raw flowData:", flowData);

        switch (action) {
            case "ping":
                console.log("üèì Health check request");
                return {
                    data: {
                        status: "active"
                    }
                };

            case "INIT":
                console.log("üöÄ Flow initialization");
                
                if (flow_token && flow_token.includes("new_customer")) {
                    return {
                        screen: "WELCOME_NEW",
                        data: {
                            flow_type: "new_customer",
                            branches: flowData?.branches || []
                        }
                    };
                } else if (flow_token && flow_token.includes("existing_customer")) {
                    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    const customerName = flowData?.customer_name || "";
                    const userAddresses = flowData?.user_addresses || [];
                    const branches = flowData?.branches || [];
                    
                    console.log("üìç User addresses from payload:", userAddresses);
                    console.log("üë§ Customer name from payload:", customerName);
                    console.log("üè™ Branches from payload:", branches);
                    
                    return {
                        screen: "ORDER_TYPE",
                        data: {
                            flow_type: "existing_customer",
                            customer_name: customerName,
                            user_addresses: userAddresses,
                            branches: branches
                        }
                    };
                }
                
                return {
                    screen: "ORDER_TYPE",
                    data: {}
                };

            case "data_exchange":
                console.log("üíæ Data exchange from screen:", screen);
                return await handleDataExchange(screen, flowData, flow_token);

            default:
                console.log("‚ùì Unknown action, returning default response");
                return {
                    data: {
                        status: "active"
                    }
                };
        }
    } catch (error) {
        console.error("‚ùå Flow processing error:", error);
        return {
            data: {
                status: "active"
            }
        };
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ data_exchange –≤ Flow
async function handleDataExchange(screen, data, flow_token) {
    console.log(`üìã Data exchange for screen: ${screen}`, data);
    
    try {
        switch (screen) {
            case "WELCOME_NEW":
                // –ü–µ—Ä–µ—Ö–æ–¥ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "ORDER_TYPE_NEW",
                    data: {
                        flow_type: "new_customer",
                        customer_name: data.customer_name,
                        branches: data.branches
                    }
                };

            case "ORDER_TYPE_NEW":
                // –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "DELIVERY_OPTIONS_NEW",
                    data: {
                        flow_type: "new_customer",
                        customer_name: data.customer_name,
                        order_type: data.order_type,
                        branches: data.branches
                    }
                };

            case "DELIVERY_OPTIONS_NEW":
                // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ flow –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "SUCCESS",
                    data: {
                        extension_message_response: {
                            params: {
                                flow_token: flow_token,
                                flow_type: "new_customer",
                                customer_name: data.customer_name,
                                order_type: data.order_type,
                                branch: data.branch,
                                delivery_address: data.delivery_address
                            }
                        }
                    }
                };

            case "ORDER_TYPE":
                // –ü–µ—Ä–µ—Ö–æ–¥ —Å –ø–µ—Ä–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "DELIVERY_OPTIONS",
                    data: {
                        flow_type: "existing_customer",
                        customer_name: data.customer_name,
                        order_type: data.order_type,
                        user_addresses: data.user_addresses,
                        branches: data.branches
                    }
                };

            case "DELIVERY_OPTIONS":
                // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ flow —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "SUCCESS",
                    data: {
                        extension_message_response: {
                            params: {
                                flow_token: flow_token,
                                flow_type: "existing_customer",
                                customer_name: data.customer_name,
                                order_type: data.order_type,
                                delivery_choice: data.delivery_choice,
                                new_address: data.new_address,
                                branch: data.branch
                            }
                        }
                    }
                };

            default:
                console.log(`‚ùì Unknown screen: ${screen}`);
                return {
                    screen: "ORDER_TYPE",
                    data: {}
                };
        }
    } catch (error) {
        console.error("‚ùå Data exchange error:", error);
        return {
            screen: screen,
            data: {
                error_message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            }
        };
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
function getPrivateKey() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (process.env.PRIVATE_KEY) {
            console.log("üîë Using private key from environment");
            return process.env.PRIVATE_KEY.replace(/\\n/g, '\n');
        }
        
        // –ü–æ—Ç–æ–º –ø—Ä–æ–±—É–µ–º –∏–∑ —Ñ–∞–π–ª–∞
        if (fs.existsSync('./private_key.pem')) {
            console.log("üîë Using private key from file");
            return fs.readFileSync('./private_key.pem', 'utf8');
        }
        
        console.log("‚ùå Private key not found");
        return null;
        
    } catch (error) {
        console.error("‚ùå Error loading private key:", error);
        return null;
    }
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get("/flow", (req, res) => {
    const hasPrivateKey = !!getPrivateKey();
    
    const status = {
        status: "Flow endpoint active",
        timestamp: new Date().toISOString(),
        nodeVersion: process.version,
        encryption: {
            privateKeyLoaded: hasPrivateKey,
            algorithm: "Official Facebook implementation: AES-128-GCM + RSA-OAEP-SHA256",
            supportedCiphers: crypto.getCiphers().filter(c => c.includes('gcm')).slice(0, 5)
        }
    };
    
    console.log("üìä Flow status:", status);
    res.status(200).json(status);
});

// POST endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
app.post("/order-status", async (req, res) => {
    try {
        console.log("=== –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê ===");
        console.log("Request body:", JSON.stringify(req.body, null, 2));

        const { 
            phone, 
            order_id, 
            status, 
            order_type, 
            location_title,
            estimated_time,
            additional_info 
        } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!phone || !order_id || !status) {
            return res.status(400).json({
                success: false,
                error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, order_id, status"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º phone_number_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const phone_no_id = process.env.PHONE_NUMBER_ID;
        if (!phone_no_id) {
            return res.status(500).json({
                success: false,
                error: "PHONE_NUMBER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        const result = await sendOrderStatusNotification(
            phone_no_id, 
            phone, 
            order_id, 
            status, 
            order_type, 
            location_title,
            estimated_time,
            additional_info
        );

        if (result.success) {
            res.status(200).json({
                success: true,
                message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                whatsapp_message_id: result.message_id
            });
        } else {
            res.status(500).json({
                success: false,
                error: result.error
            });
        }

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:", error);
        res.status(500).json({
            success: false,
            error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
async function sendOrderStatusNotification(phone_no_id, customerPhone, orderId, status, orderType = 'pickup', locationTitle = '', estimatedTime = '', additionalInfo = '') {
    try {
        console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ "${status}" –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} –∫–ª–∏–µ–Ω—Ç—É ${customerPhone}`);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        const message = formatOrderStatusMessage(orderId, status, orderType, locationTitle, estimatedTime, additionalInfo);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const response = await sendMessage(phone_no_id, customerPhone, message);

        console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
        
        return {
            success: true,
            message_id: response.messages?.[0]?.id
        };

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ:", error);
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
function formatOrderStatusMessage(orderId, status, orderType, locationTitle, estimatedTime, additionalInfo) {
    const emoji = getStatusEmoji(status);
    const statusText = getStatusText(status);
    
    let message = `${emoji} ${statusText}\n\n`;
    message += `üìã –ó–∞–∫–∞–∑ ‚Ññ${orderId}\n`;

    switch (status.toLowerCase()) {
        case 'confirmed':
        case '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω':
            message += `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!\n\n`;
            if (orderType === 'delivery') {
                message += `üöó –¢–∏–ø: –î–æ—Å—Ç–∞–≤–∫–∞\n`;
                if (estimatedTime) {
                    message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${estimatedTime}\n`;
                }
            } else {
                message += `üè™ –¢–∏–ø: –°–∞–º–æ–≤—ã–≤–æ–∑\n`;
                if (locationTitle) {
                    message += `üìç –§–∏–ª–∏–∞–ª: ${locationTitle}\n`;
                }
                if (estimatedTime) {
                    message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${estimatedTime}\n`;
                }
            }
            message += `\nüìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`;
            break;

        case 'preparing':
        case '–≥–æ—Ç–æ–≤–∏—Ç—Å—è':
            message += `üë®‚Äçüç≥ –ù–∞—à–∏ –ø–æ–≤–∞—Ä–∞ –≥–æ—Ç–æ–≤—è—Ç –≤–∞—à –∑–∞–∫–∞–∑!\n\n`;
            if (estimatedTime) {
                message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${estimatedTime}\n\n`;
            }
            message += `üç£ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏–º —Å –ª—é–±–æ–≤—å—é!`;
            break;

        case 'ready':
        case '–≥–æ—Ç–æ–≤':
            if (orderType === 'delivery') {
                message += `üöó –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É!\n\n`;
                message += `üìç –ö—É—Ä—å–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏ –∫ –≤–∞–º.\n`;
                if (estimatedTime) {
                    message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${estimatedTime}\n`;
                }
                message += `\nüìû –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–±—ã—Ç–∏–µ–º.`;
            } else {
                message += `üéâ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!\n\n`;
                if (locationTitle) {
                    message += `üìç –§–∏–ª–∏–∞–ª: ${locationTitle}\n`;
                }
                message += `üè™ –ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ –∑–∞ –∑–∞–∫–∞–∑–æ–º –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.\n`;
                message += `\nüí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.`;
            }
            break;

        case 'out_for_delivery':
        case '–≤_–¥–æ—Å—Ç–∞–≤–∫–µ':
            message += `üöó –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏!\n\n`;
            message += `üìç –í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.\n`;
            if (estimatedTime) {
                message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: ${estimatedTime}\n`;
            }
            message += `\nüìû –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –∞–¥—Ä–µ—Å—É.`;
            break;

        case 'delivered':
        case '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω':
            message += `‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n\n`;
            message += `üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä Yaposhkin Rolls!\n`;
            message += `‚≠ê –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É –æ –∫–∞—á–µ—Å—Ç–≤–µ –±–ª—é–¥ –∏ —Å–µ—Ä–≤–∏—Å–µ.\n`;
            message += `\nüç£ –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!`;
            break;

        case 'completed':
        case '–≤—ã–ø–æ–ª–Ω–µ–Ω':
            message += `‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n`;
            message += `üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä Yaposhkin Rolls!\n`;
            message += `‚≠ê –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É –æ –∫–∞—á–µ—Å—Ç–≤–µ –±–ª—é–¥ –∏ —Å–µ—Ä–≤–∏—Å–µ.\n`;
            message += `\nüç£ –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!`;
            break;

        case 'cancelled':
        case '–æ—Ç–º–µ–Ω–µ–Ω':
            message += `‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\n\n`;
            if (additionalInfo) {
                message += `üìù –ü—Ä–∏—á–∏–Ω–∞: ${additionalInfo}\n\n`;
            }
            message += `üòî –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.\n`;
            message += `üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.\n`;
            message += `\nüç£ –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!`;
            break;

        case 'delayed':
        case '–∑–∞–¥–µ—Ä–∂–∞–Ω':
            message += `‚è∞ –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–∫–∞–∑–∞\n\n`;
            if (estimatedTime) {
                message += `üïê –ù–æ–≤–æ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${estimatedTime}\n`;
            }
            if (additionalInfo) {
                message += `üìù –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∏: ${additionalInfo}\n`;
            }
            message += `\nüòî –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É.\n`;
            message += `üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`;
            break;

        default:
            message += `üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${status}\n\n`;
            if (additionalInfo) {
                message += `üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${additionalInfo}\n\n`;
            }
            message += `üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`;
    }

    return message;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
function getStatusEmoji(status) {
    const emojiMap = {
        'confirmed': '‚úÖ',
        '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω': '‚úÖ',
        'preparing': 'üë®‚Äçüç≥',
        '–≥–æ—Ç–æ–≤–∏—Ç—Å—è': 'üë®‚Äçüç≥',
        'ready': 'üéâ',
        '–≥–æ—Ç–æ–≤': 'üéâ',
        'out_for_delivery': 'üöó',
        '–≤_–¥–æ—Å—Ç–∞–≤–∫–µ': 'üöó',
        'delivered': '‚úÖ',
        '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': '‚úÖ',
        'completed': '‚úÖ',
        '–≤—ã–ø–æ–ª–Ω–µ–Ω': '‚úÖ',
        'cancelled': '‚ùå',
        '–æ—Ç–º–µ–Ω–µ–Ω': '‚ùå',
        'delayed': '‚è∞',
        '–∑–∞–¥–µ—Ä–∂–∞–Ω': '‚è∞'
    };
    
    return emojiMap[status.toLowerCase()] || 'üìã';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    const statusMap = {
        'confirmed': '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω': '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'preparing': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
        '–≥–æ—Ç–æ–≤–∏—Ç—Å—è': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤',
        '–≥–æ—Ç–æ–≤': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤',
        'out_for_delivery': '–ó–∞–∫–∞–∑ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ',
        '–≤_–¥–æ—Å—Ç–∞–≤–∫–µ': '–ó–∞–∫–∞–∑ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ',
        'delivered': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
        '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'completed': '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        '–≤—ã–ø–æ–ª–Ω–µ–Ω': '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        'cancelled': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
        '–æ—Ç–º–µ–Ω–µ–Ω': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
        'delayed': '–ó–∞–∫–∞–∑ –∑–∞–¥–µ—Ä–∂–∞–Ω',
        '–∑–∞–¥–µ—Ä–∂–∞–Ω': '–ó–∞–∫–∞–∑ –∑–∞–¥–µ—Ä–∂–∞–Ω'
    };
    
    return statusMap[status.toLowerCase()] || `–°—Ç–∞—Ç—É—Å: ${status}`;
}

app.get("/", (req, res) => {
    res.status(200).send("hello this is webhook setup");
});