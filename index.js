const express = require("express");
const body_parser = require("body-parser");
const axios = require("axios");
require('dotenv').config();
const crypto = require('crypto');
const fs = require('fs');
const { MongoClient } = require('mongodb');

const PORT = process.env.PORT || 3000;

const app = express().use(body_parser.json());

const token = process.env.TOKEN;
const mytoken = process.env.MYTOKEN;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TEMIR_API_BASE = 'https://ya.temir.me';

// Flow IDs
const NEW_CUSTOMER_FLOW_ID = '4265839023734503'; // newCustomer
const ORDER_FLOW_ID = '708820881926236'; // order
const NEW_CUSTOMER_FLOW_ID_KY = '1648351135826188'; // newCustomer
const ORDER_FLOW_ID_KY = '1039325028388021'; // order


// MongoDB –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const DB_NAME = process.env.DB_NAME || 'whatsapp_bot';
let db = null;
let userStatesCollection = null;
let userDataForOrderCollection = null;

// –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
const WAITING_STATES = {
    NONE: 'none',                    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    LANG: 'lang',
    FLOW_RESPONSE: 'flow_response',  // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Flow
    LOCATION: 'location',            // –û–∂–∏–¥–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    CATALOG_ORDER: 'catalog_order',   // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
    PAYMENT_CONFIRMATION: 'payment_confirmation'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB
async function initMongoDB() {
    try {
        console.log("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...");
        const client = new MongoClient(MONGODB_URI);
        await client.connect();
        
        db = client.db(DB_NAME);
        userStatesCollection = db.collection('user_states');
        userDataForOrderCollection = db.collection('user_orders');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ phone –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await userStatesCollection.createIndex({ phone: 1 });
        await userDataForOrderCollection.createIndex({ phone: 1 });
        
        // TTL –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (24 —á–∞—Å–∞)
        await userStatesCollection.createIndex(
            { updatedAt: 1 }, 
            { expireAfterSeconds: 86400 }
        );

        await userDataForOrderCollection.createIndex(
            { updatedAt: 1 }, 
            { expireAfterSeconds: 86400 }
        );
        
        console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${DB_NAME}`);
        console.log(`üìã –ö–æ–ª–ª–µ–∫—Ü–∏—è: user_states`);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ MongoDB

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserState(phone) {
    try {
        const userDoc = await userStatesCollection.findOne({ phone });
        return userDoc?.state || null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
        return null;
    }
}

async function getUserLan(phone) {
    try {
        const userDoc = await userStatesCollection.findOne({ phone });
        return userDoc?.lan || null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
        return null;
    }
}

async function getUserOrders(phone) {
    try {
        const userDoc = await userDataForOrderCollection.findOne({ phone });
        return userDoc?.state || null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
        return null;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function setUserState(phone, state) {
    try {
        const now = new Date();
        await userStatesCollection.updateOne(
            { phone },
            {
                $set: {
                    phone,
                    state,
                    updatedAt: now
                },
                $setOnInsert: {
                    createdAt: now
                }
            },
            { upsert: true }
        );
        console.log(`üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
    }
}

async function setUserOrder(phone, state) {
    try {
        const now = new Date();
        await userDataForOrderCollection.updateOne(
            { phone },
            {
                $set: {
                    phone,
                    state,
                    updatedAt: now
                },
                $setOnInsert: {
                    createdAt: now
                }
            },
            { upsert: true }
        );
        console.log(`üíæ –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUserOrders(phone) {
    try {
        await userDataForOrderCollection.deleteOne({ phone });
        console.log(`üóëÔ∏è –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone} —É–¥–∞–ª–µ–Ω–æ`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
    }
}

async function deleteUserState(phone) {
    try {
        await userStatesCollection.deleteOne({ phone });
        console.log(`üóëÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone} —É–¥–∞–ª–µ–Ω–æ`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserWaitingState(phone) {
    try {
        const userDoc = await userStatesCollection.findOne({ phone });
        return userDoc?.waitingState || WAITING_STATES.NONE;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
        return WAITING_STATES.NONE;
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function setUserWaitingState(phone, waitingState, lan) {
    try {
        const now = new Date();
        console.log(`üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${phone}: ${waitingState}`);
        if(waitingState === WAITING_STATES.FLOW_RESPONSE){
            await userStatesCollection.updateOne(
            { phone },
            {
                $set: {
                    phone,
                    waitingState,
                    lan,
                    updatedAt: now
                },
                $setOnInsert: {
                    createdAt: now
                }
            },
            { upsert: true }
        );
        }else{
            await userStatesCollection.updateOne(
            { phone },
            {
                $set: {
                    phone,
                    waitingState,
                    updatedAt: now
                },
                $setOnInsert: {
                    createdAt: now
                }
            },
            { upsert: true }
        );   
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function clearUserWaitingState(phone) {
    try {
        console.log(`‚úÖ –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${phone}`);
        
        await userStatesCollection.updateOne(
            { phone },
            {
                $unset: { waitingState: "" },
                $set: { updatedAt: new Date() }
            }
        );
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${phone}:`, error);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async function getUserStatesStats() {
    try {
        const totalUsers = await userStatesCollection.countDocuments();
        const waitingStates = await userStatesCollection.aggregate([
            {
                $group: {
                    _id: "$waitingState",
                    count: { $sum: 1 }
                }
            }
        ]).toArray();
        
        return {
            totalUsers,
            waitingStates: waitingStates.reduce((acc, item) => {
                acc[item._id || 'none'] = item.count;
                return acc;
            }, {})
        };
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
        return { totalUsers: 0, waitingStates: {} };
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MongoDB
        await initMongoDB();
        
        app.listen(PORT, () => {
            console.log("webhook is listening");
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
        });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook
app.get("/webhook", (req, res) => {
    let mode = req.query["hub.mode"];
    let challenge = req.query["hub.challenge"];
    let token = req.query["hub.verify_token"];

    if (mode && token) {
        if (mode === "subscribe" && token === mytoken) {
            res.status(200).send(challenge);
        } else {
            res.status(403).send("Forbidden");
        }
    }
});

app.post("/webhook", async (req, res) => {
    let body_param = req.body;

    console.log("=== –ü–û–õ–£–ß–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===");
    console.log(JSON.stringify(body_param, null, 2));

    if (body_param.object) {
        console.log("inside body param");
        if (body_param.entry && 
            body_param.entry[0].changes && 
            body_param.entry[0].changes[0].value.messages && 
            body_param.entry[0].changes[0].value.messages[0]) {
            
            let phone_no_id = body_param.entry[0].changes[0].value.metadata.phone_number_id;
            let from = body_param.entry[0].changes[0].value.messages[0].from;
            let message = body_param.entry[0].changes[0].value.messages[0];

            console.log("phone number " + phone_no_id);
            console.log("from " + from);
            console.log("message type:", message.type);
            console.log("message:", JSON.stringify(message, null, 2));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB
            const currentWaitingState = await getUserWaitingState(from);
            console.log(`üë§ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${from}: ${currentWaitingState}`);

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                if (message.type === "location" && currentWaitingState === WAITING_STATES.LOCATION) {
                    // if (currentWaitingState === WAITING_STATES.LOCATION) {
                    //     // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –º—ã –µ–≥–æ –∂–¥–∞–ª–∏
                    //     console.log("üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
                    //     await handleLocationMessage(phone_no_id, from, message);
                    // } else {
                    //     await sendMessage(phone_no_id, from, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.");
                    //     // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    //     console.log("üìç –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
                    // }
                    console.log("üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
                    await handleLocationMessage(phone_no_id, from, message);
                } else if (message.type === "interactive"  && currentWaitingState === WAITING_STATES.FLOW_RESPONSE) {
                    console.log("Interactive message type:", message.interactive.type);
                        // –û—Ç–≤–µ—Ç –æ—Ç Flow –∫–æ–≥–¥–∞ –º—ã –µ–≥–æ –∂–¥–∞–ª–∏
                        console.log("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Flow");
                        await handleFlowResponse(phone_no_id, from, message, body_param);
                    
                } else if (message.type === "order"  && currentWaitingState === WAITING_STATES.CATALOG_ORDER) {
                    // –û—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ order –∫–æ–≥–¥–∞ –º—ã –µ–≥–æ –∂–¥–∞–ª–∏
                    console.log("üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (order)");
                    await handleCatalogOrderResponse(phone_no_id, from, message);
                } 
                else if (message.type === "text" && currentWaitingState === WAITING_STATES.NONE){
                    // –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    console.log("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
                    await sendOrderConfirmationButtons(phone_no_id, from);
                }else if (message.type === "interactive" && 
                   message.interactive.type === "button_reply" && 
                   currentWaitingState === WAITING_STATES.LANG){
                    // –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    console.log("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–Ω–æ–ø–∫–∏");
                    await handleOrderConfirmationButton(phone_no_id, from, message);
                    // await handleIncomingMessage(phone_no_id, from, message);
                }else{

                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
            }

            res.sendStatus(200);
        } else {
            res.sendStatus(404);
        }
    }
});


async function handlePaymentConfirmation(phone_no_id, from, message) {
    try {
        console.log("üí≥ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã");
        
        const userOrders = await getUserOrders(from);
        if (!userOrders) {
            console.log("‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞");
            await sendMessage(phone_no_id, from, "–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑, –æ–∂–∏–¥–∞—é—â–∏–π –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.");
            await clearUserWaitingState(from);
            return;
        }
        
        await sendMessage(phone_no_id, from, "‚úÖ –°–ø–∞—Å–∏–±–æ! –û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑...");
        
        // –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await submitOrder(
            phone_no_id, 
            from, 
            userOrders.orderItems, 
            userOrders.customerData, 
            userOrders.locationId, 
            userOrders.locationTitle, 
            userOrders.orderType, 
            userOrders.finalAmount
        );
        
        
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.");
        await clearUserWaitingState(from);
    }
}

async function handleOrderConfirmationButton(phone_no_id, from, message) {
    try {
        const buttonId = message.interactive.button_reply.id;
        console.log("üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞:", buttonId);
        await handleIncomingMessage(phone_no_id, from, message, buttonId);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function handleLocationMessage(phone_no_id, from, message) {
    try {
        console.log("=== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===");
        
        const location = message.location;
        const longitude = location.longitude;
        const latitude = location.latitude;
        
        console.log(`üìç –ü–æ–ª—É—á–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${latitude}, ${longitude}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB
        const userState = await getUserState(from);
        
        if (!userState) {
            console.log("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.");
            await clearUserWaitingState(from);
            return;
        }
        
        console.log("üë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userState);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º
        await updateCustomerWithLocation(phone_no_id, from, userState, longitude, latitude);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        await clearUserWaitingState(from);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
async function updateCustomerWithLocation(phone_no_id, from, userState, longitude, latitude) {
    try {
        console.log("=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –° –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï–ú ===");
        
        // –ü–æ–ª—É—á–∞–µ–º qr_token
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const qr_token = customerResponse.data.qr_access_token;
        
        console.log("üîë QR Token:", qr_token);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData = {
            firstName: userState.customer_name,
            addresses: [{
                fullAddress: userState.delivery_address,
                office: "",
                floor: "",
                doorcode: "",
                entrance: "",
                comment: "",
                geocoding: {
                    datasource: "yandex",
                    longitude: longitude,
                    latitude: latitude,
                    country: "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω",
                    countrycode: "KG",
                    city: "–ë–∏—à–∫–µ–∫",
                    street: "",
                    house: "",
                    date: ""
                }
            }]
        };
        
        console.log("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", updateData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const updateResponse = await axios.post(
            `${TEMIR_API_BASE}/qr/update-customer/?qr_token=${qr_token}`,
            updateData
        );
        
        console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", updateResponse.data);
        
        // –û–ë–ù–û–í–õ–Ø–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ MongoDB –≤–º–µ—Å—Ç–æ –æ—á–∏—Å—Ç–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        const updatedState = {
            ...userState,
            order_type: 'delivery', // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º delivery
            delivery_choice: 'new', // –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å
            location_processed: true, // –§–ª–∞–≥ —á—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            new_address: userState.delivery_address, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
            preparation_time: userState.preparation_time,
            specific_time: userState.specific_time,
            promo_code: userState.promo_code,
            comment: userState.comment,
            payment_method: userState.payment_method
        };
        
        await setUserState(from, updatedState);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if (userState.flow_type === 'new_customer') {
            const confirmText = `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${userState.customer_name}! üéâ\n\n–í–∞—à –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${userState.delivery_address}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã. –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥! üç£`;
            await sendMessage(phone_no_id, from, confirmText);
        } else {
            const confirmText = `‚úÖ –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüìç ${userState.delivery_address}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
            await sendMessage(phone_no_id, from, confirmText);
        }
        
        // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        await setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER);

        console.log(`after location userState is setUserWaitingState ${from} : ${WAITING_STATES.CATALOG_ORDER}`)
        
        await sendCatalog(phone_no_id, from);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", error);
        
        let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.";
        if (error.response?.status === 400) {
            errorMessage = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        } else if (error.response?.status === 404) {
            errorMessage = "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.";
        }
        
        await sendMessage(phone_no_id, from, errorMessage);
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await deleteUserState(from);
        await clearUserWaitingState(from);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
async function handleIncomingMessage(phone_no_id, from, message, lan) {
    console.log("=== –ü–†–û–í–ï–†–ö–ê –ö–õ–ò–ï–ù–¢–ê ===");
    
    const messageText = message.text?.body?.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}: ${messageText || '–Ω–µ —Ç–µ–∫—Å—Ç'}`);
    
    await checkCustomerAndSendFlow(phone_no_id, from, lan);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ Flow
async function checkCustomerAndSendFlow(phone_no_id, from, lan) {
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${from}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Flow
        const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = restaurantsResponse.data;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª–∏–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–æ–≤
        const branches = restaurants.map(restaurant => ({
            id: restaurant.external_id.toString(),
            title: `üè™ ${restaurant.title}`
        }));
        
        console.log("üè™ –§–∏–ª–∏–∞–ª—ã –¥–ª—è Flow:", branches);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ Temir
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const customerData = customerResponse.data;
        
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:', customerData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å–∞ —É –∫–ª–∏–µ–Ω—Ç–∞
        const hasAddresses = customerData.customer.addresses && customerData.customer.addresses.length > 0;
        const isNewCustomer = !hasAddresses || 
                             !customerData.customer.first_name || 
                             customerData.customer.first_name === '–ò–º—è';

        if (isNewCustomer) {
            console.log('üÜï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow');
            if(lan == 'kg'){
                await sendNewCustomerFlowKy(phone_no_id, from, branches);    
            }else{
                await sendNewCustomerFlow(phone_no_id, from, branches);
            }
        } else {
            console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Flow —Å –∞–¥—Ä–µ—Å–∞–º–∏');
            if(lan == 'kg'){
            await sendExistingCustomerFlowKy(phone_no_id, from, customerData.customer, branches);    
            }else{
                await sendExistingCustomerFlow(phone_no_id, from, customerData.customer, branches);
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Flow
        await setUserWaitingState(from, WAITING_STATES.FLOW_RESPONSE, lan);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API - –ø–æ–ª—É—á–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow
        try {
            const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
            const restaurants = restaurantsResponse.data;
            const branches = restaurants.map(restaurant => ({
                id: restaurant.external_id.toString(),
                title: `üè™ ${restaurant.title}`
            }));
            
            console.log('üÜï –û—à–∏–±–∫–∞ API - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow');
            await sendNewCustomerFlow(phone_no_id, from, branches);
            await setUserWaitingState(from, WAITING_STATES.FLOW_RESPONSE);
        } catch (fallbackError) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–æ–≤:', fallbackError);
            await sendMessage(phone_no_id, from, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Flow –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
async function sendNewCustomerFlow(phone_no_id, from, branches) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê FLOW –î–õ–Ø –ù–û–í–´–• –ö–õ–ò–ï–ù–¢–û–í ===");
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üç£ Yaposhkin Rolls"
            },
            body: {
                text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
            },
            footer: {
                text: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `new_customer_${Date.now()}`,
                    flow_id: NEW_CUSTOMER_FLOW_ID,
                    flow_cta: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                    flow_action: "navigate",
                    flow_action_payload: {
                        screen: "WELCOME_NEW",
                        data: {
                            flow_type: "new_customer",
                            branches: branches
                        }
                    }
                }
            }
        }
    };

    await sendWhatsAppMessage(phone_no_id, flowData);
}

async function sendNewCustomerFlowKy(phone_no_id, from, branches) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê FLOW –î–õ–Ø –ù–û–í–´–• –ö–õ–ò–ï–ù–¢–û–í ===");
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üç£ Yaposhkin Rolls"
            },
            body: {
                text: "–ö–æ—à –∫–µ–ª–∏“£–∏–∑!"
            },
            footer: {
                text: "–ö–∞—Ç—Ç–æ–æ —Ñ–æ—Ä–º–∞—Å—ã–Ω —Ç–æ–ª—Ç—É—Ä—É–Ω—É–∑"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `new_customer_${Date.now()}`,
                    flow_id: NEW_CUSTOMER_FLOW_ID,
                    flow_cta: "–ö–∞—Ç—Ç–æ–æ",
                    flow_action: "navigate",
                    flow_action_payload: {
                        screen: "WELCOME_NEW",
                        data: {
                            flow_type: "new_customer",
                            branches: branches
                        }
                    }
                }
            }
        }
    };

    await sendWhatsAppMessage(phone_no_id, flowData);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Flow –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
async function sendExistingCustomerFlow(phone_no_id, from, customer, branches) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê FLOW –î–õ–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ö–õ–ò–ï–ù–¢–û–í ===");
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è dropdown
    const addresses = customer.addresses.map((addr) => ({
        id: `address_${addr.id}`,
        title: addr.full_address
    }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å"
    addresses.push({
        id: "new",
        title: "‚ûï –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å"
    });
    
    console.log("üìç –ê–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞:", addresses);
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
            },
            body: {
                text: `–ü—Ä–∏–≤–µ—Ç, ${customer.first_name}!`
            },
            footer: {
                text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∞–¥—Ä–µ—Å"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `existing_customer_${Date.now()}`,
                    flow_id: ORDER_FLOW_ID,
                    flow_cta: "–ó–∞–∫–∞–∑–∞—Ç—å",
                    flow_action: "navigate",
                    flow_action_payload: {
                        screen: "ORDER_TYPE",
                        data: {
                            flow_type: "existing_customer",
                            customer_name: customer.first_name,
                            user_addresses: addresses,
                            branches: branches
                        }
                    }
                }
            }
        }
    };

    await sendWhatsAppMessage(phone_no_id, flowData);
}

async function sendExistingCustomerFlowKy(phone_no_id, from, customer, branches) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê FLOW –î–õ–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ö–õ–ò–ï–ù–¢–û–í ===");
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è dropdown
    const addresses = customer.addresses.map((addr) => ({
        id: `address_${addr.id}`,
        title: addr.full_address
    }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å"
    addresses.push({
        id: "new",
        title: "‚ûï –ñ–∞–Ω—ã –¥–∞—Ä–µ–∫"
    });
    
    console.log("üìç –ê–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞:", addresses);
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üõí –ó–∞–∫–∞–∑ –±–µ—Ä—É—É"
            },
            body: {
                text: `–°–∞–ª–∞–º, ${customer.first_name}!`
            },
            footer: {
                text: "–§–æ—Ä–º–∞ —Ç–æ–ª—Ç—É—Ä—É–Ω—É–∑"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `existing_customer_${Date.now()}`,
                    flow_id: ORDER_FLOW_ID_KY,
                    flow_cta: "–ó–∞–∫–∞–∑ –±–µ—Ä—É—É",
                    flow_action: "navigate",
                    flow_action_payload: {
                        screen: "ORDER_TYPE",
                        data: {
                            flow_type: "existing_customer",
                            customer_name: customer.first_name,
                            user_addresses: addresses,
                            branches: branches
                        }
                    }
                }
            }
        }
    };

    await sendWhatsAppMessage(phone_no_id, flowData);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ Flow
async function handleFlowResponse(phone_no_id, from, message, body_param) {
    try {
        console.log("=== –û–ë–†–ê–ë–û–¢–ö–ê FLOW –û–¢–í–ï–¢–ê ===");
        const flowResponse = JSON.parse(message.interactive.nfm_reply.response_json);
        const customerProfile = body_param.entry[0].changes[0].value.contacts[0].profile.name;
        
        console.log('–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:', from);
        console.log('–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è WhatsApp:', customerProfile);
        console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ Flow:', flowResponse);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø Flow –ø–æ –¥–∞–Ω–Ω—ã–º
        if (flowResponse.flow_type === 'new_customer') {
            await handleNewCustomerRegistration(phone_no_id, from, flowResponse);
        } else if (flowResponse.flow_type === 'existing_customer') {
            await handleExistingCustomerOrder(phone_no_id, from, flowResponse);
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø flow - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
            console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø Flow, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥");
            await sendMessage(phone_no_id, from, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ flow!");
            
            // await setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER);
            
            // await sendCatalog(phone_no_id, from);
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Flow –æ—Ç–≤–µ—Ç–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        await clearUserWaitingState(from);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function handleNewCustomerRegistration(phone_no_id, from, data) {
    try {
        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', data);

        // const lan = await getUserLan(from);

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        if (data.order_type === 'delivery' && data.delivery_address) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ MongoDB
            const userState = {
                flow_type: 'new_customer',
                customer_name: data.customer_name,
                delivery_address: data.delivery_address,
                preparation_time: data.preparation_time,
            specific_time: data.specific_time,
            promo_code: data.promo_code,
            comment: data.comment,
            payment_method: data.payment_method
            };
            
            await setUserState(from, userState);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            await setUserWaitingState(from, WAITING_STATES.LOCATION);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            await sendLocationRequest(phone_no_id, from, data.customer_name);
        } else {
            // –°–∞–º–æ–≤—ã–≤–æ–∑ - —Å—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
            await registerCustomerWithoutLocation(phone_no_id, from, data);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        await sendMessage(phone_no_id, from, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        await clearUserWaitingState(from);
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞)
async function registerCustomerWithoutLocation(phone_no_id, from, data) {
    try {
        console.log("=== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê –ë–ï–ó –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===");
        const lan = await getUserLan(from);
        // –ü–æ–ª—É—á–∞–µ–º qr_token
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const qr_token = customerResponse.data.qr_access_token;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∏–º—è)
        const updateData = {
            firstName: data.customer_name
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const updateResponse = await axios.post(
            `${TEMIR_API_BASE}/qr/update-customer/?qr_token=${qr_token}`,
            updateData
        );
        
        console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", updateResponse.data);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirmText = `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${data.customer_name}! üéâ\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞! üç£`;
        if(lan === 'kg'){
            confirmText = `–ö–∞—Ç—Ç–∞–ª–≥–∞–Ω—ã“£—ã–∑ “Ø—á“Ø–Ω —Ä–∞—Ö–º–∞—Ç, ${data.customer_name}! üéâ\n\n–°–∏–∑ –∞–ª—ã–ø –∫–µ—Ç“Ø“Ø–Ω“Ø —Ç–∞–Ω–¥–∞–¥—ã“£—ã–∑.\n\n–≠–º–∏ –±–∏–∑–¥–∏–Ω –∫–∞—Ç–∞–ª–æ–≥–¥–æ–Ω —Ç–∞–º–∞–∫—Ç–∞—Ä–¥—ã —Ç–∞–Ω–¥–∞“£—ã–∑! üç£`;
        }
        await sendMessage(phone_no_id, from, confirmText);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        await setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
        await sendCatalog(phone_no_id, from);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        await clearUserWaitingState(from);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function handleExistingCustomerOrder(phone_no_id, from, data) {
    try {
        const lan = await getUserLan(from);
        console.log('üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', data);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ MongoDB
        const userState = {
            flow_type: 'existing_customer',
            order_type: data.order_type,
            delivery_choice: data.delivery_choice,
            new_address: data.new_address,
            branch: data.branch,
            customer_name: data.customer_name,
            preparation_time: data.preparation_time,
            specific_time: data.specific_time,
            promo_code: data.promo_code,
            comment: data.comment,
            payment_method: data.payment_method
        };
        
        await setUserState(from, userState);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–ª –∫–ª–∏–µ–Ω—Ç
        if (data.order_type === 'delivery' && data.delivery_choice === 'new' && data.new_address) {
            console.log('üìç –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–æ—Å—Ç–∞–≤–∫—É —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º:', data.new_address);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –ù–û –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –î–ê–ù–ù–´–ï
            const updatedUserState = {
                flow_type: 'existing_customer',
                customer_name: data.customer_name || '–ö–ª–∏–µ–Ω—Ç',
                delivery_address: data.new_address,
                // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                order_type: data.order_type,
                delivery_choice: data.delivery_choice,
                new_address: data.new_address,
                branch: data.branch,
                preparation_time: data.preparation_time,
                specific_time: data.specific_time,
                promo_code: data.promo_code,
                comment: data.comment,
                payment_method: data.payment_method
            };
            
            await setUserState(from, updatedUserState);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            await setUserWaitingState(from, WAITING_STATES.LOCATION);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            await sendLocationRequest(phone_no_id, from, data.customer_name);
            
        } else {
            console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥');
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
            let confirmText;
            if (data.order_type === 'delivery') {
                if(lan==='kg'){
                    confirmText = `‚úÖ –≠“£ —Å–æ–Ω—É–Ω! –ó–∞–∫–∞–∑ —Ç–∞–Ω–¥–∞–ª–≥–∞–Ω –¥–∞—Ä–µ–∫–∫–µ –∂–µ—Ç–∫–∏—Ä–∏–ª–µ—Ç.\n\n${data.user_addresses.find(adress => adress.id === data.delivery_choice).title}\n\n–ö–∞—Ç–∞–ª–æ–≥–¥–æ–Ω —Ç–∞–º–∞–∫—Ç–∞—Ä–¥—ã —Ç–∞–Ω–¥–∞“£—ã–∑:`;
                }else{
                    confirmText = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.\n\n${data.user_addresses.find(adress => adress.id === data.delivery_choice).title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
                }
            } else {
                if(lan==='kg'){
                confirmText = `‚úÖ –ê–±–¥–∞–Ω –∂–∞–∫—à—ã! –°–∏–∑ –∞–ª—ã–ø –∫–µ—Ç“Ø“Ø–Ω“Ø —Ç–∞–Ω–¥–∞–¥—ã“£—ã–∑.\n\n${data.branches.find(branch => branch.id === data.branch).title}\n\n–ö–∞—Ç–∞–ª–æ–≥–¥–æ–Ω —Ç–∞–º–∞–∫—Ç–∞—Ä–¥—ã —Ç–∞–Ω–¥–∞“£—ã–∑:`;
                }else{
                    confirmText = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.\n\n${data.branches.find(branch => branch.id === data.branch).title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
                }
            }
            
            await sendMessage(phone_no_id, from, confirmText);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            await setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
            await sendCatalog(phone_no_id, from);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
        await sendMessage(phone_no_id, from, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        await clearUserWaitingState(from);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function sendLocationRequest(phone_no_id, from, customerName) {
    console.log("=== –ó–ê–ü–†–û–° –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===");

    const lan = await getUserLan(from);
    const locationText = `–°–ø–∞—Å–∏–±–æ, ${customerName}! üìç\n\n–î–ª—è —Ç–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.`;
    if(lan==='kg'){
        locationText = `–†–∞—Ö–º–∞—Ç, ${customerName}! üìç\n\n–¢–∞–∫ –∂–µ—Ç–∫–∏—Ä“Ø“Ø “Ø—á“Ø–Ω –∂–∞–π–≥–∞—à–∫–∞–Ω –∂–µ—Ä–∏“£–∏–∑–¥–∏ –±”©–ª“Ø—à“Ø“£“Ø–∑.`;
    }
    
    await sendMessage(phone_no_id, from, locationText);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ order
async function handleCatalogOrderResponse(phone_no_id, from, message) {
    const lan = await getUserLan(from);
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ê–¢–ê–õ–û–ì–ê (ORDER FORMAT) ===");
        console.log("Order message:", JSON.stringify(message, null, 2));
        
        const order = message.order;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        let orderSummary = lan === 'kg' ? "üõí –°–∏–∑–¥–∏–Ω –∑–∞–∫–∞–∑—ã–Ω—ã–∑:\n\n" :"üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n";
        let totalAmount = 0;
        let orderItems = [];
        
        if (order && order.product_items) {
            console.log("=== –î–ï–¢–ê–õ–ò –¢–û–í–ê–†–û–í ===");
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            for (let index = 0; index < order.product_items.length; index++) {
                const item = order.product_items[index];
                console.log(`–¢–æ–≤–∞—Ä ${index + 1}:`, JSON.stringify(item, null, 2));
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ API
                const productInfo = await getProductInfo(item.product_retailer_id);
                
                const productName = productInfo.title || `–¢–æ–≤–∞—Ä ${item.product_retailer_id}`;
                const productId = productInfo.api_id;
                const itemPrice = parseFloat(item.item_price) || 0;
                const itemTotal = itemPrice * item.quantity;
                
                console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${productName}`);
                
                orderSummary += `${index + 1}. ${productName}\n`;
                orderSummary += lan === 'kg' ? `–î–∞–∞–Ω–∞—Å—ã: ${item.quantity} ${productInfo.measure_unit || '—à—Ç'}\n` : `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} ${productInfo.measure_unit || '—à—Ç'}\n`;
                orderSummary += lan === 'kg' ? `–ë–∞–∞—Å—ã: ${itemPrice} KGS x ${item.quantity} = ${itemTotal} KGS\n\n` : `–¶–µ–Ω–∞: ${itemPrice} KGS x ${item.quantity} = ${itemTotal} KGS\n\n`;
                
                totalAmount += itemTotal;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∑–∞–∫–∞–∑–∞
                orderItems.push({
                    id: parseInt(productId),
                    title: productName,
                    quantity: item.quantity,
                    priceWithDiscount: null,
                    dealDiscountId: null,
                    modifierGroups: []
                });
            }
        }
        
        console.log("üì¶ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:", orderItems);
        orderSummary += lan === 'kg' ? `üí∞ –ñ–∞–ª–ø—ã –Ω–∞—Ä–∫—ã: ${totalAmount} KGS\n\n` : `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalAmount} KGS\n\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ MongoDB
        const userState = await getUserState(from);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        await calculateDeliveryAndSubmitOrder(phone_no_id, from, orderItems, totalAmount, orderSummary, userState);
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ order –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        await clearUserWaitingState(from);
    }
}

// –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function calculateDeliveryAndSubmitOrder(phone_no_id, from, orderItems, totalAmount, orderSummary, userState) {
    const lan = await getUserLan(from);
    try {
        console.log("=== –†–ê–°–ß–ï–¢ –î–û–°–¢–ê–í–ö–ò –ò –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===");
        console.log("User state from parameter:", userState);
        
        // –ï—Å–ª–∏ userState –ø—É—Å—Ç–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ MongoDB
        if (!userState) {
            console.log("‚ö†Ô∏è User state is null, trying to get from MongoDB");
            userState = await getUserState(from);
            console.log("User state from MongoDB:", userState);
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
        if (!userState) {
            console.log("‚ö†Ô∏è No user state found, defaulting to pickup");
            userState = {
                order_type: 'pickup',
                flow_type: 'fallback'
            };
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const customerData = customerResponse.data;
        
        let deliveryCost = 0;
        let locationId = null;
        let locationTitle = "";
        let orderType = userState.order_type || "pickup"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º–æ–≤—ã–≤–æ–∑
        let deliveryAddress = "";

        console.log(`üìã Order type from state: ${orderType}`);
        console.log(`üìã Full userState:`, userState);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
        if (orderType === 'delivery') {
            console.log("üöö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É");
            
            let address = null;
            let tempLat = null;
            let tempLon = null;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å
            if (userState.delivery_choice === 'new' || userState.location_processed) {
                // –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å - –∏—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
                const addresses = customerData.customer.addresses || [];
                address = addresses[addresses.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π
                deliveryAddress = userState.new_address || userState.delivery_address || address?.full_address || "";
                console.log(`üìç Using new address: ${deliveryAddress}`);
                console.log(`üìç Address object:`, address);
                
                if (address?.geocoding_json) {
                    console.log(`üìç Address latitude: ${address.geocoding_json.latitude}`);
                    tempLat = address.geocoding_json.latitude;
                    console.log(`üìç Address longitude: ${address.geocoding_json.longitude}`);
                    tempLon = address.geocoding_json.longitude;
                }
            } else {
                // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
                const addressIndex = parseInt(userState.delivery_choice.replace('address_', ''));
                address = customerData.customer.addresses.find(item => item.id == addressIndex);
                deliveryAddress = address?.full_address || "";
                console.log(`üìç Using existing address index ${addressIndex}: ${deliveryAddress}`);
                console.log(`üìç Address object:`, address);
                
                if (address?.geocoding_json) {
                    console.log(`üìç Address latitude: ${address.geocoding_json.latitude}`);
                    tempLat = address.geocoding_json.latitude;
                    console.log(`üìç Address longitude: ${address.geocoding_json.longitude}`);
                    tempLon = address.geocoding_json.longitude;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (!tempLat || !tempLon) {
                console.log("‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏");
                await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                await deleteUserState(from);
                await clearUserWaitingState(from);
                return;
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
            const lat = tempLat;
            const lon = tempLon;
            
            console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏: ${lat}, ${lon}`);
            
            try {
                const deliveryResponse = await axios.get(
                    `${TEMIR_API_BASE}/qr/delivery/?lat=${lat}&lon=${lon}`
                );
                
                console.log("üöö –û—Ç–≤–µ—Ç delivery API:", deliveryResponse.data);
                
                if (deliveryResponse.data[0]) {
                    deliveryCost = deliveryResponse.data[0].delivery_cost || 0;
                    locationId = deliveryResponse.data[0].restaurant_id;
                    locationTitle = deliveryResponse.data[0].title || "–†–µ—Å—Ç–æ—Ä–∞–Ω";
                } else {
                    // –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                    console.log("‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É");
                    await sendMessage(phone_no_id, from, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                    await deleteUserState(from);
                    await clearUserWaitingState(from);
                    return; 
                }
            } catch (deliveryError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:", deliveryError);
                await sendMessage(phone_no_id, from, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                await deleteUserState(from);
                await clearUserWaitingState(from);
                return;
            }
        } else {
            // –ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ - –≤—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª–∏–∞–ª
            console.log("üè™ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑");
            
            if (userState?.branch) {
                // –§–∏–ª–∏–∞–ª –≤—ã–±—Ä–∞–Ω –≤ Flow
                const branchInfo = await getBranchInfo(userState.branch);
                if (branchInfo) {
                    locationId = parseInt(userState.branch);
                    locationTitle = branchInfo.title;
                } else {
                    console.log("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                    await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                    await deleteUserState(from);
                    await clearUserWaitingState(from);
                    return;
                }
            } else {
                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
                try {
                    const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
                    const restaurants = restaurantsResponse.data;
                    
                    if (restaurants.length > 0) {
                        const selectedBranch = restaurants[0];
                        locationId = selectedBranch.external_id;
                        locationTitle = selectedBranch.title;
                    } else {
                        console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤");
                        await sendMessage(phone_no_id, from, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                        await deleteUserState(from);
                        await clearUserWaitingState(from);
                        return;
                    }
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤:", error);
                    await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                    await deleteUserState(from);
                    await clearUserWaitingState(from);
                    return;
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å locationId
        if (!locationId) {
            console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞");
            await sendMessage(phone_no_id, from, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
            await deleteUserState(from);
            await clearUserWaitingState(from);
            return;
        }
        
        const finalAmount = totalAmount + deliveryCost;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        let costMessage = orderSummary;
        
        if (orderType === "delivery") {
            costMessage += lan === 'kg' ? `üöö –ñ–µ—Ç–∫–∏—Ä“Ø“Ø –±–∞–∞—Å—ã: ${deliveryCost} KGS\n`: `üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryCost} KGS\n`;
            costMessage += lan === 'kg' ? `üìç –ñ–µ—Ç–∫–∏—Ä“Ø“Ø –¥–∞—Ä–µ–≥–∏: ${deliveryAddress}\n\n`: `üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryAddress}\n\n`;
        } else {
            costMessage += lan === 'kg' ? `üè™ –ê–ª—ã–ø –∫–µ—Ç“Ø“Ø: 0 —Å–æ–º\n` : `üè™ –°–∞–º–æ–≤—ã–≤–æ–∑: 0 KGS\n`;
            costMessage += `üìç –§–∏–ª–∏–∞–ª: ${locationTitle}\n\n`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
    if (userState.payment_method === 'transfer') {
        costMessage += lan === 'kg' ? `üí≥ –¢”©–ª”©”© —ã–∫–º–∞—Å—ã: –ö–æ—Ç–æ—Ä—É—É\n` : `üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ü–µ—Ä–µ–≤–æ–¥\n`;
    } else {
        costMessage += lan === 'kg' ? `üíµ –¢”©–ª”©”© —ã–∫–º–∞—Å—ã: –ñ–µ—Ç–∫–∏—Ä“Ø“Ø –±–æ—é–Ω—á–∞ –Ω–∞–∫—Ç–∞–ª–∞–π –∞–∫—á–∞\n\n` : `üíµ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n`;
    }

    if (userState.preparation_time === 'specific' && userState.specific_time) {
        costMessage += lan === 'kg' ? `‚è∞ –ë—ã—à—ã—Ä—É—É —É–±–∞–∫—Ç—ã—Å—ã: ${userState.specific_time}\n` : `‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${userState.specific_time}\n`;
    } else {
        costMessage += lan === 'kg' ? `‚è∞ –î–∞—è—Ä–¥–æ–æ —É–±–∞–∫—Ç—ã—Å—ã: –º“Ø–º–∫“Ø–Ω –±–æ–ª—É—à—É–Ω—á–∞ —Ç–µ–∑–∏—Ä—ç—ç–∫\n` : `‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (userState.promo_code) {
        costMessage += `üé´ –ü—Ä–æ–º–æ–∫–æ–¥: ${userState.promo_code}\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if (userState.comment) {
        costMessage += `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${userState.comment}\n`;
    }
        
        costMessage += lan === 'kg' ? `üí∞ –ñ–∞–ª–ø—ã –Ω–∞—Ä–∫—ã: ${finalAmount} —Å–æ–º\n\n` : `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${finalAmount} KGS\n\n`;
        if (userState.payment_method === 'transfer') {
        costMessage += lan === 'kg' ? `üí≥ –¢”©–ª”©”© —ã–∫–º–∞—Å—ã: –ö–æ—Ç–æ—Ä—É—É, QR –∫–æ–¥—É–Ω –∂”©–Ω”©—Ç“Ø“Ø...\n` : `üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ü–µ—Ä–µ–≤–æ–¥, –æ–ø—Ä–∞–≤–∫–∞ QR –∫–æ–¥–∞...\n`;
    } else {
        costMessage += lan === 'kg' ? `‚è≥ –ë—É–π—Ä—É—Ç–º–∞“£—ã–∑ –∏—à—Ç–µ—Ç–∏–ª“Ø“Ø–¥”©...` : `‚è≥ –û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑...`;
    }
        
        await sendMessage(phone_no_id, from, costMessage);

        if (userState.payment_method === 'transfer') {
            // await setUserWaitingState(from, WAITING_STATES.PAYMENT_CONFIRMATION);
            const userOrders = {
            orderItems : orderItems, 
            customerData : customerData, 
            locationId : locationId, 
            locationTitle : locationTitle, 
            orderType : orderType, 
            finalAmount : finalAmount
            };
            await setUserOrder(from, userOrders);
            await sendPaymentQRCodeImproved(phone_no_id, from, finalAmount)
    } 
    await submitOrder(phone_no_id, from, orderItems, customerData, locationId, locationTitle, orderType, finalAmount);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
        await sendMessage(phone_no_id, from, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.");
        await deleteUserState(from);
        await deleteUserOrders(from);
        await clearUserWaitingState(from);
    }

}

async function sendOrderConfirmationButtons(phone_no_id, to) {
    try {
        const buttonsMessage = {
            messaging_product: "whatsapp",
            to: to,
            type: "interactive",
            interactive: {
                type: "button",
                header: {
                    type: "text",
                    text: "–ö–æ—à –∫–µ–ª–∏–Ω–∏–∑!"
                },
                body: {
                    text: "üìã –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞–Ω—ã–∑.\n\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."
                },
                footer: {
                    text: "Yaposhkin Rolls"
                },
                action: {
                    buttons: [
                        {
                            type: "reply",
                            reply: {
                                id: "kg",
                                title: "–ö—ã—Ä–≥—ã–∑ —Ç–∏–ª"
                            }
                        },
                        {
                            type: "reply",
                            reply: {
                                id: "ru",
                                title: "–†—É—Å—Å–∫–∏–π"
                            }
                        }
                    ]
                }
            }
        };
        
        await setUserWaitingState(to, WAITING_STATES.LANG);

        await sendWhatsAppMessage(phone_no_id, buttonsMessage);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", error);
        
        // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const fallbackMessage = "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.";
        await sendMessage(phone_no_id, to, fallbackMessage);
    }
}

async function sendPaymentQRCodeImproved(phone_no_id, to, amount) {
    try {
        console.log("üí≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã");
        
        const qrImageUrl = "https://yaposhkinrolls.com/image-proxy-new/460x460,q85,spFLp372BcVbVX3LkpozjsUzn_ZkOP_vM1B6xzIL8Ey4/https://storage.yandexcloud.net/quickrestobase/ve738/offer/681b464f-8e8d-4b5e-b96a-c2628eaf7a52.png";
        const paymentPhone = "+996709063676";
        const paymentRecipient = "–≠–ú–ò–†–õ–ê–ù –≠.";
        
        const imageMessage = {
            messaging_product: "whatsapp",
            to: to,
            type: "image",
            image: {
                link: qrImageUrl,
                caption: `üí≥ QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${amount} KGS\nüì± ${paymentPhone}\nüë§ ${paymentRecipient}\n`
            }
        };
        
        await sendWhatsAppMessage(phone_no_id, imageMessage);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR –∫–æ–¥–∞:", error);
        
        // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        const paymentPhone = "+996709063676";
        const paymentRecipient =  "–≠–ú–ò–†–õ–ê–ù –≠.";
        
        const fallbackMessage = `üí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º:\n\nüì± ${paymentPhone}\nüë§ ${paymentRecipient}\n\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${amount} KGS\n`;
        await sendMessage(phone_no_id, to, fallbackMessage);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ API
async function submitOrder(phone_no_id, from, orderItems, customerData, locationId, locationTitle, orderType, finalAmount) {
    try {
        console.log("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ API");
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è preorder
        const preorderData = {
            locationId: parseInt(locationId),
            locationTitle: locationTitle,
            type: orderType,
            customerContact: {
                firstName: "Test",
                comment: "Test",
                contactMethod: {
                    type: "phoneNumber",
                    value: from
                }
            },
            orderDueDateDelta: 0, // –ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ
            guests: [{
                orderItems: orderItems
            }],
            paymentSumWithDiscount: null
        };
        
        console.log("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è preorder:", JSON.stringify(preorderData, null, 2));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ API
        const preorderResponse = await axios.post(
            `${TEMIR_API_BASE}/qr/preorder/?qr_token=${customerData.qr_access_token}`,
            preorderData
        );
        
        console.log("‚úÖ –û—Ç–≤–µ—Ç preorder API:", preorderResponse.data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ –¥–∞–∂–µ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ 200
        if (preorderResponse.data.error) {
            console.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:", preorderResponse.data.error);
            throw {
                response: {
                    status: 200,
                    data: preorderResponse.data
                }
            };
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await sendOrderSuccessMessage(phone_no_id, from, preorderResponse.data, orderType, finalAmount, locationTitle);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await deleteUserState(from);
        await clearUserWaitingState(from);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ API:', error);
        
        let errorMessage = '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        if (error.response?.data?.error?.description) {
            const errorDescription = error.response.data.error.description;
            
            if (errorDescription.includes("Location is closed")) {
                // –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç
                console.log("üîí –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç");
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
                const workingHours = await getLocationWorkingHours(locationId);
                
                if (orderType === 'delivery') {
                    errorMessage = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n`;
                    errorMessage += `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n`;
                    if (workingHours) {
                        errorMessage += `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${workingHours}\n\n`;
                    }
                    errorMessage += `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
                } else {
                    errorMessage = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n`;
                    errorMessage += `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n`;
                    if (workingHours) {
                        errorMessage += `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${workingHours}\n\n`;
                    }
                    errorMessage += `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
                }
            } else if (errorDescription.includes("out of stock") || errorDescription.includes("unavailable")) {
                // –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                errorMessage = `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n`;
                errorMessage += `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è.`;
            } else if (errorDescription.includes("SoldOutProductException")) {
    const productIds = error.response.data.error.productIds;
    
    const unavailableItems = productIds
        .map(productId => orderItems.find(order => productId === order.id))
        .filter(item => item) // —É–±–∏—Ä–∞–µ–º undefined
        .map(item => item.title)
        .join('\n');
    
    errorMessage = `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n${unavailableItems}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è.`;
}
            else {
                // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API
                errorMessage = `‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${errorDescription}\n\n`;
                errorMessage += `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.`;
            }
        } else if (error.response?.data?.error?.type) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø—É
            const errorType = error.response.data.error.type;
            
            if (errorType === "LocationIsClosedException") {
                console.log("üîí –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç (–ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏)");
                
                const workingHours = await getLocationWorkingHours(locationId);
                
                errorMessage = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, ${orderType === 'delivery' ? '–¥–æ—Å—Ç–∞–≤–∫–∞' : '—Å–∞–º–æ–≤—ã–≤–æ–∑'} —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n`;
                errorMessage += `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n`;
                if (workingHours) {
                    errorMessage += `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${workingHours}\n\n`;
                }
                errorMessage += `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
            } else {
                errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${errorType}\n\n`;
                errorMessage += `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.`;
            }
        } else if (error.response?.status === 400) {
            errorMessage = `‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.\n\n`;
            errorMessage += `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.`;
        } else if (error.response?.status === 404) {
            errorMessage = `‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n`;
            errorMessage += `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.`;
        } else if (error.response?.status === 500) {
            errorMessage = `‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n\n`;
            errorMessage += `–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`;
        } else {
            errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n\n`;
            errorMessage += `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`;
        }
        

        await sendMessage(phone_no_id, from, errorMessage);
        if(errorMessage.includes("—ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã")){
            await sendCatalog(phone_no_id, from);
            await setUserWaitingState(from, WAITING_STATES.CATALOG_ORDER);
        }else{
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await deleteUserState(from);
            await clearUserWaitingState(from);
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª–∏–∞–ª–∞
async function getLocationWorkingHours(locationId) {
    try {
        console.log(`üïê –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${locationId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö
        const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = restaurantsResponse.data;
        
        // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
        const restaurant = restaurants.find(r => r.external_id == locationId);
        
        if (restaurant && restaurant.schedule) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            const today = new Date().getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∏ —Ç.–¥.
            const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            const dayNamesRu = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
            
            const todayKey = dayNames[today];
            const todayNameRu = dayNamesRu[today];
            
            // –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            const todaySchedule = restaurant.schedule.find(s => s.day === todayKey);
            
            if (todaySchedule) {
                if (todaySchedule.active) {
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    const timeStart = todaySchedule.timeStart.substring(0, 5); // "11:00:00" -> "11:00"
                    const timeEnd = todaySchedule.timeEnd.substring(0, 5);     // "23:45:59" -> "23:45"
                    
                    return `${todayNameRu}: ${timeStart} - ${timeEnd}`;
                } else {
                    return `${todayNameRu}: –≤—ã—Ö–æ–¥–Ω–æ–π`;
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            const workingDays = restaurant.schedule.filter(s => s.active);
            if (workingDays.length > 0) {
                const firstDay = workingDays[0];
                const timeStart = firstDay.timeStart.substring(0, 5);
                const timeEnd = firstDay.timeEnd.substring(0, 5);
                return `–û–±—ã—á–Ω–æ: ${timeStart} - ${timeEnd}`;
            }
        }
        
        // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API
        return "11:00 - 23:45";
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:", error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        return "11:00 - 23:45";
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ
async function sendOrderSuccessMessage(phone_no_id, from, preorderResponse, orderType, finalAmount, locationTitle) {
    const lan = await getUserLan(from);
    try {
        let successMessage = '';
        
        if (preorderResponse.status === 'success') {
            successMessage = lan==='kg' ? 'üéâ –ë—É–π—Ä—É—Ç–º–∞“£—ã–∑ –∫–∞–±—ã–ª –∞–ª—ã–Ω–¥—ã!\n\n' : 'üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n';
            successMessage += lan==='kg' ? `üìã –ë—É–π—Ä—É—Ç–º–∞ –Ω–æ–º–µ—Ä–∏: ${preorderResponse.data.preorder_id}\n\n` : `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${preorderResponse.data.preorder_id}\n\n`;
            
            if (orderType === 'pickup') {
                successMessage += lan==='kg' ? `üè™ –ê–ª—É—É—á—É —Ñ–∏–ª–∏–∞–ª:\n` : `üè™ –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ —Ñ–∏–ª–∏–∞–ª–∞:\n`;
                successMessage += `üìç ${locationTitle}\n`;
            } else {
                successMessage += lan==='kg' ? `üöó –î–∞—Ä–µ–≥–∏“£–∏–∑ –±–æ—é–Ω—á–∞ –∂–µ—Ç–∫–∏—Ä“Ø“Ø\n` : `üöó –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É\n`;
            }

            successMessage += lan==='kg' ? `üí∞ –¢”©–ª”©”© —Ç—É—Ä–≥–∞–Ω —Å—É–º–º–∞: ${finalAmount} —Å–æ–º\n\n` : `üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${finalAmount} KGS\n\n`;
            successMessage += lan==='kg' ? '‚è≥ –ß–æ–æ-–∂–∞–π—ã–Ω —ã—Ä–∞—Å—Ç–æ–æ “Ø—á“Ø–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∏–±–∏–∑–¥–∏–Ω —á–∞–ª—É—É—Å—É–Ω –∫“Ø—Ç“Ø“£“Ø–∑.\n\n' : '‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n';
            successMessage += lan==='kg' ? 'üìû –°—É—Ä–æ–æ–ª–æ—Ä—É“£—É–∑ –±–æ–ª—Å–æ, –±–∏–∑ –º–µ–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –∞—Ä–∫—ã–ª—É—É –±–∞–π–ª–∞–Ω—ã—à—Å–∞“£—ã–∑ –∂–µ –±—É–ª —á–∞—Ç—Ç–∞ –∂–∞–∑—Å–∞“£—ã–∑ –±–æ–ª–æ—Ç.' : 'üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.';
        } else {
            successMessage = lan==='kg' ? '‚ùå –ë—É–π—Ä—É—Ç–º–∞“£—ã–∑–¥—ã –±–µ—Ä“Ø“Ø —É—á—É—Ä—É–Ω–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏.\n' : '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n';
            successMessage += lan==='kg' ? '–ë–∏–∑–¥–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä —á–æ–æ-–∂–∞–π—ã–Ω —Ç–∞–∫—Ç–æ–æ “Ø—á“Ø–Ω —Å–∏–∑ –º–µ–Ω–µ–Ω –±–∞–π–ª–∞–Ω—ã—à–∞—Ç.' : '–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.';
        }

        await sendMessage(phone_no_id, from, successMessage);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ:', error);
    }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...
async function handleButtonResponse(phone_no_id, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ù–û–ü–ö–ò ===");
        const buttonId = message.interactive.button_reply.id;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        console.log("Button ID:", buttonId);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏:", error);
    }
}

async function handleCatalogResponse(phone_no_id, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ê–¢–ê–õ–û–ì–ê (PRODUCT LIST) ===");
        console.log("Catalog response:", JSON.stringify(message.interactive, null, 2));
        
        // –≠—Ç–æ—Ç —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–¥–∫–æ
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç - order –≤ handleCatalogOrderResponse
        await sendMessage(phone_no_id, from, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑...");
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞
        await clearUserWaitingState(from);
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        await sendMessage(phone_no_id, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        await clearUserWaitingState(from);
    }
}

// –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
let productsCache = null;
let cacheExpiry = null;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
async function getAllProducts() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        if (productsCache && cacheExpiry && Date.now() < cacheExpiry) {
            console.log("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã");
            return productsCache;
        }
        
        console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ API");
        const response = await axios.get(`${TEMIR_API_BASE}/qr/products`);
        const products = response.data;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ ID
        const productsMap = {};
        products.forEach(product => {
            productsMap[product.id] = {
                id: product.id,
                api_id: product.api_id,
                title: product.title,
                measure_unit: product.measure_unit_title || '—à—Ç'
            };
        });
        
        // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
        productsCache = productsMap;
        cacheExpiry = Date.now() + (30 * 60 * 1000);
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        return productsMap;
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error.response?.status, error.response?.data);
        return productsCache || {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ ID
async function getProductInfo(productId) {
    try {
        const products = await getAllProducts();
        
        if (products[productId]) {
            console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: ${products[productId].title}`);
            return products[productId];
        } else {
            console.log(`‚ùì –¢–æ–≤–∞—Ä ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ`);
            
            // Fallback - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
            const response = await axios.get(`${TEMIR_API_BASE}/qr/products/${productId}`);
            const product = response.data;
            
            return {
                id: product.id,
                api_id: product.api_id,
                title: product.title,
                measure_unit: product.measure_unit_title || '—à—Ç'
            };
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error.response?.status);
        
        return {
            id: productId,
            title: `–¢–æ–≤–∞—Ä ${productId}`,
            measure_unit: '—à—Ç'
        };
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö
async function getBranchInfo(branchId) {
    try {
        const response = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = response.data;
        
        const branch = restaurants.find(r => r.external_id.toString() === branchId);
        
        if (branch) {
            return {
                id: branch.external_id,
                title: branch.title,
                address: branch.address,
                phone: branch.contacts.find(c => c.type === 'PHONE')?.value,
                whatsapp: branch.contacts.find(c => c.type === 'WHATSAPP')?.value
            };
        }
        
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–µ:', error);
        return null;
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendWhatsAppMessage(phone_no_id, messageData) {
    try {
        const response = await axios({
            method: "POST",
            url: `https://graph.facebook.com/v22.0/${phone_no_id}/messages?access_token=${token}`,
            data: messageData,
            headers: {
                "Content-Type": "application/json"
            }
        });
        
        console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:", response.data);
        return response.data;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:");
        console.error("Status:", error.response?.status);
        console.error("Data:", error.response?.data);
        throw error;
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ (6 —Å–æ–æ–±—â–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ 12)
const optimizedMenuGroups = [
    // –ì—Ä—É–ø–ø–∞ 1: –†–æ–ª–ª—ã (–ø–µ—Ä–≤—ã–µ 30)
    [
        {
            title: "–†–æ–ª–ª—ã",
            productIds: [
                "71", "46", "54", "58", "63", "62", "60", "61", "49", "48", 
                "47", "50", "53", "72", "67", "70", "68", "69", "52", "51", 
                "57", "64", "56", "59", "66", "65", "55", "38", "36", "37"
            ]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 2: –†–æ–ª–ª—ã (–æ—Å—Ç–∞–≤—à–∏–µ—Å—è) + –¢–µ–ø–ª—ã–µ —Ä–æ–ª–ª—ã + –†–æ–ª–ª—ã –±–µ–∑ —Ä–∏—Å–∞ + –ö—Ä—É–∞—Å—Å–∞–Ω—ã + –°–ª–∞–¥–∫–∏–µ —Ä–æ–ª–ª—ã (30 —Ç–æ–≤–∞—Ä–æ–≤)
    [
        {
            title: "–†–æ–ª–ª—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)",
            productIds: ["41", "35", "42", "44", "45", "43", "40", "39", "34"]
        },
        {
            title: "—Ç–µ–ø–ª—ã–µ",
            productIds: ["24", "26", "33", "28", "25", "27", "29", "30", "23", "31", "32"]
        },
        {
            title: "–±–µ–∑ —Ä–∏—Å–∞",
            productIds: ["136", "134", "135"]
        },
        {
            title: "—Å–ª–∞–¥–∫–∏–µ",
            productIds: ["150", "139", "137", "138"]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 3: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–ª—ã + –¢–µ–º–ø—É—Ä–∞ —Ä–æ–ª–ª—ã (15 —Ç–æ–≤–∞—Ä–æ–≤)
    [
        {
            title: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–ª—ã",
            productIds: ["131", "130", "127", "133", "129", "128", "132"]
        },
        {
            title: "–¢–µ–º–ø—É—Ä–∞ —Ä–æ–ª–ª—ã",
            productIds: ["19", "17", "15", "21", "20", "18", "16", "22"]
        },
        {
            title: "–ö—Ä—É–∞—Å—Å–∞–Ω—ã",
            productIds: ["93", "94", "92"]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 4: –°—É—à–∏ –∏ –≥—É–Ω–∫–∞–Ω—ã + –¢–µ–ø–ª—ã–µ —Å–µ—Ç—ã (28 —Ç–æ–≤–∞—Ä–æ–≤)
    [
        {
            title: "–°—É—à–∏ –∏ –≥—É–Ω–∫–∞–Ω—ã",
            productIds: [
                "85", "86", "81", "82", "91", "78", "84", "80", "79", "83", 
                "77", "75", "73", "76", "74", "89", "88", "87", "90"
            ]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 5: –°–µ—Ç—ã (24 —Ç–æ–≤–∞—Ä–∞)
    [
        {
            title: "–°–µ—Ç—ã",
            productIds: [
                "109", "117", "123", "111", "112", "105", "103", "113", "118", 
                "106", "119", "124", "121", "108", "110", "116", "125", "114", 
                "104", "107", "122", "126", "120", "115"
            ]
        },
        {
            title: "–¢–µ–ø–ª—ã–µ —Å–µ—Ç—ã",
            productIds: ["6", "3", "4", "1", "2", "5"]
        }
    ],
    
    // –ì—Ä—É–ø–ø–∞ 6: –°–∞–ª–∞—Ç—ã + –ù–∞–ø–∏—Ç–∫–∏ + –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (26 —Ç–æ–≤–∞—Ä–æ–≤)
    [
        {
            title: "–°–∞–ª–∞—Ç—ã",
            productIds: ["98", "96", "95", "97", "99", "102", "101", "100"]
        },
        {
            title: "–ù–∞–ø–∏—Ç–∫–∏",
            productIds: ["13", "9", "8", "10", "12", "14", "7", "11"]
        },
        {
            title: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ",
            productIds: ["142", "141", "144", "140", "143", "147", "148", "149", "146", "145"]
        }
    ]
];

async function sendCatalog(phone_no_id, to) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ö–ê–¢–ê–õ–û–ì–ê ===");
    const lan = await getUserLan(from);
    try {
        // –ü–æ–ª—É—á–∞–µ–º CATALOG_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const catalogId = process.env.CATALOG_ID;
        if (!catalogId) {
            console.error("‚ùå CATALOG_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
            throw new Error("CATALOG_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        const categoryGroups = optimizedMenuGroups;
        
        console.log(`üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞:`);
        console.log(`   –ò—Å—Ö–æ–¥–Ω–æ: 12 –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${categoryGroups.length} –≥—Ä—É–ø–ø`);
        console.log(`   üí∞ –≠–∫–æ–Ω–æ–º–∏—è: ${12 - categoryGroups.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        
        categoryGroups.forEach((group, index) => {
            const totalProducts = group.reduce((sum, cat) => sum + cat.productIds.length, 0);
            const categoryNames = group.map(cat => cat.title).join(', ');
            console.log(`   –ì—Ä—É–ø–ø–∞ ${index + 1}: ${group.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, ${totalProducts} —Ç–æ–≤–∞—Ä–æ–≤`);
            console.log(`     –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryNames}`);
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π product_list
        for (let i = 0; i < categoryGroups.length; i++) {
            const group = categoryGroups[i];
            
            const totalProducts = group.reduce((sum, cat) => sum + cat.productIds.length, 0);
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É ${i + 1}/${categoryGroups.length} (${totalProducts} —Ç–æ–≤–∞—Ä–æ–≤)`);
            
            await sendProductListWithSections(phone_no_id, to, group, i + 1, categoryGroups.length, catalogId);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const finalText = `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞ –∏–∑ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É.`;
        if(lan === 'kg'){
            finalText = `–ö–∞–∞–ª–∞–≥–∞–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è–¥–∞–Ω —Ç–∞–º–∞–∫—Ç–∞—Ä–¥—ã —Ç–∞–Ω–¥–∞“£—ã–∑.`;
        }
        await sendMessage(phone_no_id, to, finalText);
        
        console.log("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é");
        
    } catch (error) {
        await sendMessage(phone_no_id, to, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞");
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        
        // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
        console.log("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–∫ fallback");
        // const fallbackCatalogData = {
        //     messaging_product: "whatsapp",
        //     to: to,
        //     type: "interactive",
        //     interactive: {
        //         type: "catalog_message",
        //         body: {
        //             text: "üç£ –ù–∞—à –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ Yaposhkin Rolls!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–≤–µ–∂–∏–µ –∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è —Å –ª—é–±–æ–≤—å—é! ‚ù§Ô∏è"
        //         },
        //         footer: {
        //             text: "–î–æ—Å—Ç–∞–≤–∫–∞ 30-40 –º–∏–Ω—É—Ç"
        //         },
        //         action: {
        //             name: "catalog_message"
        //         }
        //     }
        // };
        
        // await sendWhatsAppMessage(phone_no_id, fallbackCatalogData);
    }
}

async function sendProductListWithSections(phone_no_id, to, categories, groupNumber, totalGroups, catalogId) {
    const lan = await getUserLan(from);
    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è WhatsApp
        const sections = categories.map(category => ({
            title: category.title,
            product_items: category.productIds.map(id => ({
                product_retailer_id: id
            }))
        }));
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        const totalProducts = categories.reduce((sum, cat) => sum + cat.productIds.length, 0);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        let headerText;
        if (categories.length === 1) {
            // –û–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            headerText = `üç£ ${categories[0].title}`;
        } else if (categories.length === 2) {
            // –î–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            headerText = `üç£ ${categories[0].title} –∏ ${categories[1].title}`;
        } else if (categories.length === 3) {
            // –¢—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            headerText = `üç£ ${categories[0].title}, ${categories[1].title} –∏ ${categories[2].title}`;
        } else if (categories.length === 4) {
            // –ß–µ—Ç—ã—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            headerText = `üç£ ${categories[0].title}, ${categories[1].title}, ${categories[2].title} –∏ ${categories[3].title}`;
        } else {
            // –ú–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            const remaining = categories.length - 2;
            headerText = `üç£ ${categories[0].title}, ${categories[1].title} +${remaining} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ (WhatsApp –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã)
        if (headerText.length > 60) {
            headerText = `${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π (${totalProducts} —Ç–æ–≤–∞—Ä–æ–≤)`;
        }

        const productListData = {
            messaging_product: "whatsapp",
            to: to,
            type: "interactive",
            interactive: {
                type: "product_list",
                header: {
                    type: "text",
                    text: headerText
                },
                body: {
                    text: `–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞:`
                },
                footer: {
                    text: "Yaposhkin Rolls"
                },
                action: {
                    catalog_id: catalogId,
                    sections: sections
                }
            }
        };
        if(lan === 'kg'){
            productListData = {
            messaging_product: "whatsapp",
            to: to,
            type: "interactive",
            interactive: {
                type: "product_list",
                header: {
                    type: "text",
                    text: headerText
                },
                body: {
                    text: `–¢–∞–º–∞–∫—Ç–∞—Ä–¥—ã —Ç–∞–Ω–¥–∞–Ω—ã–∑:`
                },
                footer: {
                    text: "Yaposhkin Rolls"
                },
                action: {
                    catalog_id: catalogId,
                    sections: sections
                }
            }
        };
        }
        
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º product_list:`);
        console.log(`   üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${headerText}`);
        console.log(`   üì¶ –°–µ–∫—Ü–∏–π: ${sections.length}`);
        console.log(`   üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–µ–∫—Ü–∏—è–º
        sections.forEach(section => {
            console.log(`     üì¶ ${section.title}: ${section.product_items.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        });
        
        await sendWhatsAppMessage(phone_no_id, productListData);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ product_list —Å —Å–µ–∫—Ü–∏—è–º–∏:", error);
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å product_list, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const categoryNames = categories.map(cat => cat.title).join(', ');
        const fallbackText = `üì± –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryNames}\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥, –≤—ã–±—Ä–∞–≤ –º–µ–Ω—é –≤ —á–∞—Ç–µ.`;
        await sendMessage(phone_no_id, to, fallbackText);
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(phone_no_id, to, text) {
    const messageData = {
        messaging_product: "whatsapp",
        to: to,
        text: {
            body: text
        }
    };

    return await sendWhatsAppMessage(phone_no_id, messageData);
}

// Flow endpoint –æ–±—Ä–∞–±–æ—Ç–∫–∞
app.post("/flow", async (req, res) => {
    console.log("=== FLOW REQUEST ===");
    console.log("Headers:", JSON.stringify(req.headers, null, 2));
    console.log("Body:", JSON.stringify(req.body, null, 2));

    try {
        const { encrypted_flow_data, encrypted_aes_key, initial_vector } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!encrypted_flow_data || !encrypted_aes_key || !initial_vector) {
            console.log("‚ùå Missing encryption parameters");
            return res.status(421).json({ error: "Missing encryption parameters" });
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        const { decryptedBody, aesKeyBuffer, initialVectorBuffer } = decryptRequest(req.body);
        
        console.log("‚úÖ Decrypted data:", JSON.stringify(decryptedBody, null, 2));

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const responseData = await processFlowData(decryptedBody);

        // –®–∏—Ñ—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        const encryptedResponse = encryptResponse(responseData, aesKeyBuffer, initialVectorBuffer);

        console.log("‚úÖ Sending encrypted response");
        res.setHeader('Content-Type', 'text/plain');
        return res.status(200).send(encryptedResponse);

    } catch (error) {
        console.error("‚ùå Flow endpoint error:", error);
        return res.status(421).json({ error: "Request processing failed" });
    }
});

// –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç Facebook
const decryptRequest = (body) => {
    const { encrypted_aes_key, encrypted_flow_data, initial_vector } = body;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    const privatePem = getPrivateKey();
    if (!privatePem) {
        throw new Error("Private key not found");
    }

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º AES –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É—è RSA
    const decryptedAesKey = crypto.privateDecrypt(
        {
            key: crypto.createPrivateKey(privatePem),
            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
            oaepHash: "sha256",
        },
        Buffer.from(encrypted_aes_key, "base64")
    );

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º Flow –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è AES-GCM
    const flowDataBuffer = Buffer.from(encrypted_flow_data, "base64");
    const initialVectorBuffer = Buffer.from(initial_vector, "base64");
    
    const TAG_LENGTH = 16;
    const encrypted_flow_data_body = flowDataBuffer.subarray(0, -TAG_LENGTH);
    const encrypted_flow_data_tag = flowDataBuffer.subarray(-TAG_LENGTH);

    const decipher = crypto.createDecipheriv(
        "aes-128-gcm",
        decryptedAesKey,
        initialVectorBuffer
    );
    
    decipher.setAuthTag(encrypted_flow_data_tag);

    const decryptedJSONString = Buffer.concat([
        decipher.update(encrypted_flow_data_body),
        decipher.final(),
    ]).toString("utf-8");

    return {
        decryptedBody: JSON.parse(decryptedJSONString),
        aesKeyBuffer: decryptedAesKey,
        initialVectorBuffer,
    };
};

// –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ—Ç Facebook
const encryptResponse = (response, aesKeyBuffer, initialVectorBuffer) => {
    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º initialization vector (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è)
    const flipped_iv = [];
    for (const pair of initialVectorBuffer.entries()) {
        flipped_iv.push(~pair[1]);
    }

    // –®–∏—Ñ—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è AES-GCM
    const cipher = crypto.createCipheriv(
        "aes-128-gcm",
        aesKeyBuffer,
        Buffer.from(flipped_iv)
    );

    const encryptedData = Buffer.concat([
        cipher.update(JSON.stringify(response), "utf-8"),
        cipher.final(),
        cipher.getAuthTag(),
    ]);

    return encryptedData.toString("base64");
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Flow –¥–∞–Ω–Ω—ã—Ö
async function processFlowData(data) {
    console.log("üîÑ Processing flow data:", data);
    
    try {
        const { version, action, flow_token, data: flowData, screen } = data;
        
        console.log(`Processing: version=${version}, action=${action}, screen=${screen}, token=${flow_token}`);
        console.log("Raw flowData:", flowData);

        switch (action) {
            case "ping":
                console.log("üèì Health check request");
                return {
                    data: {
                        status: "active"
                    }
                };

            case "INIT":
                console.log("üöÄ Flow initialization");
                
                if (flow_token && flow_token.includes("new_customer")) {
                    return {
                        screen: "WELCOME_NEW",
                        data: {
                            flow_type: "new_customer",
                            branches: flowData?.branches || []
                        }
                    };
                } else if (flow_token && flow_token.includes("existing_customer")) {
                    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    const customerName = flowData?.customer_name || "";
                    const userAddresses = flowData?.user_addresses || [];
                    const branches = flowData?.branches || [];
                    
                    console.log("üìç User addresses from payload:", userAddresses);
                    console.log("üë§ Customer name from payload:", customerName);
                    console.log("üè™ Branches from payload:", branches);
                    
                    return {
                        screen: "ORDER_TYPE",
                        data: {
                            flow_type: "existing_customer",
                            customer_name: customerName,
                            user_addresses: userAddresses,
                            branches: branches
                        }
                    };
                }
                
                return {
                    screen: "ORDER_TYPE",
                    data: {}
                };

            case "data_exchange":
                console.log("üíæ Data exchange from screen:", screen);
                return await handleDataExchange(screen, flowData, flow_token);

            default:
                console.log("‚ùì Unknown action, returning default response");
                return {
                    data: {
                        status: "active"
                    }
                };
        }
    } catch (error) {
        console.error("‚ùå Flow processing error:", error);
        return {
            data: {
                status: "active"
            }
        };
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ data_exchange –≤ Flow
async function handleDataExchange(screen, data, flow_token) {
    console.log(`üìã Data exchange for screen: ${screen}`, data);
    
    try {
        switch (screen) {
            case "WELCOME_NEW":
                // –ü–µ—Ä–µ—Ö–æ–¥ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "ORDER_TYPE_NEW",
                    data: {
                        flow_type: "new_customer",
                        customer_name: data.customer_name,
                        branches: data.branches
                    }
                };

            case "ORDER_TYPE_NEW":
                // –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "DELIVERY_OPTIONS_NEW",
                    data: {
                        flow_type: "new_customer",
                        customer_name: data.customer_name,
                        order_type: data.order_type,
                        branches: data.branches
                    }
                };

            case "DELIVERY_OPTIONS_NEW":
                // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ flow –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "SUCCESS",
                    data: {
                        extension_message_response: {
                            params: {
                                flow_token: flow_token,
                                flow_type: "new_customer",
                                customer_name: data.customer_name,
                                order_type: data.order_type,
                                branch: data.branch,
                                delivery_address: data.delivery_address
                            }
                        }
                    }
                };

            case "ORDER_TYPE":
                // –ü–µ—Ä–µ—Ö–æ–¥ —Å –ø–µ—Ä–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "DELIVERY_OPTIONS",
                    data: {
                        flow_type: "existing_customer",
                        customer_name: data.customer_name,
                        order_type: data.order_type,
                        user_addresses: data.user_addresses,
                        branches: data.branches
                    }
                };

            case "DELIVERY_OPTIONS":
                // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ flow —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                return {
                    screen: "SUCCESS",
                    data: {
                        extension_message_response: {
                            params: {
                                flow_token: flow_token,
                                flow_type: "existing_customer",
                                customer_name: data.customer_name,
                                order_type: data.order_type,
                                delivery_choice: data.delivery_choice,
                                new_address: data.new_address,
                                branch: data.branch
                            }
                        }
                    }
                };

            default:
                console.log(`‚ùì Unknown screen: ${screen}`);
                return {
                    screen: "ORDER_TYPE",
                    data: {}
                };
        }
    } catch (error) {
        console.error("‚ùå Data exchange error:", error);
        return {
            screen: screen,
            data: {
                error_message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            }
        };
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
function getPrivateKey() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (process.env.PRIVATE_KEY) {
            console.log("üîë Using private key from environment");
            return process.env.PRIVATE_KEY.replace(/\\n/g, '\n');
        }
        
        // –ü–æ—Ç–æ–º –ø—Ä–æ–±—É–µ–º –∏–∑ —Ñ–∞–π–ª–∞
        if (fs.existsSync('./private_key.pem')) {
            console.log("üîë Using private key from file");
            return fs.readFileSync('./private_key.pem', 'utf8');
        }
        
        console.log("‚ùå Private key not found");
        return null;
        
    } catch (error) {
        console.error("‚ùå Error loading private key:", error);
        return null;
    }
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get("/flow", (req, res) => {
    const hasPrivateKey = !!getPrivateKey();
    
    const status = {
        status: "Flow endpoint active",
        timestamp: new Date().toISOString(),
        nodeVersion: process.version,
        encryption: {
            privateKeyLoaded: hasPrivateKey,
            algorithm: "Official Facebook implementation: AES-128-GCM + RSA-OAEP-SHA256",
            supportedCiphers: crypto.getCiphers().filter(c => c.includes('gcm')).slice(0, 5)
        }
    };
    
    console.log("üìä Flow status:", status);
    res.status(200).json(status);
});

// POST endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
app.post("/order-status", async (req, res) => {
    try {
        console.log("=== –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê ===");
        console.log("Request body:", JSON.stringify(req.body, null, 2));

        const { 
            phone, 
            order_id, 
            status, 
            order_type, 
            location_title,
            estimated_time,
            additional_info 
        } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!phone || !order_id || !status) {
            return res.status(400).json({
                success: false,
                error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone, order_id, status"
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º phone_number_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const phone_no_id = process.env.PHONE_NUMBER_ID;
        if (!phone_no_id) {
            return res.status(500).json({
                success: false,
                error: "PHONE_NUMBER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        const result = await sendOrderStatusNotification(
            phone_no_id, 
            phone, 
            order_id, 
            status, 
            order_type, 
            location_title,
            estimated_time,
            additional_info
        );

        if (result.success) {
            res.status(200).json({
                success: true,
                message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                whatsapp_message_id: result.message_id
            });
        } else {
            res.status(500).json({
                success: false,
                error: result.error
            });
        }

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:", error);
        res.status(500).json({
            success: false,
            error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
async function sendOrderStatusNotification(phone_no_id, customerPhone, orderId, status, orderType = 'pickup', locationTitle = '', estimatedTime = '', additionalInfo = '') {
    try {
        console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ "${status}" –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} –∫–ª–∏–µ–Ω—Ç—É ${customerPhone}`);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        const message = formatOrderStatusMessage(orderId, status, orderType, locationTitle, estimatedTime, additionalInfo);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const response = await sendMessage(phone_no_id, customerPhone, message);

        console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
        
        return {
            success: true,
            message_id: response.messages?.[0]?.id
        };

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ:", error);
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
function formatOrderStatusMessage(orderId, status, orderType, locationTitle, estimatedTime, additionalInfo) {
    const emoji = getStatusEmoji(status);
    const statusText = getStatusText(status);
    
    let message = `${emoji} ${statusText}\n\n`;
    message += `üìã –ó–∞–∫–∞–∑ ‚Ññ${orderId}\n`;

    switch (status.toLowerCase()) {
        case 'confirmed':
        case '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω':
            message += `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!\n\n`;
            if (orderType === 'delivery') {
                message += `üöó –¢–∏–ø: –î–æ—Å—Ç–∞–≤–∫–∞\n`;
                if (estimatedTime) {
                    message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${estimatedTime}\n`;
                }
            } else {
                message += `üè™ –¢–∏–ø: –°–∞–º–æ–≤—ã–≤–æ–∑\n`;
                if (locationTitle) {
                    message += `üìç –§–∏–ª–∏–∞–ª: ${locationTitle}\n`;
                }
                if (estimatedTime) {
                    message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${estimatedTime}\n`;
                }
            }
            message += `\nüìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`;
            break;

        case 'preparing':
        case '–≥–æ—Ç–æ–≤–∏—Ç—Å—è':
            message += `üë®‚Äçüç≥ –ù–∞—à–∏ –ø–æ–≤–∞—Ä–∞ –≥–æ—Ç–æ–≤—è—Ç –≤–∞—à –∑–∞–∫–∞–∑!\n\n`;
            if (estimatedTime) {
                message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${estimatedTime}\n\n`;
            }
            message += `üç£ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏–º —Å –ª—é–±–æ–≤—å—é!`;
            break;

        case 'ready':
        case '–≥–æ—Ç–æ–≤':
            if (orderType === 'delivery') {
                message += `üöó –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É!\n\n`;
                message += `üìç –ö—É—Ä—å–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏ –∫ –≤–∞–º.\n`;
                if (estimatedTime) {
                    message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${estimatedTime}\n`;
                }
                message += `\nüìû –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–±—ã—Ç–∏–µ–º.`;
            } else {
                message += `üéâ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!\n\n`;
                if (locationTitle) {
                    message += `üìç –§–∏–ª–∏–∞–ª: ${locationTitle}\n`;
                }
                message += `üè™ –ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ –∑–∞ –∑–∞–∫–∞–∑–æ–º –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.\n`;
                message += `\nüí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.`;
            }
            break;

        case 'out_for_delivery':
        case '–≤_–¥–æ—Å—Ç–∞–≤–∫–µ':
            message += `üöó –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏!\n\n`;
            message += `üìç –í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.\n`;
            if (estimatedTime) {
                message += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: ${estimatedTime}\n`;
            }
            message += `\nüìû –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –∞–¥—Ä–µ—Å—É.`;
            break;

        case 'delivered':
        case '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω':
            message += `‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n\n`;
            message += `üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä Yaposhkin Rolls!\n`;
            message += `‚≠ê –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É –æ –∫–∞—á–µ—Å—Ç–≤–µ –±–ª—é–¥ –∏ —Å–µ—Ä–≤–∏—Å–µ.\n`;
            message += `\nüç£ –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!`;
            break;

        case 'completed':
        case '–≤—ã–ø–æ–ª–Ω–µ–Ω':
            message += `‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n`;
            message += `üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä Yaposhkin Rolls!\n`;
            message += `‚≠ê –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É –æ –∫–∞—á–µ—Å—Ç–≤–µ –±–ª—é–¥ –∏ —Å–µ—Ä–≤–∏—Å–µ.\n`;
            message += `\nüç£ –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!`;
            break;

        case 'cancelled':
        case '–æ—Ç–º–µ–Ω–µ–Ω':
            message += `‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\n\n`;
            if (additionalInfo) {
                message += `üìù –ü—Ä–∏—á–∏–Ω–∞: ${additionalInfo}\n\n`;
            }
            message += `üòî –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.\n`;
            message += `üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.\n`;
            message += `\nüç£ –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!`;
            break;

        case 'delayed':
        case '–∑–∞–¥–µ—Ä–∂–∞–Ω':
            message += `‚è∞ –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–∫–∞–∑–∞\n\n`;
            if (estimatedTime) {
                message += `üïê –ù–æ–≤–æ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${estimatedTime}\n`;
            }
            if (additionalInfo) {
                message += `üìù –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∏: ${additionalInfo}\n`;
            }
            message += `\nüòî –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É.\n`;
            message += `üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`;
            break;

        default:
            message += `üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${status}\n\n`;
            if (additionalInfo) {
                message += `üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${additionalInfo}\n\n`;
            }
            message += `üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`;
    }

    return message;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
function getStatusEmoji(status) {
    const emojiMap = {
        'confirmed': '‚úÖ',
        '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω': '‚úÖ',
        'preparing': 'üë®‚Äçüç≥',
        '–≥–æ—Ç–æ–≤–∏—Ç—Å—è': 'üë®‚Äçüç≥',
        'ready': 'üéâ',
        '–≥–æ—Ç–æ–≤': 'üéâ',
        'out_for_delivery': 'üöó',
        '–≤_–¥–æ—Å—Ç–∞–≤–∫–µ': 'üöó',
        'delivered': '‚úÖ',
        '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': '‚úÖ',
        'completed': '‚úÖ',
        '–≤—ã–ø–æ–ª–Ω–µ–Ω': '‚úÖ',
        'cancelled': '‚ùå',
        '–æ—Ç–º–µ–Ω–µ–Ω': '‚ùå',
        'delayed': '‚è∞',
        '–∑–∞–¥–µ—Ä–∂–∞–Ω': '‚è∞'
    };
    
    return emojiMap[status.toLowerCase()] || 'üìã';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    const statusMap = {
        'confirmed': '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω': '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'preparing': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
        '–≥–æ—Ç–æ–≤–∏—Ç—Å—è': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤',
        '–≥–æ—Ç–æ–≤': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤',
        'out_for_delivery': '–ó–∞–∫–∞–∑ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ',
        '–≤_–¥–æ—Å—Ç–∞–≤–∫–µ': '–ó–∞–∫–∞–∑ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ',
        'delivered': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
        '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'completed': '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        '–≤—ã–ø–æ–ª–Ω–µ–Ω': '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        'cancelled': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
        '–æ—Ç–º–µ–Ω–µ–Ω': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
        'delayed': '–ó–∞–∫–∞–∑ –∑–∞–¥–µ—Ä–∂–∞–Ω',
        '–∑–∞–¥–µ—Ä–∂–∞–Ω': '–ó–∞–∫–∞–∑ –∑–∞–¥–µ—Ä–∂–∞–Ω'
    };
    
    return statusMap[status.toLowerCase()] || `–°—Ç–∞—Ç—É—Å: ${status}`;
}

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get("/stats", async (req, res) => {
    try {
        console.log("=== –ó–ê–ü–†–û–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===");
        
        const stats = await getUserStatesStats();
        
        console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π:", stats);
        
        res.status(200).json({
            success: true,
            timestamp: new Date().toISOString(),
            database: {
                connected: !!db,
                name: DB_NAME
            },
            statistics: stats
        });
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
        res.status(500).json({
            success: false,
            error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        });
    }
});

// Endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.delete("/cleanup", async (req, res) => {
    try {
        console.log("=== –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –°–û–°–¢–û–Ø–ù–ò–ô ===");
        
        // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
        
        const result = await userStatesCollection.deleteMany({
            updatedAt: { $lt: oneDayAgo }
        });
        
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π`);
        
        res.status(200).json({
            success: true,
            message: `–£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π`,
            deletedCount: result.deletedCount
        });
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π:", error);
        res.status(500).json({
            success: false,
            error: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"
        });
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", (req, res) => {
    res.status(200).json({
        message: "WhatsApp Bot —Å MongoDB",
        status: "active",
        version: "2.0.0",
        database: {
            connected: !!db,
            name: DB_NAME
        },
        features: [
            "MongoDB –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "Flow –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤",
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö"
        ],
        endpoints: {
            webhook: "/webhook",
            flow: "/flow",
            orderStatus: "/order-status",
            stats: "/stats",
            cleanup: "/cleanup"
        }
    });
});

// Graceful shutdown –¥–ª—è MongoDB
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    
    if (db) {
        console.log('üì¶ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB...');
        await db.client.close();
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
    
    console.log('üëã –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
    console.error('–í –ø—Ä–æ–º–∏—Å–µ:', promise);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    process.exit(1);
});