const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
require('dotenv').config();
const crypto = require('crypto');
const fs = require('fs');

const PORT = process.env.PORT || 3000;
const app = express().use(bodyParser.json());

const token = process.env.TOKEN;
const mytoken = process.env.MYTOKEN;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TEMIR_API_BASE = 'https://ya.temir.me';

// Flow IDs
const NEW_CUSTOMER_FLOW_ID = '4265839023734503';
const ORDER_FLOW_ID = '708820881926236';

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

app.listen(PORT, () => {
    console.log("webhook is listening");
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook
app.get("/webhook", (req, res) => {
    const mode = req.query["hub.mode"];
    const challenge = req.query["hub.challenge"];
    const token = req.query["hub.verify_token"];

    if (mode && token) {
        if (mode === "subscribe" && token === mytoken) {
            res.status(200).send(challenge);
        } else {
            res.status(403).send("Forbidden");
        }
    }
});

app.post("/webhook", async (req, res) => {
    const bodyParam = req.body;

    console.log("=== –ü–û–õ–£–ß–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===");
    console.log(JSON.stringify(bodyParam, null, 2));

    if (bodyParam.object) {
        console.log("inside body param");
        if (bodyParam.entry && 
            bodyParam.entry[0].changes && 
            bodyParam.entry[0].changes[0].value.messages && 
            bodyParam.entry[0].changes[0].value.messages[0]) {
            
            const phoneNoId = bodyParam.entry[0].changes[0].value.metadata.phone_number_id;
            const from = bodyParam.entry[0].changes[0].value.messages[0].from;
            const message = bodyParam.entry[0].changes[0].value.messages[0];

            console.log("phone number " + phoneNoId);
            console.log("from " + from);
            console.log("message type:", message.type);
            console.log("message:", JSON.stringify(message, null, 2));

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                if (message.type === "location") {
                    console.log("üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
                    await handleLocationMessage(phoneNoId, from, message);
                } else if (message.type === "interactive") {
                    console.log("Interactive message type:", message.interactive.type);
                    
                    if (message.interactive.type === "nfm_reply") {
                        console.log("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Flow");
                        await handleFlowResponse(phoneNoId, from, message, bodyParam);
                    } else if (message.interactive.type === "product_list_reply") {
                        console.log("üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (product_list)");
                        await handleCatalogResponse(phoneNoId, from, message);
                    } else if (message.interactive.type === "button_reply") {
                        console.log("üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–Ω–æ–ø–∫–∏");
                        await handleButtonResponse(phoneNoId, from, message);
                    } else {
                        console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø interactive —Å–æ–æ–±—â–µ–Ω–∏—è:", message.interactive.type);
                        await handleIncomingMessage(phoneNoId, from, message);
                    }
                } else if (message.type === "order") {
                    console.log("üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (order)");
                    await handleCatalogOrderResponse(phoneNoId, from, message);
                } else {
                    console.log("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
                    await handleIncomingMessage(phoneNoId, from, message);
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
            }

            res.sendStatus(200);
        } else {
            res.sendStatus(404);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function handleLocationMessage(phoneNoId, from, message) {
    try {
        console.log("=== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===");
        
        const location = message.location;
        const longitude = location.longitude;
        const latitude = location.latitude;
        
        console.log(`üìç –ü–æ–ª—É—á–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${latitude}, ${longitude}`);
        
        const userState = userStates.get(from);
        
        if (!userState) {
            console.log("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            await sendMessage(phoneNoId, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.");
            return;
        }
        
        console.log("üë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userState);
        
        await updateCustomerWithLocation(phoneNoId, from, userState, longitude, latitude);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error);
        await sendMessage(phoneNoId, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        userStates.delete(from);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
async function updateCustomerWithLocation(phoneNoId, from, userState, longitude, latitude) {
    try {
        console.log("=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –° –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï–ú ===");
        
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const qrToken = customerResponse.data.qr_access_token;
        
        console.log("üîë QR Token:", qrToken);
        
        const updateData = {
            firstName: userState.customer_name,
            addresses: [{
                fullAddress: userState.delivery_address,
                office: "",
                floor: "",
                doorcode: "",
                entrance: "",
                comment: "",
                geocoding: {
                    datasource: "yandex",
                    longitude: longitude,
                    latitude: latitude,
                    country: "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω",
                    countrycode: "KG",
                    city: "–ë–∏—à–∫–µ–∫",
                    street: "",
                    house: "",
                    date: ""
                }
            }]
        };
        
        console.log("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", updateData);
        
        const updateResponse = await axios.post(
            `${TEMIR_API_BASE}/qr/update-customer/?qr_token=${qrToken}`,
            updateData
        );
        
        console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", updateResponse.data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
        if (userState.flow_type === 'new_customer') {
            userStates.set(from, {
                flow_type: 'new_customer',
                order_type: 'delivery',
                delivery_choice: 'new',
                customer_name: userState.customer_name,
                delivery_address: userState.delivery_address
            });
            
            const confirmText = `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${userState.customer_name}! üéâ\n\n–í–∞—à –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${userState.delivery_address}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã. –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥! üç£`;
            await sendMessage(phoneNoId, from, confirmText);
        } else {
            userStates.set(from, {
                flow_type: 'existing_customer',
                order_type: 'delivery',
                delivery_choice: 'new',
                customer_name: userState.customer_name,
                delivery_address: userState.delivery_address
            });
            
            const confirmText = `‚úÖ –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüìç ${userState.delivery_address}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
            await sendMessage(phoneNoId, from, confirmText);
        }
        
        setTimeout(async () => {
            await sendCatalog(phoneNoId, from);
        }, 2000);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", error);
        
        let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.";
        if (error.response?.status === 400) {
            errorMessage = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        } else if (error.response?.status === 404) {
            errorMessage = "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.";
        }
        
        await sendMessage(phoneNoId, from, errorMessage);
        userStates.delete(from);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleIncomingMessage(phoneNoId, from, message) {
    console.log("=== –ü–†–û–í–ï–†–ö–ê –ö–õ–ò–ï–ù–¢–ê ===");
    
    const messageText = message.text?.body?.toLowerCase();
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}: ${messageText || '–Ω–µ —Ç–µ–∫—Å—Ç'}`);
    
    await checkCustomerAndSendFlow(phoneNoId, from);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ Flow
async function checkCustomerAndSendFlow(phoneNoId, from) {
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${from}`);
        
        const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = restaurantsResponse.data;
        
        const branches = restaurants.map(restaurant => ({
            id: restaurant.external_id.toString(),
            title: `üè™ ${restaurant.title}`
        }));
        
        console.log("üè™ –§–∏–ª–∏–∞–ª—ã –¥–ª—è Flow:", branches);
        
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const customerData = customerResponse.data;
        
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:', customerData);

        const hasAddresses = customerData.customer.addresses && customerData.customer.addresses.length > 0;
        const isNewCustomer = !hasAddresses || 
                             !customerData.customer.first_name || 
                             customerData.customer.first_name === '–ò–º—è';

        if (isNewCustomer) {
            console.log('üÜï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow');
            await sendNewCustomerFlow(phoneNoId, from, branches);
        } else {
            console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Flow —Å –∞–¥—Ä–µ—Å–∞–º–∏');
            await sendExistingCustomerFlow(phoneNoId, from, customerData.customer, branches);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        
        try {
            const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
            const restaurants = restaurantsResponse.data;
            const branches = restaurants.map(restaurant => ({
                id: restaurant.external_id.toString(),
                title: `üè™ ${restaurant.title}`
            }));
            
            console.log('üÜï –û—à–∏–±–∫–∞ API - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Flow');
            await sendNewCustomerFlow(phoneNoId, from, branches);
        } catch (fallbackError) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–æ–≤:', fallbackError);
            await sendMessage(phoneNoId, from, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Flow –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
async function sendNewCustomerFlow(phoneNoId, from, branches) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê FLOW –î–õ–Ø –ù–û–í–´–• –ö–õ–ò–ï–ù–¢–û–í ===");
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üç£ Yaposhkin Rolls"
            },
            body: {
                text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
            },
            footer: {
                text: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `new_customer_${Date.now()}`,
                    flow_id: NEW_CUSTOMER_FLOW_ID,
                    flow_cta: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                    flow_action: "navigate",
                    flow_action_payload: {
                        screen: "WELCOME_NEW",
                        data: {
                            flow_type: "new_customer",
                            branches: branches
                        }
                    }
                }
            }
        }
    };

    await sendWhatsAppMessage(phoneNoId, flowData);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ Flow –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
async function sendExistingCustomerFlow(phoneNoId, from, customer, branches) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê FLOW –î–õ–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ö–õ–ò–ï–ù–¢–û–í ===");
    
    const addresses = customer.addresses.map((addr) => ({
        id: `address_${addr.id}`,
        title: addr.full_address
    }));
    
    addresses.push({
        id: "new",
        title: "‚ûï –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å"
    });
    
    console.log("üìç –ê–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞:", addresses);
    
    const flowData = {
        messaging_product: "whatsapp",
        to: from,
        type: "interactive",
        interactive: {
            type: "flow",
            header: {
                type: "text",
                text: "üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
            },
            body: {
                text: `–ü—Ä–∏–≤–µ—Ç, ${customer.first_name}! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞`
            },
            footer: {
                text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∞–¥—Ä–µ—Å"
            },
            action: {
                name: "flow",
                parameters: {
                    flow_message_version: "3",
                    flow_token: `existing_customer_${Date.now()}`,
                    flow_id: ORDER_FLOW_ID,
                    flow_cta: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–∫–∞–∑",
                    flow_action: "navigate",
                    flow_action_payload: {
                        screen: "ORDER_TYPE",
                        data: {
                            flow_type: "existing_customer",
                            customer_name: customer.first_name,
                            user_addresses: addresses,
                            branches: branches
                        }
                    }
                }
            }
        }
    };

    await sendWhatsAppMessage(phoneNoId, flowData);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ Flow
async function handleFlowResponse(phoneNoId, from, message, bodyParam) {
    try {
        console.log("=== –û–ë–†–ê–ë–û–¢–ö–ê FLOW –û–¢–í–ï–¢–ê ===");
        
        const flowResponse = JSON.parse(message.interactive.nfm_reply.response_json);
        const customerProfile = bodyParam.entry[0].changes[0].value.contacts[0].profile.name;
        
        console.log('–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:', from);
        console.log('–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è WhatsApp:', customerProfile);
        console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ Flow:', flowResponse);

        if (flowResponse.flow_type === 'new_customer') {
            await handleNewCustomerRegistration(phoneNoId, from, flowResponse);
        } else if (flowResponse.flow_type === 'existing_customer') {
            await handleExistingCustomerOrder(phoneNoId, from, flowResponse);
        } else {
            console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø Flow, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥");
            await sendMessage(phoneNoId, from, "–°–ø–∞—Å–∏–±–æ! –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:");
            
            setTimeout(async () => {
                await sendCatalog(phoneNoId, from);
            }, 1000);
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Flow –æ—Ç–≤–µ—Ç–∞:", error);
        await sendMessage(phoneNoId, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function handleNewCustomerRegistration(phoneNoId, from, data) {
    try {
        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', data);

        if (data.order_type === 'delivery' && data.delivery_address) {
            userStates.set(from, {
                flow_type: 'new_customer',
                customer_name: data.customer_name,
                delivery_address: data.delivery_address
            });

            await sendLocationRequest(phoneNoId, from, data.customer_name);
        } else {
            await registerCustomerWithoutLocation(phoneNoId, from, data);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        await sendMessage(phoneNoId, from, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞)
async function registerCustomerWithoutLocation(phoneNoId, from, data) {
    try {
        console.log("=== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê –ë–ï–ó –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===");
        
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const qrToken = customerResponse.data.qr_access_token;
        
        const updateData = {
            firstName: data.customer_name
        };
        
        const updateResponse = await axios.post(
            `${TEMIR_API_BASE}/qr/update-customer/?qr_token=${qrToken}`,
            updateData
        );
        
        console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", updateResponse.data);
        
        userStates.set(from, {
            flow_type: 'new_customer',
            order_type: 'pickup',
            branch: data.branch,
            customer_name: data.customer_name
        });
        
        const confirmText = `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${data.customer_name}! üéâ\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞! üç£`;
        await sendMessage(phoneNoId, from, confirmText);
        
        setTimeout(async () => {
            await sendCatalog(phoneNoId, from);
        }, 2000);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error);
        await sendMessage(phoneNoId, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function handleExistingCustomerOrder(phoneNoId, from, data) {
    try {
        console.log('üõí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', data);
        
        if (data.order_type === 'delivery' && data.delivery_choice === 'new' && data.new_address) {
            console.log('üìç –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–æ—Å—Ç–∞–≤–∫—É —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º:', data.new_address);
            
            userStates.set(from, {
                flow_type: 'existing_customer',
                customer_name: data.customer_name || '–ö–ª–∏–µ–Ω—Ç',
                delivery_address: data.new_address
            });
            
            await sendLocationRequest(phoneNoId, from, data.customer_name);
            
        } else {
            console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥');
            
            userStates.set(from, {
                flow_type: 'existing_customer',
                order_type: data.order_type,
                delivery_choice: data.delivery_choice,
                new_address: data.new_address,
                branch: data.branch,
                customer_name: data.customer_name
            });
            
            let confirmText;
            if (data.order_type === 'delivery') {
                confirmText = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
            } else {
                confirmText = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:`;
            }
            
            await sendMessage(phoneNoId, from, confirmText);
            
            setTimeout(async () => {
                await sendCatalog(phoneNoId, from);
            }, 1000);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
        await sendMessage(phoneNoId, from, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function sendLocationRequest(phoneNoId, from, customerName) {
    console.log("=== –ó–ê–ü–†–û–° –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ===");
    
    const locationText = `–°–ø–∞—Å–∏–±–æ, ${customerName}! üìç\n\n–î–ª—è —Ç–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ`;
    
    await sendMessage(phoneNoId, from, locationText);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ order
async function handleCatalogOrderResponse(phoneNoId, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ê–¢–ê–õ–û–ì–ê (ORDER FORMAT) ===");
        console.log("Order message:", JSON.stringify(message, null, 2));
        
        const order = message.order;
        
        let orderSummary = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n";
        let totalAmount = 0;
        const orderItems = [];
        
        if (order && order.product_items) {
            console.log("=== –î–ï–¢–ê–õ–ò –¢–û–í–ê–†–û–í ===");
            
            for (let index = 0; index < order.product_items.length; index++) {
                const item = order.product_items[index];
                console.log(`–¢–æ–≤–∞—Ä ${index + 1}:`, JSON.stringify(item, null, 2));
                
                const productInfo = await getProductInfo(item.product_retailer_id);
                
                const productName = productInfo.title || `–¢–æ–≤–∞—Ä ${item.product_retailer_id}`;
                const itemPrice = parseFloat(item.item_price) || 0;
                const itemTotal = itemPrice * item.quantity;
                
                console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${productName}`);
                
                orderSummary += `${index + 1}. ${productName}\n`;
                orderSummary += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} ${productInfo.measure_unit || '—à—Ç'}\n`;
                orderSummary += `–¶–µ–Ω–∞: ${itemPrice} KGS x ${item.quantity} = ${itemTotal} KGS\n\n`;
                
                totalAmount += itemTotal;
                
                orderItems.push({
                    id: parseInt(item.product_retailer_id),
                    title: productName,
                    quantity: item.quantity,
                    priceWithDiscount: null,
                    dealDiscountId: null,
                    modifierGroups: []
                });
            }
        }
        
        console.log("üì¶ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:", orderItems);
        orderSummary += `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalAmount} KGS\n\n`;
        
        const userState = userStates.get(from);
        
        await calculateDeliveryAndSubmitOrder(phoneNoId, from, orderItems, totalAmount, orderSummary, userState);
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ order –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        await sendMessage(phoneNoId, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}

// –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function calculateDeliveryAndSubmitOrder(phoneNoId, from, orderItems, totalAmount, orderSummary, userState) {
    try {
        console.log("=== –†–ê–°–ß–ï–¢ –î–û–°–¢–ê–í–ö–ò –ò –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===");
        
        const customerResponse = await axios.get(`${TEMIR_API_BASE}/qr/customer/?phone=${from}`);
        const customerData = customerResponse.data;
        
        let deliveryCost = 0;
        let locationId = null;
        let locationTitle = "";
        let orderType = "pickup";
        let deliveryAddress = "";

        console.log(`type order is ${userState?.order_type}`);
        console.log(`userState is`, userState);
        
        if (userState && userState.order_type === 'delivery') {
            console.log("üöö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É");
            orderType = "delivery";
            
            let address = null;
            let tempLat = null;
            let tempLon = null;
            
            if (userState.delivery_choice === 'new') {
                const addresses = customerData.customer.addresses || [];
                address = addresses[addresses.length - 1];
                deliveryAddress = userState.delivery_address || address?.full_address || "";
                console.log(`This is address ${address}`);
                
                if (address?.geocoding_json) {
                    console.log(`This is address latitude ${address.geocoding_json.latitude}`);
                    tempLat = address.geocoding_json.latitude;
                    console.log(`This is address longitude ${address.geocoding_json.longitude}`);
                    tempLon = address.geocoding_json.longitude;
                }
            } else {
                const addressIndex = parseInt(userState.delivery_choice.replace('address_', ''));
                address = customerData.customer.addresses.find(item => item.id == addressIndex);
                deliveryAddress = address?.full_address || "";
                console.log(`This is address index ${addressIndex}`);
                console.log(`This is addresses`, customerData.customer.addresses);
                console.log(`This is address`, address);
                
                if (address?.geocoding_json) {
                    console.log(`This is address latitude ${address.geocoding_json.latitude}`);
                    tempLat = address.geocoding_json.latitude;
                    console.log(`This is address longitude ${address.geocoding_json.longitude}`);
                    tempLon = address.geocoding_json.longitude;
                }
            }
            
            if (!tempLat || !tempLon) {
                console.log("‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏");
                await sendMessage(phoneNoId, from, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                userStates.delete(from);
                return;
            }
            
            const lat = tempLat;
            const lon = tempLon;
            
            console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏: ${lat}, ${lon}`);
            
            try {
                const deliveryResponse = await axios.get(
                    `${TEMIR_API_BASE}/qr/delivery/?lat=${lat}&lon=${lon}`
                );
                
                console.log("üöö –û—Ç–≤–µ—Ç delivery API:", deliveryResponse.data);
                
                if (deliveryResponse.data && Array.isArray(deliveryResponse.data) && deliveryResponse.data.length > 0) {
                    const deliveryInfo = deliveryResponse.data[0];
                    deliveryCost = deliveryInfo.delivery_cost || 0;
                    locationId = deliveryInfo.restaurant_id;
                    locationTitle = deliveryInfo.title || "–†–µ—Å—Ç–æ—Ä–∞–Ω";
                    
                    console.log(`‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: ${deliveryCost} KGS, —Ñ–∏–ª–∏–∞–ª: ${locationTitle}`);
                } else {
                    console.log("‚ùå –ê–¥—Ä–µ—Å –≤–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API)");
                    
                    let errorMessage = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n";
                    errorMessage += `üìç –ê–¥—Ä–µ—Å: ${deliveryAddress}\n\n`;
                    errorMessage += "–í—ã –º–æ–∂–µ—Ç–µ:\n";
                    errorMessage += "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏\n";
                    errorMessage += "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –Ω–∞—à–∏—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤\n";
                    errorMessage += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏\n\n";
                    errorMessage += "–î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–∞–º–æ–≤—ã–≤–æ–∑'.";
                                        await sendMessage(phoneNoId, from, errorMessage);
                    userStates.delete(from);
                    return;
                }
            } catch (deliveryError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:", deliveryError);
                await sendMessage(phoneNoId, from, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                userStates.delete(from);
                return;
            }
        } else {
            console.log("üè™ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑");
            
            if (userState?.branch) {
                const branchInfo = await getBranchInfo(userState.branch);
                if (branchInfo) {
                    locationId = parseInt(userState.branch);
                    locationTitle = branchInfo.title;
                } else {
                    console.log("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                    await sendMessage(phoneNoId, from, "‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                    userStates.delete(from);
                    return;
                }
            } else {
                try {
                    const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
                    const restaurants = restaurantsResponse.data;
                    
                    if (restaurants.length > 0) {
                        const selectedBranch = restaurants[0];
                        locationId = selectedBranch.external_id;
                        locationTitle = selectedBranch.title;
                    } else {
                        console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤");
                        await sendMessage(phoneNoId, from, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                        userStates.delete(from);
                        return;
                    }
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤:", error);
                    await sendMessage(phoneNoId, from, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
                    userStates.delete(from);
                    return;
                }
            }
        }
        
        if (!locationId) {
            console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞");
            await sendMessage(phoneNoId, from, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");
            userStates.delete(from);
            return;
        }
        
        const finalAmount = totalAmount + deliveryCost;
        
        let costMessage = orderSummary;
        
        if (orderType === "delivery") {
            costMessage += `üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryCost} KGS\n`;
            costMessage += `üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryAddress}\n\n`;
        } else {
            costMessage += `üè™ –°–∞–º–æ–≤—ã–≤–æ–∑: 0 KGS\n`;
            costMessage += `üìç –§–∏–ª–∏–∞–ª: ${locationTitle}\n\n`;
        }
        
        costMessage += `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${finalAmount} KGS\n\n`;
        costMessage += `‚è≥ –û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑...`;
        
        await sendMessage(phoneNoId, from, costMessage);
        
        await submitOrder(phoneNoId, from, orderItems, customerData, locationId, locationTitle, orderType, finalAmount);
        
        userStates.delete(from);
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
        await sendMessage(phoneNoId, from, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.");
        userStates.delete(from);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ API
async function submitOrder(phoneNoId, from, orderItems, customerData, locationId, locationTitle, orderType, finalAmount) {
    try {
        console.log("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ API");
        
        const preorderData = {
            locationId: parseInt(locationId),
            locationTitle: locationTitle,
            type: orderType,
            customerContact: {
                firstName: "Test",
                comment: "–ù–µ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑",
                contactMethod: {
                    type: "phoneNumber",
                    value: from
                }
            },
            orderDueDateDelta: 0,
            guests: [{
                orderItems: orderItems
            }],
            paymentSumWithDiscount: null
        };
        
        console.log("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è preorder:", JSON.stringify(preorderData, null, 2));
        
        const preorderResponse = await axios.post(
            `${TEMIR_API_BASE}/qr/preorder/?qr_token=${customerData.qr_access_token}`,
            preorderData
        );
        
        console.log("‚úÖ –û—Ç–≤–µ—Ç preorder API:", preorderResponse.data);
        
        if (preorderResponse.data.error) {
            console.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:", preorderResponse.data.error);
            throw {
                response: {
                    status: 200,
                    data: preorderResponse.data
                }
            };
        }
        
        await sendOrderSuccessMessage(phoneNoId, from, preorderResponse.data, orderType, finalAmount, locationTitle);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ API:', error);
        
        let errorMessage = '';
        
        if (error.response?.data?.error?.description) {
            const errorDescription = error.response.data.error.description;
            
            if (errorDescription.includes("Location is closed")) {
                console.log("üîí –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç");
                
                const workingHours = await getLocationWorkingHours(locationId);
                
                if (orderType === 'delivery') {
                    errorMessage = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n`;
                    errorMessage += `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n`;
                    if (workingHours) {
                        errorMessage += `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${workingHours}\n\n`;
                    }
                    errorMessage += `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
                } else {
                    errorMessage = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n`;
                    errorMessage += `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n`;
                    if (workingHours) {
                        errorMessage += `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${workingHours}\n\n`;
                    }
                    errorMessage += `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
                }
            } else if (errorDescription.includes("out of stock") || errorDescription.includes("unavailable")) {
                errorMessage = `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n`;
                errorMessage += `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è.`;
            } else {
                errorMessage = `‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${errorDescription}\n\n`;
                errorMessage += `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.`;
            }
        } else if (error.response?.data?.error?.type) {
            const errorType = error.response.data.error.type;
            
            if (errorType === "LocationIsClosedException") {
                console.log("üîí –§–∏–ª–∏–∞–ª –∑–∞–∫—Ä—ã—Ç (–ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏)");
                
                const workingHours = await getLocationWorkingHours(locationId);
                
                errorMessage = `‚è∞ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, ${orderType === 'delivery' ? '–¥–æ—Å—Ç–∞–≤–∫–∞' : '—Å–∞–º–æ–≤—ã–≤–æ–∑'} —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n`;
                errorMessage += `üè™ –§–∏–ª–∏–∞–ª "${locationTitle}" –∑–∞–∫—Ä—ã—Ç.\n`;
                if (workingHours) {
                    errorMessage += `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${workingHours}\n\n`;
                }
                errorMessage += `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`;
            } else {
                errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${errorType}\n\n`;
                errorMessage += `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.`;
            }
        } else if (error.response?.status === 400) {
            errorMessage = `‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.\n\n`;
            errorMessage += `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.`;
        } else if (error.response?.status === 404) {
            errorMessage = `‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n`;
            errorMessage += `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.`;
        } else if (error.response?.status === 500) {
            errorMessage = `‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n\n`;
            errorMessage += `–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`;
        } else {
            errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n\n`;
            errorMessage += `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`;
        }
        
        await sendMessage(phoneNoId, from, errorMessage);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª–∏–∞–ª–∞
async function getLocationWorkingHours(locationId) {
    try {
        console.log(`üïê –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${locationId}`);
        
        const restaurantsResponse = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = restaurantsResponse.data;
        
        const restaurant = restaurants.find(r => r.external_id == locationId);
        
        if (restaurant && restaurant.schedule) {
            const today = new Date().getDay();
            const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            const dayNamesRu = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
            
            const todayKey = dayNames[today];
            const todayNameRu = dayNamesRu[today];
            
            const todaySchedule = restaurant.schedule.find(s => s.day === todayKey);
            
            if (todaySchedule) {
                if (todaySchedule.active) {
                    const timeStart = todaySchedule.timeStart.substring(0, 5);
                    const timeEnd = todaySchedule.timeEnd.substring(0, 5);
                    
                    return `${todayNameRu}: ${timeStart} - ${timeEnd}`;
                } else {
                    return `${todayNameRu}: –≤—ã—Ö–æ–¥–Ω–æ–π`;
                }
            }
            
            const workingDays = restaurant.schedule.filter(s => s.active);
            if (workingDays.length > 0) {
                const firstDay = workingDays[0];
                const timeStart = firstDay.timeStart.substring(0, 5);
                const timeEnd = firstDay.timeEnd.substring(0, 5);
                return `–û–±—ã—á–Ω–æ: ${timeStart} - ${timeEnd}`;
            }
        }
        
        return "11:00 - 23:45";
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:", error);
        return "11:00 - 23:45";
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ
async function sendOrderSuccessMessage(phoneNoId, from, preorderResponse, orderType, finalAmount, locationTitle) {
    try {
        let successMessage = '';
        
        if (preorderResponse.status === 'success' && preorderResponse.data?.preorder_id) {
            successMessage = 'üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n';
            successMessage += `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${preorderResponse.data.preorder_id}\n\n`;
            
            if (orderType === 'pickup') {
                successMessage += `üè™ –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ —Ñ–∏–ª–∏–∞–ª–∞:\n`;
                successMessage += `üìç ${locationTitle}\n`;
                successMessage += `‚è∞ –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 20-30 –º–∏–Ω—É—Ç\n\n`;
            } else {
                successMessage += `üöó –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É\n`;
                successMessage += `‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 30-40 –º–∏–Ω—É—Ç\n\n`;
            }

            successMessage += `üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${finalAmount} KGS\n\n`;
            successMessage += 'üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n';
            successMessage += '‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º!';
        } else if (preorderResponse.status === 'success') {
            successMessage = '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!\n\n';
            successMessage += `üí∞ –°—É–º–º–∞: ${finalAmount} KGS\n\n`;
            successMessage += 'üìû –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.';
        } else {
            successMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n\n';
            if (preorderResponse.message) {
                successMessage += `–î–µ—Ç–∞–ª–∏: ${preorderResponse.message}\n\n`;
            }
            successMessage += '–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.';
        }

        await sendMessage(phoneNoId, from, successMessage);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ:', error);
        await sendMessage(phoneNoId, from, '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function handleButtonResponse(phoneNoId, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ù–û–ü–ö–ò ===");
        const buttonId = message.interactive.button_reply.id;
        console.log("Button ID:", buttonId);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏:", error);
    }
}

async function handleCatalogResponse(phoneNoId, from, message) {
    try {
        console.log("=== –û–¢–í–ï–¢ –û–¢ –ö–ê–¢–ê–õ–û–ì–ê (PRODUCT LIST) ===");
        console.log("Catalog response:", JSON.stringify(message.interactive, null, 2));
        
        await sendMessage(phoneNoId, from, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑...");
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:", error);
        await sendMessage(phoneNoId, from, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}

// –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤
let productsCache = null;
let cacheExpiry = null;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
async function getAllProducts() {
    try {
        if (productsCache && cacheExpiry && Date.now() < cacheExpiry) {
            console.log("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã");
            return productsCache;
        }
        
        console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ API");
        const response = await axios.get(`${TEMIR_API_BASE}/qr/products`);
        const products = response.data;
        
        const productsMap = {};
        products.forEach(product => {
            productsMap[product.api_id] = {
                id: product.api_id,
                api_id: product.api_id,
                title: product.title,
                measure_unit: product.measure_unit_title || '—à—Ç'
            };
        });
        
        productsCache = productsMap;
        cacheExpiry = Date.now() + (30 * 60 * 1000);
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        return productsMap;
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error.response?.status, error.response?.data);
        return productsCache || {};
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ ID
async function getProductInfo(productId) {
    try {
        const products = await getAllProducts();
        
        if (products[productId]) {
            console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: ${products[productId].title}`);
            return products[productId];
        } else {
            console.log(`‚ùì –¢–æ–≤–∞—Ä ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ`);
            
            const response = await axios.get(`${TEMIR_API_BASE}/qr/products/${productId}`);
            const product = response.data;
            
            return {
                id: product.id,
                api_id: product.api_id,
                title: product.title,
                measure_unit: product.measure_unit_title || '—à—Ç'
            };
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error.response?.status);
        
        return {
            id: productId,
            title: `–¢–æ–≤–∞—Ä ${productId}`,
            measure_unit: '—à—Ç'
        };
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö
async function getBranchInfo(branchId) {
    try {
        const response = await axios.get(`${TEMIR_API_BASE}/qr/restaurants`);
        const restaurants = response.data;
        
        const branch = restaurants.find(r => r.external_id.toString() === branchId);
        
        if (branch) {
            return {
                id: branch.external_id,
                title: branch.title,
                address: branch.address,
                phone: branch.contacts.find(c => c.type === 'PHONE')?.value,
                whatsapp: branch.contacts.find(c => c.type === 'WHATSAPP')?.value
            };
        }
        
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–µ:', error);
        return null;
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendWhatsAppMessage(phoneNoId, messageData) {
    try {
        const response = await axios({
            method: "POST",
            url: `https://graph.facebook.com/v22.0/${phoneNoId}/messages?access_token=${token}`,
            data: messageData,
            headers: {
                "Content-Type": "application/json"
            }
        });
        
        console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:", response.data);
        return response.data;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:");
        console.error("Status:", error.response?.status);
        console.error("Data:", error.response?.data);
        throw error;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function sendCatalog(phoneNoId, to) {
    console.log("=== –û–¢–ü–†–ê–í–ö–ê –ö–ê–¢–ê–õ–û–ì–ê ===");
    
    const catalogData = {
        messaging_product: "whatsapp",
        to: to,
        type: "interactive",
        interactive: {
            type: "catalog_message",
            body: {
                text: "üç£ –ù–∞—à –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ Yaposhkin Rolls!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –±–ª—é–¥–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–≤–µ–∂–∏–µ –∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è —Å –ª—é–±–æ–≤—å—é! ‚ù§Ô∏è"
            },
            footer: {
                text: "–î–æ—Å—Ç–∞–≤–∫–∞ 30-40 –º–∏–Ω—É—Ç"
            },
            action: {
                name: "catalog_message"
            }
        }
    };

    await sendWhatsAppMessage(phoneNoId, catalogData);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(phoneNoId, to, text) {
    const messageData = {
        messaging_product: "whatsapp",
        to: to,
        text: {
            body: text
        }
    };

    return await sendWhatsAppMessage(phoneNoId, messageData);
}

// Flow endpoint –æ–±—Ä–∞–±–æ—Ç–∫–∞
app.post("/flow", async (req, res) => {
    console.log("=== FLOW REQUEST ===");
    console.log("Headers:", JSON.stringify(req.headers, null, 2));
    console.log("Body:", JSON.stringify(req.body, null, 2));

    try {
        const { encrypted_flow_data, encrypted_aes_key, initial_vector } = req.body;

        if (!encrypted_flow_data || !encrypted_aes_key || !initial_vector) {
            console.log("‚ùå Missing encryption parameters");
            return res.status(421).json({ error: "Missing encryption parameters" });
        }

        const { decryptedBody, aesKeyBuffer, initialVectorBuffer } = decryptRequest(req.body);
        
        console.log("‚úÖ Decrypted data:", JSON.stringify(decryptedBody, null, 2));

        const responseData = await processFlowData(decryptedBody);

        const encryptedResponse = encryptResponse(responseData, aesKeyBuffer, initialVectorBuffer);

        console.log("‚úÖ Sending encrypted response");
        res.setHeader('Content-Type', 'text/plain');
        return res.status(200).send(encryptedResponse);

    } catch (error) {
        console.error("‚ùå Flow endpoint error:", error);
        return res.status(421).json({ error: "Request processing failed" });
    }
});

// –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
const decryptRequest = (body) => {
    const { encrypted_aes_key, encrypted_flow_data, initial_vector } = body;
    
    const privatePem = getPrivateKey();
    if (!privatePem) {
        throw new Error("Private key not found");
    }

    const decryptedAesKey = crypto.privateDecrypt(
        {
            key: crypto.createPrivateKey(privatePem),
            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
            oaepHash: "sha256",
        },
        Buffer.from(encrypted_aes_key, "base64")
    );

    const flowDataBuffer = Buffer.from(encrypted_flow_data, "base64");
    const initialVectorBuffer = Buffer.from(initial_vector, "base64");
    
    const TAG_LENGTH = 16;
    const encryptedFlowDataBody = flowDataBuffer.subarray(0, -TAG_LENGTH);
    const encryptedFlowDataTag = flowDataBuffer.subarray(-TAG_LENGTH);

    const decipher = crypto.createDecipheriv(
        "aes-128-gcm",
        decryptedAesKey,
        initialVectorBuffer
    );
    
    decipher.setAuthTag(encryptedFlowDataTag);

    const decryptedJSONString = Buffer.concat([
        decipher.update(encryptedFlowDataBody),
        decipher.final(),
    ]).toString("utf-8");

    return {
        decryptedBody: JSON.parse(decryptedJSONString),
        aesKeyBuffer: decryptedAesKey,
        initialVectorBuffer,
    };
};

const encryptResponse = (response, aesKeyBuffer, initialVectorBuffer) => {
    const flippedIv = [];
    for (const pair of initialVectorBuffer.entries()) {
        flippedIv.push(~pair[1]);
    }

    const cipher = crypto.createCipheriv(
        "aes-128-gcm",
        aesKeyBuffer,
        Buffer.from(flippedIv)
    );

    const encryptedData = Buffer.concat([
        cipher.update(JSON.stringify(response), "utf-8"),
        cipher.final(),
        cipher.getAuthTag(),
    ]);

    return encryptedData.toString("base64");
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Flow –¥–∞–Ω–Ω—ã—Ö
async function processFlowData(data) {
    console.log("üîÑ Processing flow data:", data);
    
    try {
        const { version, action, flow_token, data: flowData, screen } = data;
        
        console.log(`Processing: version=${version}, action=${action}, screen=${screen}, token=${flow_token}`);
        console.log("Raw flowData:", flowData);

        switch (action) {
            case "ping":
                console.log("üèì Health check request");
                return {
                    data: {
                        status: "active"
                    }
                };

            case "INIT":
                console.log("üöÄ Flow initialization");
                
                if (flow_token && flow_token.includes("new_customer")) {
                    return {
                        screen: "WELCOME_NEW",
                        data: {
                            flow_type: "new_customer",
                            branches: flowData?.branches || []
                        }
                    };
                } else if (flow_token && flow_token.includes("existing_customer")) {
                    const customerName = flowData?.customer_name || "";
                    const userAddresses = flowData?.user_addresses || [];
                    const branches = flowData?.branches || [];
                    
                    console.log("üìç User addresses from payload:", userAddresses);
                    console.log("üë§ Customer name from payload:", customerName);
                    console.log("üè™ Branches from payload:", branches);
                    
                    return {
                        screen: "ORDER_TYPE",
                        data: {
                            flow_type: "existing_customer",
                            customer_name: customerName,
                            user_addresses: userAddresses,
                            branches: branches
                        }
                    };
                }
                
                return {
                    screen: "ORDER_TYPE",
                    data: {}
                };

            case "data_exchange":
                console.log("üíæ Data exchange from screen:", screen);
                return await handleDataExchange(screen, flowData, flow_token);

            default:
                console.log("‚ùì Unknown action, returning default response");
                return {
                    data: {
                        status: "active"
                    }
                };
        }
    } catch (error) {
        console.error("‚ùå Flow processing error:", error);
        return {
            data: {
                status: "active"
            }
        };
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ data_exchange –≤ Flow
async function handleDataExchange(screen, data, flowToken) {
    console.log(`üìã Data exchange for screen: ${screen}`, data);
    
    try {
        switch (screen) {
            case "WELCOME_NEW":
                return {
                    screen: "ORDER_TYPE_NEW",
                    data: {
                        flow_type: "new_customer",
                        customer_name: data.customer_name,
                        branches: data.branches
                    }
                };

            case "ORDER_TYPE_NEW":
                return {
                    screen: "DELIVERY_OPTIONS_NEW",
                    data: {
                        flow_type: "new_customer",
                        customer_name: data.customer_name,
                        order_type: data.order_type,
                        branches: data.branches
                    }
                };

            case "DELIVERY_OPTIONS_NEW":
                return {
                    screen: "SUCCESS",
                    data: {
                        extension_message_response: {
                            params: {
                                flow_token: flowToken,
                                flow_type: "new_customer",
                                customer_name: data.customer_name,
                                order_type: data.order_type,
                                branch: data.branch,
                                delivery_address: data.delivery_address
                            }
                        }
                    }
                };

            case "ORDER_TYPE":
                return {
                    screen: "DELIVERY_OPTIONS",
                    data: {
                        flow_type: "existing_customer",
                        customer_name: data.customer_name,
                        order_type: data.order_type,
                        user_addresses: data.user_addresses,
                        branches: data.branches
                    }
                };

            case "DELIVERY_OPTIONS":
                return {
                    screen: "PROMO_AND_TIME",
                    data: {
                        flow_type: "existing_customer",
                        customer_name: data.customer_name,
                        order_type: data.order_type,
                        user_addresses: data.user_addresses,
                        branches: data.branches,
                        branch: data.branch,
                        delivery_choice: data.delivery_choice,
                        new_address: data.new_address
                    }
                };

            case "PROMO_AND_TIME":
                return {
                    screen: "SUCCESS",
                    data: {
                        extension_message_response: {
                            params: {
                                flow_token: flowToken,
                                flow_type: "existing_customer",
                                customer_name: data